/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2022-03-10 11:45:36.878836
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h"  // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION == 0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b)                                                                                               \
  {                                                                                                                    \
    if (!(b))                                                                                                          \
    {                                                                                                                  \
      std::stringstream ss;                                                                                            \
      ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " << __PRETTY_FUNCTION__ << ": Assertion '"      \
         << #b << "' failed";                                                                                          \
      throw std::runtime_error(ss.str());                                                                              \
    }                                                                                                                  \
  }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI ((IkReal)6.28318530717959)
#define IKPI ((IkReal)3.14159265358979)
#define IKPI_2 ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif  // _MSC_VER

// lapack routines
extern "C" {
void dgetrf_(const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
void zgetrf_(const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
void dgesv_(const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
void dgetrs_(const char* trans, const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b,
             const int* ldb, int* info);
void dgeev_(const char* jobvl, const char* jobvr, const int* n, double* a, const int* lda, double* wr, double* wi,
            double* vl, const int* ldvl, double* vr, const int* ldvr, double* work, const int* lwork, int* info);
}

using namespace std;  // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE
{
#endif

inline float IKabs(float f)
{
  return fabsf(f);
}
inline double IKabs(double f)
{
  return fabs(f);
}

inline float IKsqr(float f)
{
  return f * f;
}
inline double IKsqr(double f)
{
  return f * f;
}

inline float IKlog(float f)
{
  return logf(f);
}
inline double IKlog(double f)
{
  return log(f);
}

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif

inline float IKasin(float f)
{
  IKFAST_ASSERT(f > -1 - IKFAST_SINCOS_THRESH &&
                f < 1 + IKFAST_SINCOS_THRESH);  // any more error implies something is wrong with the solver
  if (f <= -1)
    return float(-IKPI_2);
  else if (f >= 1)
    return float(IKPI_2);
  return asinf(f);
}
inline double IKasin(double f)
{
  IKFAST_ASSERT(f > -1 - IKFAST_SINCOS_THRESH &&
                f < 1 + IKFAST_SINCOS_THRESH);  // any more error implies something is wrong with the solver
  if (f <= -1)
    return -IKPI_2;
  else if (f >= 1)
    return IKPI_2;
  return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
  while (x < 0)
  {
    x += y;
  }
  return fmodf(x, y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
  while (x < 0)
  {
    x += y;
  }
  return fmod(x, y);
}

inline float IKacos(float f)
{
  IKFAST_ASSERT(f > -1 - IKFAST_SINCOS_THRESH &&
                f < 1 + IKFAST_SINCOS_THRESH);  // any more error implies something is wrong with the solver
  if (f <= -1)
    return float(IKPI);
  else if (f >= 1)
    return float(0);
  return acosf(f);
}
inline double IKacos(double f)
{
  IKFAST_ASSERT(f > -1 - IKFAST_SINCOS_THRESH &&
                f < 1 + IKFAST_SINCOS_THRESH);  // any more error implies something is wrong with the solver
  if (f <= -1)
    return IKPI;
  else if (f >= 1)
    return 0;
  return acos(f);
}
inline float IKsin(float f)
{
  return sinf(f);
}
inline double IKsin(double f)
{
  return sin(f);
}
inline float IKcos(float f)
{
  return cosf(f);
}
inline double IKcos(double f)
{
  return cos(f);
}
inline float IKtan(float f)
{
  return tanf(f);
}
inline double IKtan(double f)
{
  return tan(f);
}
inline float IKsqrt(float f)
{
  if (f <= 0.0f)
    return 0.0f;
  return sqrtf(f);
}
inline double IKsqrt(double f)
{
  if (f <= 0.0)
    return 0.0;
  return sqrt(f);
}
inline float IKatan2Simple(float fy, float fx)
{
  return atan2f(fy, fx);
}
inline float IKatan2(float fy, float fx)
{
  if (isnan(fy))
  {
    IKFAST_ASSERT(!isnan(fx));  // if both are nan, probably wrong value will be returned
    return float(IKPI_2);
  }
  else if (isnan(fx))
  {
    return 0;
  }
  return atan2f(fy, fx);
}
inline double IKatan2Simple(double fy, double fx)
{
  return atan2(fy, fx);
}
inline double IKatan2(double fy, double fx)
{
  if (isnan(fy))
  {
    IKFAST_ASSERT(!isnan(fx));  // if both are nan, probably wrong value will be returned
    return IKPI_2;
  }
  else if (isnan(fx))
  {
    return 0;
  }
  return atan2(fy, fx);
}

template <typename T>
struct CheckValue
{
  T value;
  bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
  CheckValue<T> ret;
  ret.valid = false;
  ret.value = 0;
  if (!isnan(fy) && !isnan(fx))
  {
    if (IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH)
    {
      ret.value = IKatan2Simple(fy, fx);
      ret.valid = true;
    }
  }
  return ret;
}

inline float IKsign(float f)
{
  if (f > 0)
  {
    return float(1);
  }
  else if (f < 0)
  {
    return float(-1);
  }
  return 0;
}

inline double IKsign(double f)
{
  if (f > 0)
  {
    return 1.0;
  }
  else if (f < 0)
  {
    return -1.0;
  }
  return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
  CheckValue<T> ret;
  ret.valid = true;
  if (n == 0)
  {
    ret.value = 1.0;
    return ret;
  }
  else if (n == 1)
  {
    ret.value = f;
    return ret;
  }
  else if (n < 0)
  {
    if (f == 0)
    {
      ret.valid = false;
      ret.value = (T)1.0e30;
      return ret;
    }
    if (n == -1)
    {
      ret.value = T(1.0) / f;
      return ret;
    }
  }

  int num = n > 0 ? n : -n;
  if (num == 2)
  {
    ret.value = f * f;
  }
  else if (num == 3)
  {
    ret.value = f * f * f;
  }
  else
  {
    ret.value = 1.0;
    while (num > 0)
    {
      if (num & 1)
      {
        ret.value *= f;
      }
      num >>= 1;
      f *= f;
    }
  }

  if (n < 0)
  {
    ret.value = T(1.0) / ret.value;
  }
  return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot)
{
  IkReal x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19;
  x0 = IKsin(j[0]);
  x1 = IKsin(j[6]);
  x2 = IKcos(j[0]);
  x3 = IKcos(j[5]);
  x4 = IKcos(j[4]);
  x5 = IKcos(j[6]);
  x6 = IKsin(j[5]);
  x7 = IKsin(j[4]);
  x8 = ((0.2482) * x3);
  x9 = ((1.0) * x0);
  x10 = ((1.0) * x6);
  x11 = (x2 * x3);
  x12 = (x0 * x7);
  x13 = (x1 * x4);
  x14 = (x0 * x3);
  x15 = (x2 * x6);
  x16 = (x4 * x5);
  x17 = (x0 * x6);
  x18 = (x15 * x7);
  x19 = (x6 * x7 * x9);
  eerot[0] = (((x5 * (((((-1.0) * x19)) + x11)))) + (((-1.0) * x13 * x9)));
  eerot[1] = (((x1 * (((((-1.0) * x11)) + x19)))) + (((-1.0) * x16 * x9)));
  eerot[2] = (x15 + ((x12 * x3)));
  eetrans[0] =
      ((((-0.027) * x0)) + (((0.2482) * x15)) + (((0.00053) * x2)) + ((j[3] * x2)) + ((x12 * x8)) + ((j[2] * x2)));
  eerot[3] = (((x5 * ((x14 + x18)))) + ((x13 * x2)));
  eerot[4] = (((x1 * (((((-1.0) * x3 * x9)) + (((-1.0) * x10 * x2 * x7)))))) + ((x16 * x2)));
  eerot[5] = ((((-1.0) * x11 * x7)) + x17);
  eetrans[1] = ((0.2) + (((0.2482) * x17)) + (((0.00053) * x0)) + (((0.027) * x2)) + (((-1.0) * x2 * x7 * x8)) +
                ((j[3] * x0)) + ((j[2] * x0)));
  eerot[6] = (((x1 * x7)) + (((-1.0) * x10 * x16)));
  eerot[7] = (((x5 * x7)) + ((x13 * x6)));
  eerot[8] = (x3 * x4);
  eetrans[2] = ((0.7115) + ((x4 * x8)) + j[1]);
}

IKFAST_API int GetNumFreeParameters()
{
  return 1;
}
IKFAST_API int* GetFreeParameters()
{
  static int freeparams[] = { 2 };
  return freeparams;
}
IKFAST_API int GetNumJoints()
{
  return 7;
}

IKFAST_API int GetIkRealSize()
{
  return sizeof(IkReal);
}

IKFAST_API int GetIkType()
{
  return 0x67000001;
}

class IKSolver
{
public:
  IkReal j0, cj0, sj0, htj0, j0mul, j1, cj1, sj1, htj1, j1mul, j3, cj3, sj3, htj3, j3mul, j4, cj4, sj4, htj4, j4mul, j5,
      cj5, sj5, htj5, j5mul, j6, cj6, sj6, htj6, j6mul, j2, cj2, sj2, htj2, new_r00, r00, rxp0_0, new_r01, r01, rxp0_1,
      new_r02, r02, rxp0_2, new_r10, r10, rxp1_0, new_r11, r11, rxp1_1, new_r12, r12, rxp1_2, new_r20, r20, rxp2_0,
      new_r21, r21, rxp2_1, new_r22, r22, rxp2_2, new_px, px, npx, new_py, py, npy, new_pz, pz, npz, pp;
  unsigned char _ij0[2], _nj0, _ij1[2], _nj1, _ij3[2], _nj3, _ij4[2], _nj4, _ij5[2], _nj5, _ij6[2], _nj6, _ij2[2], _nj2;

  IkReal j100, cj100, sj100;
  unsigned char _ij100[2], _nj100;
  bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions)
  {
    j0 = numeric_limits<IkReal>::quiet_NaN();
    _ij0[0] = -1;
    _ij0[1] = -1;
    _nj0 = -1;
    j1 = numeric_limits<IkReal>::quiet_NaN();
    _ij1[0] = -1;
    _ij1[1] = -1;
    _nj1 = -1;
    j3 = numeric_limits<IkReal>::quiet_NaN();
    _ij3[0] = -1;
    _ij3[1] = -1;
    _nj3 = -1;
    j4 = numeric_limits<IkReal>::quiet_NaN();
    _ij4[0] = -1;
    _ij4[1] = -1;
    _nj4 = -1;
    j5 = numeric_limits<IkReal>::quiet_NaN();
    _ij5[0] = -1;
    _ij5[1] = -1;
    _nj5 = -1;
    j6 = numeric_limits<IkReal>::quiet_NaN();
    _ij6[0] = -1;
    _ij6[1] = -1;
    _nj6 = -1;
    _ij2[0] = -1;
    _ij2[1] = -1;
    _nj2 = 0;
    for (int dummyiter = 0; dummyiter < 1; ++dummyiter)
    {
      solutions.Clear();
      j2 = pfree[0];
      cj2 = cos(pfree[0]);
      sj2 = sin(pfree[0]), htj2 = tan(pfree[0] * 0.5);
      r00 = eerot[0 * 3 + 0];
      r01 = eerot[0 * 3 + 1];
      r02 = eerot[0 * 3 + 2];
      r10 = eerot[1 * 3 + 0];
      r11 = eerot[1 * 3 + 1];
      r12 = eerot[1 * 3 + 2];
      r20 = eerot[2 * 3 + 0];
      r21 = eerot[2 * 3 + 1];
      r22 = eerot[2 * 3 + 2];
      px = eetrans[0];
      py = eetrans[1];
      pz = eetrans[2];

      new_r00 = r00;
      new_r01 = r01;
      new_r02 = r02;
      new_px = ((((-0.2482) * r02)) + px);
      new_r10 = r10;
      new_r11 = r11;
      new_r12 = r12;
      new_py = ((-0.2) + (((-0.2482) * r12)) + py);
      new_r20 = r20;
      new_r21 = r21;
      new_r22 = r22;
      new_pz = ((-0.562) + (((-0.2482) * r22)) + pz);
      r00 = new_r00;
      r01 = new_r01;
      r02 = new_r02;
      r10 = new_r10;
      r11 = new_r11;
      r12 = new_r12;
      r20 = new_r20;
      r21 = new_r21;
      r22 = new_r22;
      px = new_px;
      py = new_py;
      pz = new_pz;
      IkReal x20 = ((1.0) * px);
      IkReal x21 = ((1.0) * pz);
      IkReal x22 = ((1.0) * py);
      pp = ((px * px) + (py * py) + (pz * pz));
      npx = (((px * r00)) + ((py * r10)) + ((pz * r20)));
      npy = (((px * r01)) + ((py * r11)) + ((pz * r21)));
      npz = (((px * r02)) + ((py * r12)) + ((pz * r22)));
      rxp0_0 = ((((-1.0) * r20 * x22)) + ((pz * r10)));
      rxp0_1 = (((px * r20)) + (((-1.0) * r00 * x21)));
      rxp0_2 = (((py * r00)) + (((-1.0) * r10 * x20)));
      rxp1_0 = ((((-1.0) * r21 * x22)) + ((pz * r11)));
      rxp1_1 = (((px * r21)) + (((-1.0) * r01 * x21)));
      rxp1_2 = ((((-1.0) * r11 * x20)) + ((py * r01)));
      rxp2_0 = ((((-1.0) * r22 * x22)) + ((pz * r12)));
      rxp2_1 = (((px * r22)) + (((-1.0) * r02 * x21)));
      rxp2_2 = (((py * r02)) + (((-1.0) * r12 * x20)));
      {
        IkReal j1array[1], cj1array[1], sj1array[1];
        bool j1valid[1] = { false };
        _nj1 = 1;
        j1array[0] = ((-0.1495) + pz);
        sj1array[0] = IKsin(j1array[0]);
        cj1array[0] = IKcos(j1array[0]);
        j1valid[0] = true;
        for (int ij1 = 0; ij1 < 1; ++ij1)
        {
          if (!j1valid[ij1])
          {
            continue;
          }
          _ij1[0] = ij1;
          _ij1[1] = -1;
          for (int iij1 = ij1 + 1; iij1 < 1; ++iij1)
          {
            if (j1valid[iij1] && IKabs(cj1array[ij1] - cj1array[iij1]) < IKFAST_SOLUTION_THRESH &&
                IKabs(sj1array[ij1] - sj1array[iij1]) < IKFAST_SOLUTION_THRESH)
            {
              j1valid[iij1] = false;
              _ij1[1] = iij1;
              break;
            }
          }
          j1 = j1array[ij1];
          cj1 = cj1array[ij1];
          sj1 = sj1array[ij1];

          {
            IkReal j3array[2], cj3array[2], sj3array[2];
            bool j3valid[2] = { false };
            _nj3 = 2;
            IkReal x23 = ((1.0) * j2);
            if ((((-0.092317) + (((4.0) * pp)) + (((-4.0) * (j1 * j1))) + (((-1.196) * j1)))) < -0.00001)
              continue;
            IkReal x24 =
                ((0.5) * (IKsqrt(((-0.092317) + (((4.0) * pp)) + (((-4.0) * (j1 * j1))) + (((-1.196) * j1))))));
            j3array[0] = ((-0.00053) + (((-1.0) * x24)) + (((-1.0) * x23)));
            sj3array[0] = IKsin(j3array[0]);
            cj3array[0] = IKcos(j3array[0]);
            j3array[1] = ((-0.00053) + (((-1.0) * x23)) + x24);
            sj3array[1] = IKsin(j3array[1]);
            cj3array[1] = IKcos(j3array[1]);
            j3valid[0] = true;
            j3valid[1] = true;
            for (int ij3 = 0; ij3 < 2; ++ij3)
            {
              if (!j3valid[ij3])
              {
                continue;
              }
              _ij3[0] = ij3;
              _ij3[1] = -1;
              for (int iij3 = ij3 + 1; iij3 < 2; ++iij3)
              {
                if (j3valid[iij3] && IKabs(cj3array[ij3] - cj3array[iij3]) < IKFAST_SOLUTION_THRESH &&
                    IKabs(sj3array[ij3] - sj3array[iij3]) < IKFAST_SOLUTION_THRESH)
                {
                  j3valid[iij3] = false;
                  _ij3[1] = iij3;
                  break;
                }
              }
              j3 = j3array[ij3];
              cj3 = cj3array[ij3];
              sj3 = sj3array[ij3];

              {
                IkReal j0eval[3];
                IkReal x25 = pz * pz;
                IkReal x26 = ((1000.0) * j2);
                IkReal x27 = ((1000.0) * j3);
                j0eval[0] = ((((-1.0) * x25)) + pp);
                j0eval[1] = ((IKabs((((px * x27)) + ((px * x26)) + (((0.53) * px)) + (((27.0) * py))))) +
                             (IKabs((((py * x26)) + ((py * x27)) + (((0.53) * py)) + (((-27.0) * px))))));
                j0eval[2] = IKsign(((((1000.0) * pp)) + (((-1000.0) * x25))));
                if (IKabs(j0eval[0]) < 0.0000010000000000 || IKabs(j0eval[1]) < 0.0000010000000000 ||
                    IKabs(j0eval[2]) < 0.0000010000000000)
                {
                  {
                    IkReal j0eval[2];
                    IkReal x28 = pz * pz;
                    IkReal x29 = ((1000.0) * j2);
                    j0eval[0] = ((((-1.0) * j2 * x28)) + ((j2 * pp)));
                    j0eval[1] = IKsign((((pp * x29)) + (((-1.0) * x28 * x29))));
                    if (IKabs(j0eval[0]) < 0.0000010000000000 || IKabs(j0eval[1]) < 0.0000010000000000)
                    {
                      {
                        IkReal evalcond[1];
                        bool bgotonextstatement = true;
                        do
                        {
                          evalcond[0] = IKabs(j2);
                          if (IKabs(evalcond[0]) < 0.0000050000000000)
                          {
                            bgotonextstatement = false;
                            {
                              IkReal j0eval[3];
                              sj2 = 0;
                              cj2 = 1.0;
                              j2 = 0;
                              IkReal x30 = pz * pz;
                              IkReal x31 = ((1000.0) * j3);
                              j0eval[0] = ((((-1.0) * x30)) + pp);
                              j0eval[1] = ((IKabs((((py * x31)) + (((0.53) * py)) + (((-27.0) * px))))) +
                                           (IKabs(((((0.53) * px)) + (((27.0) * py)) + ((px * x31))))));
                              j0eval[2] = IKsign(((((-1000.0) * x30)) + (((1000.0) * pp))));
                              if (IKabs(j0eval[0]) < 0.0000010000000000 || IKabs(j0eval[1]) < 0.0000010000000000 ||
                                  IKabs(j0eval[2]) < 0.0000010000000000)
                              {
                                continue;  // no branches [j0]
                              }
                              else
                              {
                                {
                                  IkReal j0array[1], cj0array[1], sj0array[1];
                                  bool j0valid[1] = { false };
                                  _nj0 = 1;
                                  IkReal x32 = ((1000.0) * j3);
                                  CheckValue<IkReal> x33 =
                                      IKatan2WithCheck(IkReal((((py * x32)) + (((0.53) * py)) + (((-27.0) * px)))),
                                                       IkReal(((((0.53) * px)) + (((27.0) * py)) + ((px * x32)))),
                                                       IKFAST_ATAN2_MAGTHRESH);
                                  if (!x33.valid)
                                  {
                                    continue;
                                  }
                                  CheckValue<IkReal> x34 = IKPowWithIntegerCheck(
                                      IKsign(((((-1000.0) * (pz * pz))) + (((1000.0) * pp)))), -1);
                                  if (!x34.valid)
                                  {
                                    continue;
                                  }
                                  j0array[0] = ((-1.5707963267949) + (x33.value) + (((1.5707963267949) * (x34.value))));
                                  sj0array[0] = IKsin(j0array[0]);
                                  cj0array[0] = IKcos(j0array[0]);
                                  if (j0array[0] > IKPI)
                                  {
                                    j0array[0] -= IK2PI;
                                  }
                                  else if (j0array[0] < -IKPI)
                                  {
                                    j0array[0] += IK2PI;
                                  }
                                  j0valid[0] = true;
                                  for (int ij0 = 0; ij0 < 1; ++ij0)
                                  {
                                    if (!j0valid[ij0])
                                    {
                                      continue;
                                    }
                                    _ij0[0] = ij0;
                                    _ij0[1] = -1;
                                    for (int iij0 = ij0 + 1; iij0 < 1; ++iij0)
                                    {
                                      if (j0valid[iij0] &&
                                          IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH &&
                                          IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH)
                                      {
                                        j0valid[iij0] = false;
                                        _ij0[1] = iij0;
                                        break;
                                      }
                                    }
                                    j0 = j0array[ij0];
                                    cj0 = cj0array[ij0];
                                    sj0 = sj0array[ij0];
                                    {
                                      IkReal evalcond[2];
                                      IkReal x35 = IKcos(j0);
                                      IkReal x36 = IKsin(j0);
                                      IkReal x37 = ((1.0) * x35);
                                      evalcond[0] = ((0.027) + (((-1.0) * py * x37)) + ((px * x36)));
                                      evalcond[1] = ((0.00053) + (((-1.0) * py * x36)) + j3 + (((-1.0) * px * x37)));
                                      if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                          IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH)
                                      {
                                        continue;
                                      }
                                    }

                                    rotationfunction0(solutions);
                                  }
                                }
                              }
                            }
                          }
                        } while (0);
                        if (bgotonextstatement)
                        {
                          bool bgotonextstatement = true;
                          do
                          {
                            if (1)
                            {
                              bgotonextstatement = false;
                              continue;  // branch miss [j0]
                            }
                          } while (0);
                          if (bgotonextstatement) {}
                        }
                      }
                    }
                    else
                    {
                      {
                        IkReal j0array[1], cj0array[1], sj0array[1];
                        bool j0valid[1] = { false };
                        _nj0 = 1;
                        IkReal x533 = j2 * j2;
                        IkReal x534 = j1 * j1;
                        IkReal x535 = j3 * j3;
                        IkReal x536 = ((0.53) * j3);
                        IkReal x537 = ((500.0) * px);
                        IkReal x538 = ((1000.0) * j2);
                        IkReal x539 = ((500.0) * py);
                        IkReal x540 = ((27.0) * j2);
                        IkReal x541 = ((1000.0) * j1 * pz);
                        CheckValue<IkReal> x542 = IKatan2WithCheck(
                            IkReal((((pp * x539)) + (((-1.0) * px * x540)) + (((-1.0) * py * x536)) +
                                    (((-11.53976545) * py)) + ((x534 * x539)) + (((-1.0) * py * x541)) +
                                    (((-1.0) * x535 * x539)) + ((x533 * x539)))),
                            IkReal((((py * x540)) + ((pp * x537)) + (((-1.0) * px * x536)) + (((-1.0) * px * x541)) +
                                    (((-11.53976545) * px)) + ((x534 * x537)) + (((-1.0) * x535 * x537)) +
                                    ((x533 * x537)))),
                            IKFAST_ATAN2_MAGTHRESH);
                        if (!x542.valid)
                        {
                          continue;
                        }
                        CheckValue<IkReal> x543 =
                            IKPowWithIntegerCheck(IKsign((((pp * x538)) + (((-1.0) * x538 * (pz * pz))))), -1);
                        if (!x543.valid)
                        {
                          continue;
                        }
                        j0array[0] = ((-1.5707963267949) + (x542.value) + (((1.5707963267949) * (x543.value))));
                        sj0array[0] = IKsin(j0array[0]);
                        cj0array[0] = IKcos(j0array[0]);
                        if (j0array[0] > IKPI)
                        {
                          j0array[0] -= IK2PI;
                        }
                        else if (j0array[0] < -IKPI)
                        {
                          j0array[0] += IK2PI;
                        }
                        j0valid[0] = true;
                        for (int ij0 = 0; ij0 < 1; ++ij0)
                        {
                          if (!j0valid[ij0])
                          {
                            continue;
                          }
                          _ij0[0] = ij0;
                          _ij0[1] = -1;
                          for (int iij0 = ij0 + 1; iij0 < 1; ++iij0)
                          {
                            if (j0valid[iij0] && IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH &&
                                IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH)
                            {
                              j0valid[iij0] = false;
                              _ij0[1] = iij0;
                              break;
                            }
                          }
                          j0 = j0array[ij0];
                          cj0 = cj0array[ij0];
                          sj0 = sj0array[ij0];
                          {
                            IkReal evalcond[3];
                            IkReal x544 = IKcos(j0);
                            IkReal x545 = IKsin(j0);
                            IkReal x546 = ((2.0) * j2);
                            IkReal x547 = ((1.0) * x544);
                            IkReal x548 = (py * x545);
                            evalcond[0] = ((0.027) + ((px * x545)) + (((-1.0) * py * x547)));
                            evalcond[1] = ((0.00053) + (((-1.0) * x548)) + (((-1.0) * px * x547)) + j3 + j2);
                            evalcond[2] = ((0.0230795309) + (((-1.0) * (j1 * j1))) + (((-1.0) * pp)) + (j3 * j3) +
                                           ((px * x544 * x546)) + (((2.0) * j1 * pz)) + (((0.00106) * j3)) +
                                           ((x546 * x548)) + (((-1.0) * (j2 * j2))));
                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH)
                            {
                              continue;
                            }
                          }

                          rotationfunction0(solutions);
                        }
                      }
                    }
                  }
                }
                else
                {
                  {
                    IkReal j0array[1], cj0array[1], sj0array[1];
                    bool j0valid[1] = { false };
                    _nj0 = 1;
                    IkReal x549 = ((1000.0) * j2);
                    IkReal x550 = ((1000.0) * j3);
                    CheckValue<IkReal> x551 =
                        IKatan2WithCheck(IkReal((((py * x549)) + ((py * x550)) + (((0.53) * py)) + (((-27.0) * px)))),
                                         IkReal(((((0.53) * px)) + (((27.0) * py)) + ((px * x550)) + ((px * x549)))),
                                         IKFAST_ATAN2_MAGTHRESH);
                    if (!x551.valid)
                    {
                      continue;
                    }
                    CheckValue<IkReal> x552 =
                        IKPowWithIntegerCheck(IKsign(((((-1000.0) * (pz * pz))) + (((1000.0) * pp)))), -1);
                    if (!x552.valid)
                    {
                      continue;
                    }
                    j0array[0] = ((-1.5707963267949) + (x551.value) + (((1.5707963267949) * (x552.value))));
                    sj0array[0] = IKsin(j0array[0]);
                    cj0array[0] = IKcos(j0array[0]);
                    if (j0array[0] > IKPI)
                    {
                      j0array[0] -= IK2PI;
                    }
                    else if (j0array[0] < -IKPI)
                    {
                      j0array[0] += IK2PI;
                    }
                    j0valid[0] = true;
                    for (int ij0 = 0; ij0 < 1; ++ij0)
                    {
                      if (!j0valid[ij0])
                      {
                        continue;
                      }
                      _ij0[0] = ij0;
                      _ij0[1] = -1;
                      for (int iij0 = ij0 + 1; iij0 < 1; ++iij0)
                      {
                        if (j0valid[iij0] && IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH &&
                            IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH)
                        {
                          j0valid[iij0] = false;
                          _ij0[1] = iij0;
                          break;
                        }
                      }
                      j0 = j0array[ij0];
                      cj0 = cj0array[ij0];
                      sj0 = sj0array[ij0];
                      {
                        IkReal evalcond[3];
                        IkReal x553 = IKcos(j0);
                        IkReal x554 = IKsin(j0);
                        IkReal x555 = ((2.0) * j2);
                        IkReal x556 = ((1.0) * x553);
                        IkReal x557 = (py * x554);
                        evalcond[0] = ((0.027) + ((px * x554)) + (((-1.0) * py * x556)));
                        evalcond[1] = ((0.00053) + (((-1.0) * x557)) + (((-1.0) * px * x556)) + j3 + j2);
                        evalcond[2] = ((0.0230795309) + ((x555 * x557)) + (((-1.0) * (j1 * j1))) + (((-1.0) * pp)) +
                                       ((px * x553 * x555)) + (j3 * j3) + (((2.0) * j1 * pz)) + (((0.00106) * j3)) +
                                       (((-1.0) * (j2 * j2))));
                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                            IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH)
                        {
                          continue;
                        }
                      }

                      rotationfunction0(solutions);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return solutions.GetNumSolutions() > 0;
  }
  inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions)
  {
    for (int rotationiter = 0; rotationiter < 1; ++rotationiter)
    {
      IkReal x38 = ((1.0) * sj0);
      new_r00 = ((-1.0) * r20);
      new_r01 = ((-1.0) * r21);
      new_r02 = ((-1.0) * r22);
      new_r10 = ((((-1.0) * r00 * x38)) + ((cj0 * r10)));
      new_r11 = ((((-1.0) * r01 * x38)) + ((cj0 * r11)));
      new_r12 = ((((-1.0) * r02 * x38)) + ((cj0 * r12)));
      new_r20 = (((r10 * sj0)) + ((cj0 * r00)));
      new_r21 = (((r11 * sj0)) + ((cj0 * r01)));
      new_r22 = (((r12 * sj0)) + ((cj0 * r02)));
      {
        IkReal j5array[2], cj5array[2], sj5array[2];
        bool j5valid[2] = { false };
        _nj5 = 2;
        sj5array[0] = new_r22;
        if (sj5array[0] >= -1 - IKFAST_SINCOS_THRESH && sj5array[0] <= 1 + IKFAST_SINCOS_THRESH)
        {
          j5valid[0] = j5valid[1] = true;
          j5array[0] = IKasin(sj5array[0]);
          cj5array[0] = IKcos(j5array[0]);
          sj5array[1] = sj5array[0];
          j5array[1] = j5array[0] > 0 ? (IKPI - j5array[0]) : (-IKPI - j5array[0]);
          cj5array[1] = -cj5array[0];
        }
        else if (isnan(sj5array[0]))
        {
          // probably any value will work
          j5valid[0] = true;
          cj5array[0] = 1;
          sj5array[0] = 0;
          j5array[0] = 0;
        }
        for (int ij5 = 0; ij5 < 2; ++ij5)
        {
          if (!j5valid[ij5])
          {
            continue;
          }
          _ij5[0] = ij5;
          _ij5[1] = -1;
          for (int iij5 = ij5 + 1; iij5 < 2; ++iij5)
          {
            if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH &&
                IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
            {
              j5valid[iij5] = false;
              _ij5[1] = iij5;
              break;
            }
          }
          j5 = j5array[ij5];
          cj5 = cj5array[ij5];
          sj5 = sj5array[ij5];

          {
            IkReal j6eval[3];
            j6eval[0] = cj5;
            j6eval[1] = IKsign(cj5);
            j6eval[2] = ((IKabs(new_r20)) + (IKabs(new_r21)));
            if (IKabs(j6eval[0]) < 0.0000010000000000 || IKabs(j6eval[1]) < 0.0000010000000000 ||
                IKabs(j6eval[2]) < 0.0000010000000000)
            {
              {
                IkReal j4eval[3];
                j4eval[0] = cj5;
                j4eval[1] = IKsign(cj5);
                j4eval[2] = ((IKabs(new_r12)) + (IKabs(new_r02)));
                if (IKabs(j4eval[0]) < 0.0000010000000000 || IKabs(j4eval[1]) < 0.0000010000000000 ||
                    IKabs(j4eval[2]) < 0.0000010000000000)
                {
                  {
                    IkReal j4eval[2];
                    j4eval[0] = cj5;
                    j4eval[1] = new_r12;
                    if (IKabs(j4eval[0]) < 0.0000010000000000 || IKabs(j4eval[1]) < 0.0000010000000000)
                    {
                      {
                        IkReal evalcond[5];
                        bool bgotonextstatement = true;
                        do
                        {
                          evalcond[0] =
                              ((-3.14159265358979) +
                               (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j5)))), 6.28318530717959)));
                          evalcond[1] = new_r02;
                          evalcond[2] = new_r12;
                          evalcond[3] = new_r21;
                          evalcond[4] = new_r20;
                          if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 &&
                              IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000 &&
                              IKabs(evalcond[4]) < 0.0000050000000000)
                          {
                            bgotonextstatement = false;
                            IkReal j6mul = 1;
                            j6 = 0;
                            j4mul = -1.0;
                            if (IKabs(((-1.0) * new_r01)) < IKFAST_ATAN2_MAGTHRESH &&
                                IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH &&
                                IKabs(IKsqr(((-1.0) * new_r01)) + IKsqr(new_r00) - 1) <= IKFAST_SINCOS_THRESH)
                              continue;
                            j4 = IKatan2(((-1.0) * new_r01), new_r00);
                            {
                              std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                              vinfos[0].jointtype = 1;
                              vinfos[0].foffset = j0;
                              vinfos[0].indices[0] = _ij0[0];
                              vinfos[0].indices[1] = _ij0[1];
                              vinfos[0].maxsolutions = _nj0;
                              vinfos[1].jointtype = 17;
                              vinfos[1].foffset = j1;
                              vinfos[1].indices[0] = _ij1[0];
                              vinfos[1].indices[1] = _ij1[1];
                              vinfos[1].maxsolutions = _nj1;
                              vinfos[2].jointtype = 17;
                              vinfos[2].foffset = j2;
                              vinfos[2].indices[0] = _ij2[0];
                              vinfos[2].indices[1] = _ij2[1];
                              vinfos[2].maxsolutions = _nj2;
                              vinfos[3].jointtype = 17;
                              vinfos[3].foffset = j3;
                              vinfos[3].indices[0] = _ij3[0];
                              vinfos[3].indices[1] = _ij3[1];
                              vinfos[3].maxsolutions = _nj3;
                              vinfos[4].jointtype = 1;
                              vinfos[4].foffset = j4;
                              vinfos[4].fmul = j4mul;
                              vinfos[4].freeind = 0;
                              vinfos[4].maxsolutions = 0;
                              vinfos[5].jointtype = 1;
                              vinfos[5].foffset = j5;
                              vinfos[5].indices[0] = _ij5[0];
                              vinfos[5].indices[1] = _ij5[1];
                              vinfos[5].maxsolutions = _nj5;
                              vinfos[6].jointtype = 1;
                              vinfos[6].foffset = j6;
                              vinfos[6].fmul = j6mul;
                              vinfos[6].freeind = 0;
                              vinfos[6].maxsolutions = 0;
                              std::vector<int> vfree(1);
                              vfree[0] = 6;
                              solutions.AddSolution(vinfos, vfree);
                            }
                          }
                        } while (0);
                        if (bgotonextstatement)
                        {
                          bool bgotonextstatement = true;
                          do
                          {
                            evalcond[0] =
                                ((-3.14159265358979) +
                                 (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j5)))), 6.28318530717959)));
                            evalcond[1] = new_r02;
                            evalcond[2] = new_r12;
                            evalcond[3] = new_r21;
                            evalcond[4] = new_r20;
                            if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 &&
                                IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000 &&
                                IKabs(evalcond[4]) < 0.0000050000000000)
                            {
                              bgotonextstatement = false;
                              IkReal j6mul = 1;
                              j6 = 0;
                              j4mul = 1.0;
                              if (IKabs(((-1.0) * new_r01)) < IKFAST_ATAN2_MAGTHRESH &&
                                  IKabs(((-1.0) * new_r00)) < IKFAST_ATAN2_MAGTHRESH &&
                                  IKabs(IKsqr(((-1.0) * new_r01)) + IKsqr(((-1.0) * new_r00)) - 1) <=
                                      IKFAST_SINCOS_THRESH)
                                continue;
                              j4 = IKatan2(((-1.0) * new_r01), ((-1.0) * new_r00));
                              {
                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                vinfos[0].jointtype = 1;
                                vinfos[0].foffset = j0;
                                vinfos[0].indices[0] = _ij0[0];
                                vinfos[0].indices[1] = _ij0[1];
                                vinfos[0].maxsolutions = _nj0;
                                vinfos[1].jointtype = 17;
                                vinfos[1].foffset = j1;
                                vinfos[1].indices[0] = _ij1[0];
                                vinfos[1].indices[1] = _ij1[1];
                                vinfos[1].maxsolutions = _nj1;
                                vinfos[2].jointtype = 17;
                                vinfos[2].foffset = j2;
                                vinfos[2].indices[0] = _ij2[0];
                                vinfos[2].indices[1] = _ij2[1];
                                vinfos[2].maxsolutions = _nj2;
                                vinfos[3].jointtype = 17;
                                vinfos[3].foffset = j3;
                                vinfos[3].indices[0] = _ij3[0];
                                vinfos[3].indices[1] = _ij3[1];
                                vinfos[3].maxsolutions = _nj3;
                                vinfos[4].jointtype = 1;
                                vinfos[4].foffset = j4;
                                vinfos[4].fmul = j4mul;
                                vinfos[4].freeind = 0;
                                vinfos[4].maxsolutions = 0;
                                vinfos[5].jointtype = 1;
                                vinfos[5].foffset = j5;
                                vinfos[5].indices[0] = _ij5[0];
                                vinfos[5].indices[1] = _ij5[1];
                                vinfos[5].maxsolutions = _nj5;
                                vinfos[6].jointtype = 1;
                                vinfos[6].foffset = j6;
                                vinfos[6].fmul = j6mul;
                                vinfos[6].freeind = 0;
                                vinfos[6].maxsolutions = 0;
                                std::vector<int> vfree(1);
                                vfree[0] = 6;
                                solutions.AddSolution(vinfos, vfree);
                              }
                            }
                          } while (0);
                          if (bgotonextstatement)
                          {
                            bool bgotonextstatement = true;
                            do
                            {
                              evalcond[0] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                              if (IKabs(evalcond[0]) < 0.0000050000000000)
                              {
                                bgotonextstatement = false;
                                {
                                  IkReal j4eval[1];
                                  new_r21 = 0;
                                  new_r20 = 0;
                                  new_r02 = 0;
                                  new_r12 = 0;
                                  IkReal x39 = new_r22 * new_r22;
                                  IkReal x40 = ((16.0) * new_r10);
                                  IkReal x41 = ((16.0) * new_r01);
                                  IkReal x42 = ((16.0) * new_r22);
                                  IkReal x43 = ((8.0) * new_r11);
                                  IkReal x44 = ((8.0) * new_r00);
                                  IkReal x45 = (x39 * x40);
                                  IkReal x46 = (x39 * x41);
                                  j4eval[0] = ((IKabs(((((-1.0) * x41)) + x46))) +
                                               (IKabs((((x39 * x43)) + (((-1.0) * new_r22 * x44))))) +
                                               (IKabs(((((-1.0) * x45)) + x40))) +
                                               (IKabs((((new_r22 * x43)) + (((-1.0) * x44))))) +
                                               (IKabs(((((-1.0) * x40)) + x45))) + (IKabs(((((-1.0) * x46)) + x41))) +
                                               (IKabs(((((-16.0) * new_r11 * x39)) + (((32.0) * new_r11)) +
                                                       (((-1.0) * new_r00 * x42))))) +
                                               (IKabs(((((-32.0) * new_r00 * x39)) + ((new_r11 * x42)) +
                                                       (((16.0) * new_r00))))));
                                  if (IKabs(j4eval[0]) < 0.0000000010000000)
                                  {
                                    continue;  // no branches [j4, j6]
                                  }
                                  else
                                  {
                                    IkReal op[4 + 1], zeror[4];
                                    int numroots;
                                    IkReal j4evalpoly[1];
                                    IkReal x47 = new_r22 * new_r22;
                                    IkReal x48 = ((16.0) * new_r10);
                                    IkReal x49 = (new_r11 * new_r22);
                                    IkReal x50 = (x47 * x48);
                                    IkReal x51 = ((((8.0) * x49)) + (((-8.0) * new_r00)));
                                    op[0] = x51;
                                    op[1] = (x48 + (((-1.0) * x50)));
                                    op[2] = ((((-32.0) * new_r00 * x47)) + (((16.0) * new_r00)) + (((16.0) * x49)));
                                    op[3] = ((((-1.0) * x48)) + x50);
                                    op[4] = x51;
                                    polyroots4(op, zeror, numroots);
                                    IkReal j4array[4], cj4array[4], sj4array[4], tempj4array[1];
                                    int numsolutions = 0;
                                    for (int ij4 = 0; ij4 < numroots; ++ij4)
                                    {
                                      IkReal htj4 = zeror[ij4];
                                      tempj4array[0] = ((2.0) * (atan(htj4)));
                                      for (int kj4 = 0; kj4 < 1; ++kj4)
                                      {
                                        j4array[numsolutions] = tempj4array[kj4];
                                        if (j4array[numsolutions] > IKPI)
                                        {
                                          j4array[numsolutions] -= IK2PI;
                                        }
                                        else if (j4array[numsolutions] < -IKPI)
                                        {
                                          j4array[numsolutions] += IK2PI;
                                        }
                                        sj4array[numsolutions] = IKsin(j4array[numsolutions]);
                                        cj4array[numsolutions] = IKcos(j4array[numsolutions]);
                                        numsolutions++;
                                      }
                                    }
                                    bool j4valid[4] = { true, true, true, true };
                                    _nj4 = 4;
                                    for (int ij4 = 0; ij4 < numsolutions; ++ij4)
                                    {
                                      if (!j4valid[ij4])
                                      {
                                        continue;
                                      }
                                      j4 = j4array[ij4];
                                      cj4 = cj4array[ij4];
                                      sj4 = sj4array[ij4];
                                      htj4 = IKtan(j4 / 2);

                                      IkReal x52 = new_r22 * new_r22;
                                      IkReal x53 = ((16.0) * new_r01);
                                      IkReal x54 = (new_r00 * new_r22);
                                      IkReal x55 = ((8.0) * x54);
                                      IkReal x56 = (new_r11 * x52);
                                      IkReal x57 = (x52 * x53);
                                      IkReal x58 = ((8.0) * x56);
                                      j4evalpoly[0] =
                                          ((((htj4 * htj4 * htj4 * htj4) * ((x58 + (((-1.0) * x55)))))) +
                                           (((htj4 * htj4) *
                                             (((((32.0) * new_r11)) + (((-16.0) * x56)) + (((-16.0) * x54)))))) +
                                           x58 + ((htj4 * ((x53 + (((-1.0) * x57)))))) + (((-1.0) * x55)) +
                                           (((htj4 * htj4 * htj4) * ((x57 + (((-1.0) * x53)))))));
                                      if (IKabs(j4evalpoly[0]) > 0.0000000010000000)
                                      {
                                        continue;
                                      }
                                      _ij4[0] = ij4;
                                      _ij4[1] = -1;
                                      for (int iij4 = ij4 + 1; iij4 < numsolutions; ++iij4)
                                      {
                                        if (j4valid[iij4] &&
                                            IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH &&
                                            IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                                        {
                                          j4valid[iij4] = false;
                                          _ij4[1] = iij4;
                                          break;
                                        }
                                      }
                                      {
                                        IkReal j6eval[3];
                                        new_r21 = 0;
                                        new_r20 = 0;
                                        new_r02 = 0;
                                        new_r12 = 0;
                                        IkReal x59 = cj4 * cj4;
                                        IkReal x60 = (cj4 * new_r22);
                                        IkReal x61 = ((-1.0) + x59 + (((-1.0) * x59 * (new_r22 * new_r22))));
                                        j6eval[0] = x61;
                                        j6eval[1] = ((IKabs((((new_r01 * sj4)) + (((-1.0) * new_r00 * x60))))) +
                                                     (IKabs((((new_r00 * sj4)) + ((new_r01 * x60))))));
                                        j6eval[2] = IKsign(x61);
                                        if (IKabs(j6eval[0]) < 0.0000010000000000 ||
                                            IKabs(j6eval[1]) < 0.0000010000000000 ||
                                            IKabs(j6eval[2]) < 0.0000010000000000)
                                        {
                                          {
                                            IkReal j6eval[1];
                                            new_r21 = 0;
                                            new_r20 = 0;
                                            new_r02 = 0;
                                            new_r12 = 0;
                                            j6eval[0] = new_r22;
                                            if (IKabs(j6eval[0]) < 0.0000010000000000)
                                            {
                                              {
                                                IkReal j6eval[2];
                                                new_r21 = 0;
                                                new_r20 = 0;
                                                new_r02 = 0;
                                                new_r12 = 0;
                                                IkReal x62 = new_r22 * new_r22;
                                                j6eval[0] = (((cj4 * x62)) + (((-1.0) * cj4)));
                                                j6eval[1] = ((((-1.0) * sj4)) + ((sj4 * x62)));
                                                if (IKabs(j6eval[0]) < 0.0000010000000000 ||
                                                    IKabs(j6eval[1]) < 0.0000010000000000)
                                                {
                                                  {
                                                    IkReal evalcond[1];
                                                    bool bgotonextstatement = true;
                                                    do
                                                    {
                                                      evalcond[0] = ((-3.14159265358979) +
                                                                     (IKfmod(((3.14159265358979) +
                                                                              (IKabs(((-1.5707963267949) + j4)))),
                                                                             6.28318530717959)));
                                                      if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                      {
                                                        bgotonextstatement = false;
                                                        {
                                                          IkReal j6array[1], cj6array[1], sj6array[1];
                                                          bool j6valid[1] = { false };
                                                          _nj6 = 1;
                                                          if (IKabs(((-1.0) * new_r00)) < IKFAST_ATAN2_MAGTHRESH &&
                                                              IKabs(((-1.0) * new_r01)) < IKFAST_ATAN2_MAGTHRESH &&
                                                              IKabs(IKsqr(((-1.0) * new_r00)) +
                                                                    IKsqr(((-1.0) * new_r01)) - 1) <=
                                                                  IKFAST_SINCOS_THRESH)
                                                            continue;
                                                          j6array[0] = IKatan2(((-1.0) * new_r00), ((-1.0) * new_r01));
                                                          sj6array[0] = IKsin(j6array[0]);
                                                          cj6array[0] = IKcos(j6array[0]);
                                                          if (j6array[0] > IKPI)
                                                          {
                                                            j6array[0] -= IK2PI;
                                                          }
                                                          else if (j6array[0] < -IKPI)
                                                          {
                                                            j6array[0] += IK2PI;
                                                          }
                                                          j6valid[0] = true;
                                                          for (int ij6 = 0; ij6 < 1; ++ij6)
                                                          {
                                                            if (!j6valid[ij6])
                                                            {
                                                              continue;
                                                            }
                                                            _ij6[0] = ij6;
                                                            _ij6[1] = -1;
                                                            for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                            {
                                                              if (j6valid[iij6] &&
                                                                  IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                      IKFAST_SOLUTION_THRESH &&
                                                                  IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                      IKFAST_SOLUTION_THRESH)
                                                              {
                                                                j6valid[iij6] = false;
                                                                _ij6[1] = iij6;
                                                                break;
                                                              }
                                                            }
                                                            j6 = j6array[ij6];
                                                            cj6 = cj6array[ij6];
                                                            sj6 = sj6array[ij6];
                                                            {
                                                              IkReal evalcond[4];
                                                              IkReal x63 = IKsin(j6);
                                                              IkReal x64 = IKcos(j6);
                                                              evalcond[0] = x63;
                                                              evalcond[1] = ((-1.0) * x64);
                                                              evalcond[2] = ((((-1.0) * new_r00)) + (((-1.0) * x63)));
                                                              evalcond[3] = ((((-1.0) * new_r01)) + (((-1.0) * x64)));
                                                              if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                              {
                                                                continue;
                                                              }
                                                            }

                                                            {
                                                              std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                              vinfos[0].jointtype = 1;
                                                              vinfos[0].foffset = j0;
                                                              vinfos[0].indices[0] = _ij0[0];
                                                              vinfos[0].indices[1] = _ij0[1];
                                                              vinfos[0].maxsolutions = _nj0;
                                                              vinfos[1].jointtype = 17;
                                                              vinfos[1].foffset = j1;
                                                              vinfos[1].indices[0] = _ij1[0];
                                                              vinfos[1].indices[1] = _ij1[1];
                                                              vinfos[1].maxsolutions = _nj1;
                                                              vinfos[2].jointtype = 17;
                                                              vinfos[2].foffset = j2;
                                                              vinfos[2].indices[0] = _ij2[0];
                                                              vinfos[2].indices[1] = _ij2[1];
                                                              vinfos[2].maxsolutions = _nj2;
                                                              vinfos[3].jointtype = 17;
                                                              vinfos[3].foffset = j3;
                                                              vinfos[3].indices[0] = _ij3[0];
                                                              vinfos[3].indices[1] = _ij3[1];
                                                              vinfos[3].maxsolutions = _nj3;
                                                              vinfos[4].jointtype = 1;
                                                              vinfos[4].foffset = j4;
                                                              vinfos[4].indices[0] = _ij4[0];
                                                              vinfos[4].indices[1] = _ij4[1];
                                                              vinfos[4].maxsolutions = _nj4;
                                                              vinfos[5].jointtype = 1;
                                                              vinfos[5].foffset = j5;
                                                              vinfos[5].indices[0] = _ij5[0];
                                                              vinfos[5].indices[1] = _ij5[1];
                                                              vinfos[5].maxsolutions = _nj5;
                                                              vinfos[6].jointtype = 1;
                                                              vinfos[6].foffset = j6;
                                                              vinfos[6].indices[0] = _ij6[0];
                                                              vinfos[6].indices[1] = _ij6[1];
                                                              vinfos[6].maxsolutions = _nj6;
                                                              std::vector<int> vfree(0);
                                                              solutions.AddSolution(vinfos, vfree);
                                                            }
                                                          }
                                                        }
                                                      }
                                                    } while (0);
                                                    if (bgotonextstatement)
                                                    {
                                                      bool bgotonextstatement = true;
                                                      do
                                                      {
                                                        evalcond[0] = ((-3.14159265358979) +
                                                                       (IKfmod(((3.14159265358979) +
                                                                                (IKabs(((1.5707963267949) + j4)))),
                                                                               6.28318530717959)));
                                                        if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                        {
                                                          bgotonextstatement = false;
                                                          {
                                                            IkReal j6array[1], cj6array[1], sj6array[1];
                                                            bool j6valid[1] = { false };
                                                            _nj6 = 1;
                                                            if (IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH &&
                                                                IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH &&
                                                                IKabs(IKsqr(new_r00) + IKsqr(new_r01) - 1) <=
                                                                    IKFAST_SINCOS_THRESH)
                                                              continue;
                                                            j6array[0] = IKatan2(new_r00, new_r01);
                                                            sj6array[0] = IKsin(j6array[0]);
                                                            cj6array[0] = IKcos(j6array[0]);
                                                            if (j6array[0] > IKPI)
                                                            {
                                                              j6array[0] -= IK2PI;
                                                            }
                                                            else if (j6array[0] < -IKPI)
                                                            {
                                                              j6array[0] += IK2PI;
                                                            }
                                                            j6valid[0] = true;
                                                            for (int ij6 = 0; ij6 < 1; ++ij6)
                                                            {
                                                              if (!j6valid[ij6])
                                                              {
                                                                continue;
                                                              }
                                                              _ij6[0] = ij6;
                                                              _ij6[1] = -1;
                                                              for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                              {
                                                                if (j6valid[iij6] &&
                                                                    IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                        IKFAST_SOLUTION_THRESH &&
                                                                    IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                        IKFAST_SOLUTION_THRESH)
                                                                {
                                                                  j6valid[iij6] = false;
                                                                  _ij6[1] = iij6;
                                                                  break;
                                                                }
                                                              }
                                                              j6 = j6array[ij6];
                                                              cj6 = cj6array[ij6];
                                                              sj6 = sj6array[ij6];
                                                              {
                                                                IkReal evalcond[4];
                                                                IkReal x65 = IKsin(j6);
                                                                IkReal x66 = IKcos(j6);
                                                                evalcond[0] = x65;
                                                                evalcond[1] = ((-1.0) * x66);
                                                                evalcond[2] = (new_r00 + (((-1.0) * x65)));
                                                                evalcond[3] = (new_r01 + (((-1.0) * x66)));
                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                {
                                                                  continue;
                                                                }
                                                              }

                                                              {
                                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                                vinfos[0].jointtype = 1;
                                                                vinfos[0].foffset = j0;
                                                                vinfos[0].indices[0] = _ij0[0];
                                                                vinfos[0].indices[1] = _ij0[1];
                                                                vinfos[0].maxsolutions = _nj0;
                                                                vinfos[1].jointtype = 17;
                                                                vinfos[1].foffset = j1;
                                                                vinfos[1].indices[0] = _ij1[0];
                                                                vinfos[1].indices[1] = _ij1[1];
                                                                vinfos[1].maxsolutions = _nj1;
                                                                vinfos[2].jointtype = 17;
                                                                vinfos[2].foffset = j2;
                                                                vinfos[2].indices[0] = _ij2[0];
                                                                vinfos[2].indices[1] = _ij2[1];
                                                                vinfos[2].maxsolutions = _nj2;
                                                                vinfos[3].jointtype = 17;
                                                                vinfos[3].foffset = j3;
                                                                vinfos[3].indices[0] = _ij3[0];
                                                                vinfos[3].indices[1] = _ij3[1];
                                                                vinfos[3].maxsolutions = _nj3;
                                                                vinfos[4].jointtype = 1;
                                                                vinfos[4].foffset = j4;
                                                                vinfos[4].indices[0] = _ij4[0];
                                                                vinfos[4].indices[1] = _ij4[1];
                                                                vinfos[4].maxsolutions = _nj4;
                                                                vinfos[5].jointtype = 1;
                                                                vinfos[5].foffset = j5;
                                                                vinfos[5].indices[0] = _ij5[0];
                                                                vinfos[5].indices[1] = _ij5[1];
                                                                vinfos[5].maxsolutions = _nj5;
                                                                vinfos[6].jointtype = 1;
                                                                vinfos[6].foffset = j6;
                                                                vinfos[6].indices[0] = _ij6[0];
                                                                vinfos[6].indices[1] = _ij6[1];
                                                                vinfos[6].maxsolutions = _nj6;
                                                                std::vector<int> vfree(0);
                                                                solutions.AddSolution(vinfos, vfree);
                                                              }
                                                            }
                                                          }
                                                        }
                                                      } while (0);
                                                      if (bgotonextstatement)
                                                      {
                                                        bool bgotonextstatement = true;
                                                        do
                                                        {
                                                          evalcond[0] = ((-3.14159265358979) +
                                                                         (IKfmod(((3.14159265358979) + (IKabs(j4))),
                                                                                 6.28318530717959)));
                                                          if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                          {
                                                            bgotonextstatement = false;
                                                            {
                                                              IkReal j6array[1], cj6array[1], sj6array[1];
                                                              bool j6valid[1] = { false };
                                                              _nj6 = 1;
                                                              if (IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH &&
                                                                  IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH &&
                                                                  IKabs(IKsqr(new_r10) + IKsqr(new_r11) - 1) <=
                                                                      IKFAST_SINCOS_THRESH)
                                                                continue;
                                                              j6array[0] = IKatan2(new_r10, new_r11);
                                                              sj6array[0] = IKsin(j6array[0]);
                                                              cj6array[0] = IKcos(j6array[0]);
                                                              if (j6array[0] > IKPI)
                                                              {
                                                                j6array[0] -= IK2PI;
                                                              }
                                                              else if (j6array[0] < -IKPI)
                                                              {
                                                                j6array[0] += IK2PI;
                                                              }
                                                              j6valid[0] = true;
                                                              for (int ij6 = 0; ij6 < 1; ++ij6)
                                                              {
                                                                if (!j6valid[ij6])
                                                                {
                                                                  continue;
                                                                }
                                                                _ij6[0] = ij6;
                                                                _ij6[1] = -1;
                                                                for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                                {
                                                                  if (j6valid[iij6] &&
                                                                      IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                          IKFAST_SOLUTION_THRESH &&
                                                                      IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                          IKFAST_SOLUTION_THRESH)
                                                                  {
                                                                    j6valid[iij6] = false;
                                                                    _ij6[1] = iij6;
                                                                    break;
                                                                  }
                                                                }
                                                                j6 = j6array[ij6];
                                                                cj6 = cj6array[ij6];
                                                                sj6 = sj6array[ij6];
                                                                {
                                                                  IkReal evalcond[4];
                                                                  IkReal x67 = IKsin(j6);
                                                                  IkReal x68 = IKcos(j6);
                                                                  evalcond[0] = x67;
                                                                  evalcond[1] = ((-1.0) * x68);
                                                                  evalcond[2] = (new_r10 + (((-1.0) * x67)));
                                                                  evalcond[3] = (new_r11 + (((-1.0) * x68)));
                                                                  if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                  {
                                                                    continue;
                                                                  }
                                                                }

                                                                {
                                                                  std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(
                                                                      7);
                                                                  vinfos[0].jointtype = 1;
                                                                  vinfos[0].foffset = j0;
                                                                  vinfos[0].indices[0] = _ij0[0];
                                                                  vinfos[0].indices[1] = _ij0[1];
                                                                  vinfos[0].maxsolutions = _nj0;
                                                                  vinfos[1].jointtype = 17;
                                                                  vinfos[1].foffset = j1;
                                                                  vinfos[1].indices[0] = _ij1[0];
                                                                  vinfos[1].indices[1] = _ij1[1];
                                                                  vinfos[1].maxsolutions = _nj1;
                                                                  vinfos[2].jointtype = 17;
                                                                  vinfos[2].foffset = j2;
                                                                  vinfos[2].indices[0] = _ij2[0];
                                                                  vinfos[2].indices[1] = _ij2[1];
                                                                  vinfos[2].maxsolutions = _nj2;
                                                                  vinfos[3].jointtype = 17;
                                                                  vinfos[3].foffset = j3;
                                                                  vinfos[3].indices[0] = _ij3[0];
                                                                  vinfos[3].indices[1] = _ij3[1];
                                                                  vinfos[3].maxsolutions = _nj3;
                                                                  vinfos[4].jointtype = 1;
                                                                  vinfos[4].foffset = j4;
                                                                  vinfos[4].indices[0] = _ij4[0];
                                                                  vinfos[4].indices[1] = _ij4[1];
                                                                  vinfos[4].maxsolutions = _nj4;
                                                                  vinfos[5].jointtype = 1;
                                                                  vinfos[5].foffset = j5;
                                                                  vinfos[5].indices[0] = _ij5[0];
                                                                  vinfos[5].indices[1] = _ij5[1];
                                                                  vinfos[5].maxsolutions = _nj5;
                                                                  vinfos[6].jointtype = 1;
                                                                  vinfos[6].foffset = j6;
                                                                  vinfos[6].indices[0] = _ij6[0];
                                                                  vinfos[6].indices[1] = _ij6[1];
                                                                  vinfos[6].maxsolutions = _nj6;
                                                                  std::vector<int> vfree(0);
                                                                  solutions.AddSolution(vinfos, vfree);
                                                                }
                                                              }
                                                            }
                                                          }
                                                        } while (0);
                                                        if (bgotonextstatement)
                                                        {
                                                          bool bgotonextstatement = true;
                                                          do
                                                          {
                                                            evalcond[0] =
                                                                ((-3.14159265358979) +
                                                                 (IKfmod(((3.14159265358979) +
                                                                          (IKabs(((-3.14159265358979) + j4)))),
                                                                         6.28318530717959)));
                                                            if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                            {
                                                              bgotonextstatement = false;
                                                              {
                                                                IkReal j6array[1], cj6array[1], sj6array[1];
                                                                bool j6valid[1] = { false };
                                                                _nj6 = 1;
                                                                if (IKabs(((-1.0) * new_r10)) < IKFAST_ATAN2_MAGTHRESH &&
                                                                    IKabs(((-1.0) * new_r11)) < IKFAST_ATAN2_MAGTHRESH &&
                                                                    IKabs(IKsqr(((-1.0) * new_r10)) +
                                                                          IKsqr(((-1.0) * new_r11)) - 1) <=
                                                                        IKFAST_SINCOS_THRESH)
                                                                  continue;
                                                                j6array[0] =
                                                                    IKatan2(((-1.0) * new_r10), ((-1.0) * new_r11));
                                                                sj6array[0] = IKsin(j6array[0]);
                                                                cj6array[0] = IKcos(j6array[0]);
                                                                if (j6array[0] > IKPI)
                                                                {
                                                                  j6array[0] -= IK2PI;
                                                                }
                                                                else if (j6array[0] < -IKPI)
                                                                {
                                                                  j6array[0] += IK2PI;
                                                                }
                                                                j6valid[0] = true;
                                                                for (int ij6 = 0; ij6 < 1; ++ij6)
                                                                {
                                                                  if (!j6valid[ij6])
                                                                  {
                                                                    continue;
                                                                  }
                                                                  _ij6[0] = ij6;
                                                                  _ij6[1] = -1;
                                                                  for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                                  {
                                                                    if (j6valid[iij6] &&
                                                                        IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                            IKFAST_SOLUTION_THRESH &&
                                                                        IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                            IKFAST_SOLUTION_THRESH)
                                                                    {
                                                                      j6valid[iij6] = false;
                                                                      _ij6[1] = iij6;
                                                                      break;
                                                                    }
                                                                  }
                                                                  j6 = j6array[ij6];
                                                                  cj6 = cj6array[ij6];
                                                                  sj6 = sj6array[ij6];
                                                                  {
                                                                    IkReal evalcond[4];
                                                                    IkReal x69 = IKsin(j6);
                                                                    IkReal x70 = IKcos(j6);
                                                                    evalcond[0] = x69;
                                                                    evalcond[1] = ((-1.0) * x70);
                                                                    evalcond[2] =
                                                                        ((((-1.0) * new_r10)) + (((-1.0) * x69)));
                                                                    evalcond[3] =
                                                                        ((((-1.0) * x70)) + (((-1.0) * new_r11)));
                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                    {
                                                                      continue;
                                                                    }
                                                                  }

                                                                  {
                                                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(
                                                                        7);
                                                                    vinfos[0].jointtype = 1;
                                                                    vinfos[0].foffset = j0;
                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                    vinfos[0].maxsolutions = _nj0;
                                                                    vinfos[1].jointtype = 17;
                                                                    vinfos[1].foffset = j1;
                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                    vinfos[1].maxsolutions = _nj1;
                                                                    vinfos[2].jointtype = 17;
                                                                    vinfos[2].foffset = j2;
                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                    vinfos[2].maxsolutions = _nj2;
                                                                    vinfos[3].jointtype = 17;
                                                                    vinfos[3].foffset = j3;
                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                    vinfos[3].maxsolutions = _nj3;
                                                                    vinfos[4].jointtype = 1;
                                                                    vinfos[4].foffset = j4;
                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                    vinfos[4].maxsolutions = _nj4;
                                                                    vinfos[5].jointtype = 1;
                                                                    vinfos[5].foffset = j5;
                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                    vinfos[5].maxsolutions = _nj5;
                                                                    vinfos[6].jointtype = 1;
                                                                    vinfos[6].foffset = j6;
                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                    vinfos[6].maxsolutions = _nj6;
                                                                    std::vector<int> vfree(0);
                                                                    solutions.AddSolution(vinfos, vfree);
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          } while (0);
                                                          if (bgotonextstatement)
                                                          {
                                                            bool bgotonextstatement = true;
                                                            do
                                                            {
                                                              CheckValue<IkReal> x71 = IKPowWithIntegerCheck(
                                                                  ((1.0) + (((-1.0) * (new_r22 * new_r22)))), -1);
                                                              if (!x71.valid)
                                                              {
                                                                continue;
                                                              }
                                                              if ((x71.value) < -0.00001)
                                                                continue;
                                                              IkReal gconst0 = ((-1.0) * (IKsqrt(x71.value)));
                                                              evalcond[0] =
                                                                  ((-3.14159265358979) +
                                                                   (IKfmod(((3.14159265358979) +
                                                                            (IKabs(((-1.0) + (IKsign(sj4))))) +
                                                                            (IKabs((cj4 + (((-1.0) * gconst0)))))),
                                                                           6.28318530717959)));
                                                              if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                              {
                                                                bgotonextstatement = false;
                                                                {
                                                                  IkReal j6eval[1];
                                                                  new_r21 = 0;
                                                                  new_r20 = 0;
                                                                  new_r02 = 0;
                                                                  new_r12 = 0;
                                                                  if ((((1.0) + (((-1.0) * (gconst0 * gconst0))))) <
                                                                      -0.00001)
                                                                    continue;
                                                                  sj4 = IKsqrt(
                                                                      ((1.0) + (((-1.0) * (gconst0 * gconst0)))));
                                                                  cj4 = gconst0;
                                                                  if ((gconst0) < -1 - IKFAST_SINCOS_THRESH ||
                                                                      (gconst0) > 1 + IKFAST_SINCOS_THRESH)
                                                                    continue;
                                                                  j4 = IKacos(gconst0);
                                                                  CheckValue<IkReal> x72 = IKPowWithIntegerCheck(
                                                                      ((1.0) + (((-1.0) * (new_r22 * new_r22)))), -1);
                                                                  if (!x72.valid)
                                                                  {
                                                                    continue;
                                                                  }
                                                                  if ((x72.value) < -0.00001)
                                                                    continue;
                                                                  IkReal gconst0 = ((-1.0) * (IKsqrt(x72.value)));
                                                                  j6eval[0] = ((IKabs(new_r11)) + (IKabs(new_r10)));
                                                                  if (IKabs(j6eval[0]) < 0.0000010000000000)
                                                                  {
                                                                    {
                                                                      IkReal j6array[1], cj6array[1], sj6array[1];
                                                                      bool j6valid[1] = { false };
                                                                      _nj6 = 1;
                                                                      if ((((1.0) + (((-1.0) * (gconst0 * gconst0))))) <
                                                                          -0.00001)
                                                                        continue;
                                                                      CheckValue<IkReal> x73 =
                                                                          IKPowWithIntegerCheck(gconst0, -1);
                                                                      if (!x73.valid)
                                                                      {
                                                                        continue;
                                                                      }
                                                                      if (IKabs(((((-1.0) * new_r00 *
                                                                                   (IKsqrt(((1.0) + (((-1.0) *
                                                                                                      (gconst0 *
                                                                                                       gconst0)))))))) +
                                                                                 ((gconst0 * new_r10)))) <
                                                                              IKFAST_ATAN2_MAGTHRESH &&
                                                                          IKabs((new_r11 * (x73.value))) <
                                                                              IKFAST_ATAN2_MAGTHRESH &&
                                                                          IKabs(IKsqr(((((-1.0) * new_r00 *
                                                                                         (IKsqrt(((1.0) +
                                                                                                  (((-1.0) *
                                                                                                    (gconst0 *
                                                                                                     gconst0)))))))) +
                                                                                       ((gconst0 * new_r10)))) +
                                                                                IKsqr((new_r11 * (x73.value))) - 1) <=
                                                                              IKFAST_SINCOS_THRESH)
                                                                        continue;
                                                                      j6array[0] = IKatan2(
                                                                          ((((-1.0) * new_r00 *
                                                                             (IKsqrt((
                                                                                 (1.0) +
                                                                                 (((-1.0) * (gconst0 * gconst0)))))))) +
                                                                           ((gconst0 * new_r10))),
                                                                          (new_r11 * (x73.value)));
                                                                      sj6array[0] = IKsin(j6array[0]);
                                                                      cj6array[0] = IKcos(j6array[0]);
                                                                      if (j6array[0] > IKPI)
                                                                      {
                                                                        j6array[0] -= IK2PI;
                                                                      }
                                                                      else if (j6array[0] < -IKPI)
                                                                      {
                                                                        j6array[0] += IK2PI;
                                                                      }
                                                                      j6valid[0] = true;
                                                                      for (int ij6 = 0; ij6 < 1; ++ij6)
                                                                      {
                                                                        if (!j6valid[ij6])
                                                                        {
                                                                          continue;
                                                                        }
                                                                        _ij6[0] = ij6;
                                                                        _ij6[1] = -1;
                                                                        for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                                        {
                                                                          if (j6valid[iij6] &&
                                                                              IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                                  IKFAST_SOLUTION_THRESH &&
                                                                              IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                                  IKFAST_SOLUTION_THRESH)
                                                                          {
                                                                            j6valid[iij6] = false;
                                                                            _ij6[1] = iij6;
                                                                            break;
                                                                          }
                                                                        }
                                                                        j6 = j6array[ij6];
                                                                        cj6 = cj6array[ij6];
                                                                        sj6 = sj6array[ij6];
                                                                        {
                                                                          IkReal evalcond[8];
                                                                          IkReal x74 = IKcos(j6);
                                                                          IkReal x75 = IKsin(j6);
                                                                          IkReal x76 = ((1.0) * x74);
                                                                          IkReal x77 = ((1.0) * x75);
                                                                          if ((((1.0) +
                                                                                (((-1.0) * (gconst0 * gconst0))))) <
                                                                              -0.00001)
                                                                            continue;
                                                                          IkReal x78 = IKsqrt((
                                                                              (1.0) + (((-1.0) * (gconst0 * gconst0)))));
                                                                          IkReal x79 = ((1.0) * x78);
                                                                          evalcond[0] = x75;
                                                                          evalcond[1] = ((-1.0) * x74);
                                                                          evalcond[2] =
                                                                              ((((-1.0) * gconst0 * x76)) + new_r11);
                                                                          evalcond[3] =
                                                                              ((((-1.0) * gconst0 * x77)) + new_r10);
                                                                          evalcond[4] = (new_r01 + ((x74 * x78)));
                                                                          evalcond[5] = (((x75 * x78)) + new_r00);
                                                                          evalcond[6] = ((((-1.0) * x77)) +
                                                                                         (((-1.0) * new_r00 * x79)) +
                                                                                         ((gconst0 * new_r10)));
                                                                          evalcond[7] = ((((-1.0) * x76)) +
                                                                                         (((-1.0) * new_r01 * x79)) +
                                                                                         ((gconst0 * new_r11)));
                                                                          if (IKabs(evalcond[0]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[1]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[2]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[3]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[4]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[5]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[6]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[7]) >
                                                                                  IKFAST_EVALCOND_THRESH)
                                                                          {
                                                                            continue;
                                                                          }
                                                                        }

                                                                        {
                                                                          std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                              vinfos(7);
                                                                          vinfos[0].jointtype = 1;
                                                                          vinfos[0].foffset = j0;
                                                                          vinfos[0].indices[0] = _ij0[0];
                                                                          vinfos[0].indices[1] = _ij0[1];
                                                                          vinfos[0].maxsolutions = _nj0;
                                                                          vinfos[1].jointtype = 17;
                                                                          vinfos[1].foffset = j1;
                                                                          vinfos[1].indices[0] = _ij1[0];
                                                                          vinfos[1].indices[1] = _ij1[1];
                                                                          vinfos[1].maxsolutions = _nj1;
                                                                          vinfos[2].jointtype = 17;
                                                                          vinfos[2].foffset = j2;
                                                                          vinfos[2].indices[0] = _ij2[0];
                                                                          vinfos[2].indices[1] = _ij2[1];
                                                                          vinfos[2].maxsolutions = _nj2;
                                                                          vinfos[3].jointtype = 17;
                                                                          vinfos[3].foffset = j3;
                                                                          vinfos[3].indices[0] = _ij3[0];
                                                                          vinfos[3].indices[1] = _ij3[1];
                                                                          vinfos[3].maxsolutions = _nj3;
                                                                          vinfos[4].jointtype = 1;
                                                                          vinfos[4].foffset = j4;
                                                                          vinfos[4].indices[0] = _ij4[0];
                                                                          vinfos[4].indices[1] = _ij4[1];
                                                                          vinfos[4].maxsolutions = _nj4;
                                                                          vinfos[5].jointtype = 1;
                                                                          vinfos[5].foffset = j5;
                                                                          vinfos[5].indices[0] = _ij5[0];
                                                                          vinfos[5].indices[1] = _ij5[1];
                                                                          vinfos[5].maxsolutions = _nj5;
                                                                          vinfos[6].jointtype = 1;
                                                                          vinfos[6].foffset = j6;
                                                                          vinfos[6].indices[0] = _ij6[0];
                                                                          vinfos[6].indices[1] = _ij6[1];
                                                                          vinfos[6].maxsolutions = _nj6;
                                                                          std::vector<int> vfree(0);
                                                                          solutions.AddSolution(vinfos, vfree);
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                  else
                                                                  {
                                                                    {
                                                                      IkReal j6array[1], cj6array[1], sj6array[1];
                                                                      bool j6valid[1] = { false };
                                                                      _nj6 = 1;
                                                                      CheckValue<IkReal> x80 =
                                                                          IKPowWithIntegerCheck(IKsign(gconst0), -1);
                                                                      if (!x80.valid)
                                                                      {
                                                                        continue;
                                                                      }
                                                                      CheckValue<IkReal> x81 =
                                                                          IKatan2WithCheck(IkReal(new_r10),
                                                                                           IkReal(new_r11),
                                                                                           IKFAST_ATAN2_MAGTHRESH);
                                                                      if (!x81.valid)
                                                                      {
                                                                        continue;
                                                                      }
                                                                      j6array[0] =
                                                                          ((-1.5707963267949) +
                                                                           (((1.5707963267949) * (x80.value))) +
                                                                           (x81.value));
                                                                      sj6array[0] = IKsin(j6array[0]);
                                                                      cj6array[0] = IKcos(j6array[0]);
                                                                      if (j6array[0] > IKPI)
                                                                      {
                                                                        j6array[0] -= IK2PI;
                                                                      }
                                                                      else if (j6array[0] < -IKPI)
                                                                      {
                                                                        j6array[0] += IK2PI;
                                                                      }
                                                                      j6valid[0] = true;
                                                                      for (int ij6 = 0; ij6 < 1; ++ij6)
                                                                      {
                                                                        if (!j6valid[ij6])
                                                                        {
                                                                          continue;
                                                                        }
                                                                        _ij6[0] = ij6;
                                                                        _ij6[1] = -1;
                                                                        for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                                        {
                                                                          if (j6valid[iij6] &&
                                                                              IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                                  IKFAST_SOLUTION_THRESH &&
                                                                              IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                                  IKFAST_SOLUTION_THRESH)
                                                                          {
                                                                            j6valid[iij6] = false;
                                                                            _ij6[1] = iij6;
                                                                            break;
                                                                          }
                                                                        }
                                                                        j6 = j6array[ij6];
                                                                        cj6 = cj6array[ij6];
                                                                        sj6 = sj6array[ij6];
                                                                        {
                                                                          IkReal evalcond[8];
                                                                          IkReal x82 = IKcos(j6);
                                                                          IkReal x83 = IKsin(j6);
                                                                          IkReal x84 = ((1.0) * x82);
                                                                          IkReal x85 = ((1.0) * x83);
                                                                          if ((((1.0) +
                                                                                (((-1.0) * (gconst0 * gconst0))))) <
                                                                              -0.00001)
                                                                            continue;
                                                                          IkReal x86 = IKsqrt((
                                                                              (1.0) + (((-1.0) * (gconst0 * gconst0)))));
                                                                          IkReal x87 = ((1.0) * x86);
                                                                          evalcond[0] = x83;
                                                                          evalcond[1] = ((-1.0) * x82);
                                                                          evalcond[2] =
                                                                              (new_r11 + (((-1.0) * gconst0 * x84)));
                                                                          evalcond[3] =
                                                                              (new_r10 + (((-1.0) * gconst0 * x85)));
                                                                          evalcond[4] = (((x82 * x86)) + new_r01);
                                                                          evalcond[5] = (((x83 * x86)) + new_r00);
                                                                          evalcond[6] = ((((-1.0) * new_r00 * x87)) +
                                                                                         ((gconst0 * new_r10)) +
                                                                                         (((-1.0) * x85)));
                                                                          evalcond[7] = ((((-1.0) * new_r01 * x87)) +
                                                                                         ((gconst0 * new_r11)) +
                                                                                         (((-1.0) * x84)));
                                                                          if (IKabs(evalcond[0]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[1]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[2]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[3]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[4]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[5]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[6]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[7]) >
                                                                                  IKFAST_EVALCOND_THRESH)
                                                                          {
                                                                            continue;
                                                                          }
                                                                        }

                                                                        {
                                                                          std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                              vinfos(7);
                                                                          vinfos[0].jointtype = 1;
                                                                          vinfos[0].foffset = j0;
                                                                          vinfos[0].indices[0] = _ij0[0];
                                                                          vinfos[0].indices[1] = _ij0[1];
                                                                          vinfos[0].maxsolutions = _nj0;
                                                                          vinfos[1].jointtype = 17;
                                                                          vinfos[1].foffset = j1;
                                                                          vinfos[1].indices[0] = _ij1[0];
                                                                          vinfos[1].indices[1] = _ij1[1];
                                                                          vinfos[1].maxsolutions = _nj1;
                                                                          vinfos[2].jointtype = 17;
                                                                          vinfos[2].foffset = j2;
                                                                          vinfos[2].indices[0] = _ij2[0];
                                                                          vinfos[2].indices[1] = _ij2[1];
                                                                          vinfos[2].maxsolutions = _nj2;
                                                                          vinfos[3].jointtype = 17;
                                                                          vinfos[3].foffset = j3;
                                                                          vinfos[3].indices[0] = _ij3[0];
                                                                          vinfos[3].indices[1] = _ij3[1];
                                                                          vinfos[3].maxsolutions = _nj3;
                                                                          vinfos[4].jointtype = 1;
                                                                          vinfos[4].foffset = j4;
                                                                          vinfos[4].indices[0] = _ij4[0];
                                                                          vinfos[4].indices[1] = _ij4[1];
                                                                          vinfos[4].maxsolutions = _nj4;
                                                                          vinfos[5].jointtype = 1;
                                                                          vinfos[5].foffset = j5;
                                                                          vinfos[5].indices[0] = _ij5[0];
                                                                          vinfos[5].indices[1] = _ij5[1];
                                                                          vinfos[5].maxsolutions = _nj5;
                                                                          vinfos[6].jointtype = 1;
                                                                          vinfos[6].foffset = j6;
                                                                          vinfos[6].indices[0] = _ij6[0];
                                                                          vinfos[6].indices[1] = _ij6[1];
                                                                          vinfos[6].maxsolutions = _nj6;
                                                                          std::vector<int> vfree(0);
                                                                          solutions.AddSolution(vinfos, vfree);
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            } while (0);
                                                            if (bgotonextstatement)
                                                            {
                                                              bool bgotonextstatement = true;
                                                              do
                                                              {
                                                                CheckValue<IkReal> x88 = IKPowWithIntegerCheck(
                                                                    ((1.0) + (((-1.0) * (new_r22 * new_r22)))), -1);
                                                                if (!x88.valid)
                                                                {
                                                                  continue;
                                                                }
                                                                if ((x88.value) < -0.00001)
                                                                  continue;
                                                                IkReal gconst0 = ((-1.0) * (IKsqrt(x88.value)));
                                                                evalcond[0] =
                                                                    ((-3.14159265358979) +
                                                                     (IKfmod(((3.14159265358979) +
                                                                              (IKabs((cj4 + (((-1.0) * gconst0))))) +
                                                                              (IKabs(((1.0) + (IKsign(sj4)))))),
                                                                             6.28318530717959)));
                                                                if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                {
                                                                  bgotonextstatement = false;
                                                                  {
                                                                    IkReal j6eval[1];
                                                                    new_r21 = 0;
                                                                    new_r20 = 0;
                                                                    new_r02 = 0;
                                                                    new_r12 = 0;
                                                                    if ((((1.0) + (((-1.0) * (gconst0 * gconst0))))) <
                                                                        -0.00001)
                                                                      continue;
                                                                    sj4 =
                                                                        ((-1.0) *
                                                                         (IKsqrt(((1.0) +
                                                                                  (((-1.0) * (gconst0 * gconst0)))))));
                                                                    cj4 = gconst0;
                                                                    if ((gconst0) < -1 - IKFAST_SINCOS_THRESH ||
                                                                        (gconst0) > 1 + IKFAST_SINCOS_THRESH)
                                                                      continue;
                                                                    j4 = ((-1.0) * (IKacos(gconst0)));
                                                                    CheckValue<IkReal> x89 = IKPowWithIntegerCheck(
                                                                        ((1.0) + (((-1.0) * (new_r22 * new_r22)))), -1);
                                                                    if (!x89.valid)
                                                                    {
                                                                      continue;
                                                                    }
                                                                    if ((x89.value) < -0.00001)
                                                                      continue;
                                                                    IkReal gconst0 = ((-1.0) * (IKsqrt(x89.value)));
                                                                    j6eval[0] = ((IKabs(new_r11)) + (IKabs(new_r10)));
                                                                    if (IKabs(j6eval[0]) < 0.0000010000000000)
                                                                    {
                                                                      {
                                                                        IkReal j6array[1], cj6array[1], sj6array[1];
                                                                        bool j6valid[1] = { false };
                                                                        _nj6 = 1;
                                                                        if ((((1.0) + (((-1.0) * (gconst0 * gconst0))))) <
                                                                            -0.00001)
                                                                          continue;
                                                                        CheckValue<IkReal> x90 =
                                                                            IKPowWithIntegerCheck(gconst0, -1);
                                                                        if (!x90.valid)
                                                                        {
                                                                          continue;
                                                                        }
                                                                        if (IKabs((
                                                                                ((new_r00 *
                                                                                  (IKsqrt(((1.0) +
                                                                                           (((-1.0) * (gconst0 *
                                                                                                       gconst0)))))))) +
                                                                                ((gconst0 * new_r10)))) <
                                                                                IKFAST_ATAN2_MAGTHRESH &&
                                                                            IKabs((new_r11 * (x90.value))) <
                                                                                IKFAST_ATAN2_MAGTHRESH &&
                                                                            IKabs(IKsqr((((new_r00 *
                                                                                           (IKsqrt(((1.0) +
                                                                                                    (((-1.0) *
                                                                                                      (gconst0 *
                                                                                                       gconst0)))))))) +
                                                                                         ((gconst0 * new_r10)))) +
                                                                                  IKsqr((new_r11 * (x90.value))) - 1) <=
                                                                                IKFAST_SINCOS_THRESH)
                                                                          continue;
                                                                        j6array[0] = IKatan2(
                                                                            (((new_r00 *
                                                                               (IKsqrt(((1.0) +
                                                                                        (((-1.0) *
                                                                                          (gconst0 * gconst0)))))))) +
                                                                             ((gconst0 * new_r10))),
                                                                            (new_r11 * (x90.value)));
                                                                        sj6array[0] = IKsin(j6array[0]);
                                                                        cj6array[0] = IKcos(j6array[0]);
                                                                        if (j6array[0] > IKPI)
                                                                        {
                                                                          j6array[0] -= IK2PI;
                                                                        }
                                                                        else if (j6array[0] < -IKPI)
                                                                        {
                                                                          j6array[0] += IK2PI;
                                                                        }
                                                                        j6valid[0] = true;
                                                                        for (int ij6 = 0; ij6 < 1; ++ij6)
                                                                        {
                                                                          if (!j6valid[ij6])
                                                                          {
                                                                            continue;
                                                                          }
                                                                          _ij6[0] = ij6;
                                                                          _ij6[1] = -1;
                                                                          for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                                          {
                                                                            if (j6valid[iij6] &&
                                                                                IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                                    IKFAST_SOLUTION_THRESH &&
                                                                                IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                                    IKFAST_SOLUTION_THRESH)
                                                                            {
                                                                              j6valid[iij6] = false;
                                                                              _ij6[1] = iij6;
                                                                              break;
                                                                            }
                                                                          }
                                                                          j6 = j6array[ij6];
                                                                          cj6 = cj6array[ij6];
                                                                          sj6 = sj6array[ij6];
                                                                          {
                                                                            IkReal evalcond[8];
                                                                            IkReal x91 = IKcos(j6);
                                                                            IkReal x92 = IKsin(j6);
                                                                            IkReal x93 = ((1.0) * x91);
                                                                            IkReal x94 = ((1.0) * x92);
                                                                            if ((((1.0) +
                                                                                  (((-1.0) * (gconst0 * gconst0))))) <
                                                                                -0.00001)
                                                                              continue;
                                                                            IkReal x95 = IKsqrt(
                                                                                ((1.0) +
                                                                                 (((-1.0) * (gconst0 * gconst0)))));
                                                                            evalcond[0] = x92;
                                                                            evalcond[1] = ((-1.0) * x91);
                                                                            evalcond[2] =
                                                                                (new_r11 + (((-1.0) * gconst0 * x93)));
                                                                            evalcond[3] =
                                                                                (new_r10 + (((-1.0) * gconst0 * x94)));
                                                                            evalcond[4] =
                                                                                (new_r01 + (((-1.0) * x93 * x95)));
                                                                            evalcond[5] =
                                                                                ((((-1.0) * x94 * x95)) + new_r00);
                                                                            evalcond[6] = (((new_r00 * x95)) +
                                                                                           ((gconst0 * new_r10)) +
                                                                                           (((-1.0) * x94)));
                                                                            evalcond[7] = (((new_r01 * x95)) +
                                                                                           ((gconst0 * new_r11)) +
                                                                                           (((-1.0) * x93)));
                                                                            if (IKabs(evalcond[0]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[1]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[2]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[3]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[4]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[5]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[6]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[7]) >
                                                                                    IKFAST_EVALCOND_THRESH)
                                                                            {
                                                                              continue;
                                                                            }
                                                                          }

                                                                          {
                                                                            std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                                vinfos(7);
                                                                            vinfos[0].jointtype = 1;
                                                                            vinfos[0].foffset = j0;
                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                            vinfos[0].maxsolutions = _nj0;
                                                                            vinfos[1].jointtype = 17;
                                                                            vinfos[1].foffset = j1;
                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                            vinfos[1].maxsolutions = _nj1;
                                                                            vinfos[2].jointtype = 17;
                                                                            vinfos[2].foffset = j2;
                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                            vinfos[2].maxsolutions = _nj2;
                                                                            vinfos[3].jointtype = 17;
                                                                            vinfos[3].foffset = j3;
                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                            vinfos[3].maxsolutions = _nj3;
                                                                            vinfos[4].jointtype = 1;
                                                                            vinfos[4].foffset = j4;
                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                            vinfos[4].maxsolutions = _nj4;
                                                                            vinfos[5].jointtype = 1;
                                                                            vinfos[5].foffset = j5;
                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                            vinfos[5].maxsolutions = _nj5;
                                                                            vinfos[6].jointtype = 1;
                                                                            vinfos[6].foffset = j6;
                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                            vinfos[6].maxsolutions = _nj6;
                                                                            std::vector<int> vfree(0);
                                                                            solutions.AddSolution(vinfos, vfree);
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      {
                                                                        IkReal j6array[1], cj6array[1], sj6array[1];
                                                                        bool j6valid[1] = { false };
                                                                        _nj6 = 1;
                                                                        CheckValue<IkReal> x96 =
                                                                            IKPowWithIntegerCheck(IKsign(gconst0), -1);
                                                                        if (!x96.valid)
                                                                        {
                                                                          continue;
                                                                        }
                                                                        CheckValue<IkReal> x97 =
                                                                            IKatan2WithCheck(IkReal(new_r10),
                                                                                             IkReal(new_r11),
                                                                                             IKFAST_ATAN2_MAGTHRESH);
                                                                        if (!x97.valid)
                                                                        {
                                                                          continue;
                                                                        }
                                                                        j6array[0] =
                                                                            ((-1.5707963267949) +
                                                                             (((1.5707963267949) * (x96.value))) +
                                                                             (x97.value));
                                                                        sj6array[0] = IKsin(j6array[0]);
                                                                        cj6array[0] = IKcos(j6array[0]);
                                                                        if (j6array[0] > IKPI)
                                                                        {
                                                                          j6array[0] -= IK2PI;
                                                                        }
                                                                        else if (j6array[0] < -IKPI)
                                                                        {
                                                                          j6array[0] += IK2PI;
                                                                        }
                                                                        j6valid[0] = true;
                                                                        for (int ij6 = 0; ij6 < 1; ++ij6)
                                                                        {
                                                                          if (!j6valid[ij6])
                                                                          {
                                                                            continue;
                                                                          }
                                                                          _ij6[0] = ij6;
                                                                          _ij6[1] = -1;
                                                                          for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                                          {
                                                                            if (j6valid[iij6] &&
                                                                                IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                                    IKFAST_SOLUTION_THRESH &&
                                                                                IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                                    IKFAST_SOLUTION_THRESH)
                                                                            {
                                                                              j6valid[iij6] = false;
                                                                              _ij6[1] = iij6;
                                                                              break;
                                                                            }
                                                                          }
                                                                          j6 = j6array[ij6];
                                                                          cj6 = cj6array[ij6];
                                                                          sj6 = sj6array[ij6];
                                                                          {
                                                                            IkReal evalcond[8];
                                                                            IkReal x98 = IKcos(j6);
                                                                            IkReal x99 = IKsin(j6);
                                                                            IkReal x100 = ((1.0) * x98);
                                                                            IkReal x101 = ((1.0) * x99);
                                                                            if ((((1.0) +
                                                                                  (((-1.0) * (gconst0 * gconst0))))) <
                                                                                -0.00001)
                                                                              continue;
                                                                            IkReal x102 = IKsqrt(
                                                                                ((1.0) +
                                                                                 (((-1.0) * (gconst0 * gconst0)))));
                                                                            evalcond[0] = x99;
                                                                            evalcond[1] = ((-1.0) * x98);
                                                                            evalcond[2] =
                                                                                (new_r11 + (((-1.0) * gconst0 * x100)));
                                                                            evalcond[3] =
                                                                                (new_r10 + (((-1.0) * gconst0 * x101)));
                                                                            evalcond[4] =
                                                                                ((((-1.0) * x100 * x102)) + new_r01);
                                                                            evalcond[5] =
                                                                                ((((-1.0) * x101 * x102)) + new_r00);
                                                                            evalcond[6] = ((((-1.0) * x101)) +
                                                                                           ((new_r00 * x102)) +
                                                                                           ((gconst0 * new_r10)));
                                                                            evalcond[7] = ((((-1.0) * x100)) +
                                                                                           ((new_r01 * x102)) +
                                                                                           ((gconst0 * new_r11)));
                                                                            if (IKabs(evalcond[0]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[1]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[2]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[3]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[4]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[5]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[6]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[7]) >
                                                                                    IKFAST_EVALCOND_THRESH)
                                                                            {
                                                                              continue;
                                                                            }
                                                                          }

                                                                          {
                                                                            std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                                vinfos(7);
                                                                            vinfos[0].jointtype = 1;
                                                                            vinfos[0].foffset = j0;
                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                            vinfos[0].maxsolutions = _nj0;
                                                                            vinfos[1].jointtype = 17;
                                                                            vinfos[1].foffset = j1;
                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                            vinfos[1].maxsolutions = _nj1;
                                                                            vinfos[2].jointtype = 17;
                                                                            vinfos[2].foffset = j2;
                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                            vinfos[2].maxsolutions = _nj2;
                                                                            vinfos[3].jointtype = 17;
                                                                            vinfos[3].foffset = j3;
                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                            vinfos[3].maxsolutions = _nj3;
                                                                            vinfos[4].jointtype = 1;
                                                                            vinfos[4].foffset = j4;
                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                            vinfos[4].maxsolutions = _nj4;
                                                                            vinfos[5].jointtype = 1;
                                                                            vinfos[5].foffset = j5;
                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                            vinfos[5].maxsolutions = _nj5;
                                                                            vinfos[6].jointtype = 1;
                                                                            vinfos[6].foffset = j6;
                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                            vinfos[6].maxsolutions = _nj6;
                                                                            std::vector<int> vfree(0);
                                                                            solutions.AddSolution(vinfos, vfree);
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              } while (0);
                                                              if (bgotonextstatement)
                                                              {
                                                                bool bgotonextstatement = true;
                                                                do
                                                                {
                                                                  CheckValue<IkReal> x103 = IKPowWithIntegerCheck(
                                                                      ((1.0) + (((-1.0) * (new_r22 * new_r22)))), -1);
                                                                  if (!x103.valid)
                                                                  {
                                                                    continue;
                                                                  }
                                                                  if ((x103.value) < -0.00001)
                                                                    continue;
                                                                  IkReal gconst1 = IKsqrt(x103.value);
                                                                  evalcond[0] =
                                                                      ((-3.14159265358979) +
                                                                       (IKfmod(((3.14159265358979) +
                                                                                (IKabs(((-1.0) + (IKsign(sj4))))) +
                                                                                (IKabs((cj4 + (((-1.0) * gconst1)))))),
                                                                               6.28318530717959)));
                                                                  if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                  {
                                                                    bgotonextstatement = false;
                                                                    {
                                                                      IkReal j6eval[1];
                                                                      new_r21 = 0;
                                                                      new_r20 = 0;
                                                                      new_r02 = 0;
                                                                      new_r12 = 0;
                                                                      if ((((1.0) + (((-1.0) * (gconst1 * gconst1))))) <
                                                                          -0.00001)
                                                                        continue;
                                                                      sj4 = IKsqrt(
                                                                          ((1.0) + (((-1.0) * (gconst1 * gconst1)))));
                                                                      cj4 = gconst1;
                                                                      if ((gconst1) < -1 - IKFAST_SINCOS_THRESH ||
                                                                          (gconst1) > 1 + IKFAST_SINCOS_THRESH)
                                                                        continue;
                                                                      j4 = IKacos(gconst1);
                                                                      CheckValue<IkReal> x104 = IKPowWithIntegerCheck(
                                                                          ((1.0) + (((-1.0) * (new_r22 * new_r22)))),
                                                                          -1);
                                                                      if (!x104.valid)
                                                                      {
                                                                        continue;
                                                                      }
                                                                      if ((x104.value) < -0.00001)
                                                                        continue;
                                                                      IkReal gconst1 = IKsqrt(x104.value);
                                                                      j6eval[0] = ((IKabs(new_r11)) + (IKabs(new_r10)));
                                                                      if (IKabs(j6eval[0]) < 0.0000010000000000)
                                                                      {
                                                                        {
                                                                          IkReal j6array[1], cj6array[1], sj6array[1];
                                                                          bool j6valid[1] = { false };
                                                                          _nj6 = 1;
                                                                          if ((((1.0) +
                                                                                (((-1.0) * (gconst1 * gconst1))))) <
                                                                              -0.00001)
                                                                            continue;
                                                                          CheckValue<IkReal> x105 =
                                                                              IKPowWithIntegerCheck(gconst1, -1);
                                                                          if (!x105.valid)
                                                                          {
                                                                            continue;
                                                                          }
                                                                          if (IKabs((((gconst1 * new_r10)) +
                                                                                     (((-1.0) * new_r00 *
                                                                                       (IKsqrt(((1.0) +
                                                                                                (((-1.0) *
                                                                                                  (gconst1 *
                                                                                                   gconst1)))))))))) <
                                                                                  IKFAST_ATAN2_MAGTHRESH &&
                                                                              IKabs((new_r11 * (x105.value))) <
                                                                                  IKFAST_ATAN2_MAGTHRESH &&
                                                                              IKabs(IKsqr((
                                                                                        ((gconst1 * new_r10)) +
                                                                                        (((-1.0) * new_r00 *
                                                                                          (IKsqrt(((1.0) +
                                                                                                   (((-1.0) *
                                                                                                     (gconst1 *
                                                                                                      gconst1)))))))))) +
                                                                                    IKsqr((new_r11 * (x105.value))) -
                                                                                    1) <= IKFAST_SINCOS_THRESH)
                                                                            continue;
                                                                          j6array[0] = IKatan2(
                                                                              (((gconst1 * new_r10)) +
                                                                               (((-1.0) * new_r00 *
                                                                                 (IKsqrt(((1.0) +
                                                                                          (((-1.0) *
                                                                                            (gconst1 * gconst1))))))))),
                                                                              (new_r11 * (x105.value)));
                                                                          sj6array[0] = IKsin(j6array[0]);
                                                                          cj6array[0] = IKcos(j6array[0]);
                                                                          if (j6array[0] > IKPI)
                                                                          {
                                                                            j6array[0] -= IK2PI;
                                                                          }
                                                                          else if (j6array[0] < -IKPI)
                                                                          {
                                                                            j6array[0] += IK2PI;
                                                                          }
                                                                          j6valid[0] = true;
                                                                          for (int ij6 = 0; ij6 < 1; ++ij6)
                                                                          {
                                                                            if (!j6valid[ij6])
                                                                            {
                                                                              continue;
                                                                            }
                                                                            _ij6[0] = ij6;
                                                                            _ij6[1] = -1;
                                                                            for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                                            {
                                                                              if (j6valid[iij6] &&
                                                                                  IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                                      IKFAST_SOLUTION_THRESH &&
                                                                                  IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                                      IKFAST_SOLUTION_THRESH)
                                                                              {
                                                                                j6valid[iij6] = false;
                                                                                _ij6[1] = iij6;
                                                                                break;
                                                                              }
                                                                            }
                                                                            j6 = j6array[ij6];
                                                                            cj6 = cj6array[ij6];
                                                                            sj6 = sj6array[ij6];
                                                                            {
                                                                              IkReal evalcond[8];
                                                                              IkReal x106 = IKcos(j6);
                                                                              IkReal x107 = IKsin(j6);
                                                                              IkReal x108 = ((1.0) * gconst1);
                                                                              if ((((1.0) + (((-1.0) * gconst1 *
                                                                                              x108)))) < -0.00001)
                                                                                continue;
                                                                              IkReal x109 = IKsqrt((
                                                                                  (1.0) + (((-1.0) * gconst1 * x108))));
                                                                              IkReal x110 = ((1.0) * x109);
                                                                              evalcond[0] = x107;
                                                                              evalcond[1] = ((-1.0) * x106);
                                                                              evalcond[2] =
                                                                                  ((((-1.0) * x106 * x108)) + new_r11);
                                                                              evalcond[3] =
                                                                                  ((((-1.0) * x107 * x108)) + new_r10);
                                                                              evalcond[4] = (((x106 * x109)) + new_r01);
                                                                              evalcond[5] = (((x107 * x109)) + new_r00);
                                                                              evalcond[6] =
                                                                                  ((((-1.0) * new_r00 * x110)) +
                                                                                   ((gconst1 * new_r10)) +
                                                                                   (((-1.0) * x107)));
                                                                              evalcond[7] =
                                                                                  ((((-1.0) * new_r01 * x110)) +
                                                                                   ((gconst1 * new_r11)) +
                                                                                   (((-1.0) * x106)));
                                                                              if (IKabs(evalcond[0]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[1]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[2]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[3]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[4]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[5]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[6]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[7]) >
                                                                                      IKFAST_EVALCOND_THRESH)
                                                                              {
                                                                                continue;
                                                                              }
                                                                            }

                                                                            {
                                                                              std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                                  vinfos(7);
                                                                              vinfos[0].jointtype = 1;
                                                                              vinfos[0].foffset = j0;
                                                                              vinfos[0].indices[0] = _ij0[0];
                                                                              vinfos[0].indices[1] = _ij0[1];
                                                                              vinfos[0].maxsolutions = _nj0;
                                                                              vinfos[1].jointtype = 17;
                                                                              vinfos[1].foffset = j1;
                                                                              vinfos[1].indices[0] = _ij1[0];
                                                                              vinfos[1].indices[1] = _ij1[1];
                                                                              vinfos[1].maxsolutions = _nj1;
                                                                              vinfos[2].jointtype = 17;
                                                                              vinfos[2].foffset = j2;
                                                                              vinfos[2].indices[0] = _ij2[0];
                                                                              vinfos[2].indices[1] = _ij2[1];
                                                                              vinfos[2].maxsolutions = _nj2;
                                                                              vinfos[3].jointtype = 17;
                                                                              vinfos[3].foffset = j3;
                                                                              vinfos[3].indices[0] = _ij3[0];
                                                                              vinfos[3].indices[1] = _ij3[1];
                                                                              vinfos[3].maxsolutions = _nj3;
                                                                              vinfos[4].jointtype = 1;
                                                                              vinfos[4].foffset = j4;
                                                                              vinfos[4].indices[0] = _ij4[0];
                                                                              vinfos[4].indices[1] = _ij4[1];
                                                                              vinfos[4].maxsolutions = _nj4;
                                                                              vinfos[5].jointtype = 1;
                                                                              vinfos[5].foffset = j5;
                                                                              vinfos[5].indices[0] = _ij5[0];
                                                                              vinfos[5].indices[1] = _ij5[1];
                                                                              vinfos[5].maxsolutions = _nj5;
                                                                              vinfos[6].jointtype = 1;
                                                                              vinfos[6].foffset = j6;
                                                                              vinfos[6].indices[0] = _ij6[0];
                                                                              vinfos[6].indices[1] = _ij6[1];
                                                                              vinfos[6].maxsolutions = _nj6;
                                                                              std::vector<int> vfree(0);
                                                                              solutions.AddSolution(vinfos, vfree);
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                      else
                                                                      {
                                                                        {
                                                                          IkReal j6array[1], cj6array[1], sj6array[1];
                                                                          bool j6valid[1] = { false };
                                                                          _nj6 = 1;
                                                                          CheckValue<IkReal> x111 =
                                                                              IKPowWithIntegerCheck(IKsign(gconst1), -1);
                                                                          if (!x111.valid)
                                                                          {
                                                                            continue;
                                                                          }
                                                                          CheckValue<IkReal> x112 =
                                                                              IKatan2WithCheck(IkReal(new_r10),
                                                                                               IkReal(new_r11),
                                                                                               IKFAST_ATAN2_MAGTHRESH);
                                                                          if (!x112.valid)
                                                                          {
                                                                            continue;
                                                                          }
                                                                          j6array[0] =
                                                                              ((-1.5707963267949) +
                                                                               (((1.5707963267949) * (x111.value))) +
                                                                               (x112.value));
                                                                          sj6array[0] = IKsin(j6array[0]);
                                                                          cj6array[0] = IKcos(j6array[0]);
                                                                          if (j6array[0] > IKPI)
                                                                          {
                                                                            j6array[0] -= IK2PI;
                                                                          }
                                                                          else if (j6array[0] < -IKPI)
                                                                          {
                                                                            j6array[0] += IK2PI;
                                                                          }
                                                                          j6valid[0] = true;
                                                                          for (int ij6 = 0; ij6 < 1; ++ij6)
                                                                          {
                                                                            if (!j6valid[ij6])
                                                                            {
                                                                              continue;
                                                                            }
                                                                            _ij6[0] = ij6;
                                                                            _ij6[1] = -1;
                                                                            for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                                            {
                                                                              if (j6valid[iij6] &&
                                                                                  IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                                      IKFAST_SOLUTION_THRESH &&
                                                                                  IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                                      IKFAST_SOLUTION_THRESH)
                                                                              {
                                                                                j6valid[iij6] = false;
                                                                                _ij6[1] = iij6;
                                                                                break;
                                                                              }
                                                                            }
                                                                            j6 = j6array[ij6];
                                                                            cj6 = cj6array[ij6];
                                                                            sj6 = sj6array[ij6];
                                                                            {
                                                                              IkReal evalcond[8];
                                                                              IkReal x113 = IKcos(j6);
                                                                              IkReal x114 = IKsin(j6);
                                                                              IkReal x115 = ((1.0) * gconst1);
                                                                              if ((((1.0) + (((-1.0) * gconst1 *
                                                                                              x115)))) < -0.00001)
                                                                                continue;
                                                                              IkReal x116 = IKsqrt((
                                                                                  (1.0) + (((-1.0) * gconst1 * x115))));
                                                                              IkReal x117 = ((1.0) * x116);
                                                                              evalcond[0] = x114;
                                                                              evalcond[1] = ((-1.0) * x113);
                                                                              evalcond[2] =
                                                                                  ((((-1.0) * x113 * x115)) + new_r11);
                                                                              evalcond[3] =
                                                                                  ((((-1.0) * x114 * x115)) + new_r10);
                                                                              evalcond[4] = (((x113 * x116)) + new_r01);
                                                                              evalcond[5] = (((x114 * x116)) + new_r00);
                                                                              evalcond[6] =
                                                                                  ((((-1.0) * new_r00 * x117)) +
                                                                                   ((gconst1 * new_r10)) +
                                                                                   (((-1.0) * x114)));
                                                                              evalcond[7] =
                                                                                  ((((-1.0) * new_r01 * x117)) +
                                                                                   ((gconst1 * new_r11)) +
                                                                                   (((-1.0) * x113)));
                                                                              if (IKabs(evalcond[0]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[1]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[2]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[3]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[4]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[5]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[6]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[7]) >
                                                                                      IKFAST_EVALCOND_THRESH)
                                                                              {
                                                                                continue;
                                                                              }
                                                                            }

                                                                            {
                                                                              std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                                  vinfos(7);
                                                                              vinfos[0].jointtype = 1;
                                                                              vinfos[0].foffset = j0;
                                                                              vinfos[0].indices[0] = _ij0[0];
                                                                              vinfos[0].indices[1] = _ij0[1];
                                                                              vinfos[0].maxsolutions = _nj0;
                                                                              vinfos[1].jointtype = 17;
                                                                              vinfos[1].foffset = j1;
                                                                              vinfos[1].indices[0] = _ij1[0];
                                                                              vinfos[1].indices[1] = _ij1[1];
                                                                              vinfos[1].maxsolutions = _nj1;
                                                                              vinfos[2].jointtype = 17;
                                                                              vinfos[2].foffset = j2;
                                                                              vinfos[2].indices[0] = _ij2[0];
                                                                              vinfos[2].indices[1] = _ij2[1];
                                                                              vinfos[2].maxsolutions = _nj2;
                                                                              vinfos[3].jointtype = 17;
                                                                              vinfos[3].foffset = j3;
                                                                              vinfos[3].indices[0] = _ij3[0];
                                                                              vinfos[3].indices[1] = _ij3[1];
                                                                              vinfos[3].maxsolutions = _nj3;
                                                                              vinfos[4].jointtype = 1;
                                                                              vinfos[4].foffset = j4;
                                                                              vinfos[4].indices[0] = _ij4[0];
                                                                              vinfos[4].indices[1] = _ij4[1];
                                                                              vinfos[4].maxsolutions = _nj4;
                                                                              vinfos[5].jointtype = 1;
                                                                              vinfos[5].foffset = j5;
                                                                              vinfos[5].indices[0] = _ij5[0];
                                                                              vinfos[5].indices[1] = _ij5[1];
                                                                              vinfos[5].maxsolutions = _nj5;
                                                                              vinfos[6].jointtype = 1;
                                                                              vinfos[6].foffset = j6;
                                                                              vinfos[6].indices[0] = _ij6[0];
                                                                              vinfos[6].indices[1] = _ij6[1];
                                                                              vinfos[6].maxsolutions = _nj6;
                                                                              std::vector<int> vfree(0);
                                                                              solutions.AddSolution(vinfos, vfree);
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                } while (0);
                                                                if (bgotonextstatement)
                                                                {
                                                                  bool bgotonextstatement = true;
                                                                  do
                                                                  {
                                                                    CheckValue<IkReal> x118 = IKPowWithIntegerCheck(
                                                                        ((1.0) + (((-1.0) * (new_r22 * new_r22)))), -1);
                                                                    if (!x118.valid)
                                                                    {
                                                                      continue;
                                                                    }
                                                                    if ((x118.value) < -0.00001)
                                                                      continue;
                                                                    IkReal gconst1 = IKsqrt(x118.value);
                                                                    evalcond[0] =
                                                                        ((-3.14159265358979) +
                                                                         (IKfmod(((3.14159265358979) +
                                                                                  (IKabs((cj4 + (((-1.0) * gconst1))))) +
                                                                                  (IKabs(((1.0) + (IKsign(sj4)))))),
                                                                                 6.28318530717959)));
                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                    {
                                                                      bgotonextstatement = false;
                                                                      {
                                                                        IkReal j6eval[1];
                                                                        new_r21 = 0;
                                                                        new_r20 = 0;
                                                                        new_r02 = 0;
                                                                        new_r12 = 0;
                                                                        if ((((1.0) + (((-1.0) * (gconst1 * gconst1))))) <
                                                                            -0.00001)
                                                                          continue;
                                                                        sj4 = ((-1.0) *
                                                                               (IKsqrt((
                                                                                   (1.0) +
                                                                                   (((-1.0) * (gconst1 * gconst1)))))));
                                                                        cj4 = gconst1;
                                                                        if ((gconst1) < -1 - IKFAST_SINCOS_THRESH ||
                                                                            (gconst1) > 1 + IKFAST_SINCOS_THRESH)
                                                                          continue;
                                                                        j4 = ((-1.0) * (IKacos(gconst1)));
                                                                        CheckValue<IkReal> x119 = IKPowWithIntegerCheck(
                                                                            ((1.0) + (((-1.0) * (new_r22 * new_r22)))),
                                                                            -1);
                                                                        if (!x119.valid)
                                                                        {
                                                                          continue;
                                                                        }
                                                                        if ((x119.value) < -0.00001)
                                                                          continue;
                                                                        IkReal gconst1 = IKsqrt(x119.value);
                                                                        j6eval[0] =
                                                                            ((IKabs(new_r11)) + (IKabs(new_r10)));
                                                                        if (IKabs(j6eval[0]) < 0.0000010000000000)
                                                                        {
                                                                          {
                                                                            IkReal j6array[1], cj6array[1], sj6array[1];
                                                                            bool j6valid[1] = { false };
                                                                            _nj6 = 1;
                                                                            if ((((1.0) +
                                                                                  (((-1.0) * (gconst1 * gconst1))))) <
                                                                                -0.00001)
                                                                              continue;
                                                                            CheckValue<IkReal> x120 =
                                                                                IKPowWithIntegerCheck(gconst1, -1);
                                                                            if (!x120.valid)
                                                                            {
                                                                              continue;
                                                                            }
                                                                            if (IKabs((((gconst1 * new_r10)) +
                                                                                       ((new_r00 *
                                                                                         (IKsqrt(((1.0) +
                                                                                                  (((-1.0) *
                                                                                                    (gconst1 *
                                                                                                     gconst1)))))))))) <
                                                                                    IKFAST_ATAN2_MAGTHRESH &&
                                                                                IKabs((new_r11 * (x120.value))) <
                                                                                    IKFAST_ATAN2_MAGTHRESH &&
                                                                                IKabs(
                                                                                    IKsqr((
                                                                                        ((gconst1 * new_r10)) +
                                                                                        ((new_r00 *
                                                                                          (IKsqrt(((1.0) +
                                                                                                   (((-1.0) *
                                                                                                     (gconst1 *
                                                                                                      gconst1)))))))))) +
                                                                                    IKsqr((new_r11 * (x120.value))) -
                                                                                    1) <= IKFAST_SINCOS_THRESH)
                                                                              continue;
                                                                            j6array[0] = IKatan2(
                                                                                (((gconst1 * new_r10)) +
                                                                                 ((new_r00 *
                                                                                   (IKsqrt(((1.0) + (((-1.0) *
                                                                                                      (gconst1 *
                                                                                                       gconst1))))))))),
                                                                                (new_r11 * (x120.value)));
                                                                            sj6array[0] = IKsin(j6array[0]);
                                                                            cj6array[0] = IKcos(j6array[0]);
                                                                            if (j6array[0] > IKPI)
                                                                            {
                                                                              j6array[0] -= IK2PI;
                                                                            }
                                                                            else if (j6array[0] < -IKPI)
                                                                            {
                                                                              j6array[0] += IK2PI;
                                                                            }
                                                                            j6valid[0] = true;
                                                                            for (int ij6 = 0; ij6 < 1; ++ij6)
                                                                            {
                                                                              if (!j6valid[ij6])
                                                                              {
                                                                                continue;
                                                                              }
                                                                              _ij6[0] = ij6;
                                                                              _ij6[1] = -1;
                                                                              for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                                              {
                                                                                if (j6valid[iij6] &&
                                                                                    IKabs(cj6array[ij6] -
                                                                                          cj6array[iij6]) <
                                                                                        IKFAST_SOLUTION_THRESH &&
                                                                                    IKabs(sj6array[ij6] -
                                                                                          sj6array[iij6]) <
                                                                                        IKFAST_SOLUTION_THRESH)
                                                                                {
                                                                                  j6valid[iij6] = false;
                                                                                  _ij6[1] = iij6;
                                                                                  break;
                                                                                }
                                                                              }
                                                                              j6 = j6array[ij6];
                                                                              cj6 = cj6array[ij6];
                                                                              sj6 = sj6array[ij6];
                                                                              {
                                                                                IkReal evalcond[8];
                                                                                IkReal x121 = IKcos(j6);
                                                                                IkReal x122 = IKsin(j6);
                                                                                IkReal x123 = ((1.0) * gconst1);
                                                                                if ((((1.0) + (((-1.0) * gconst1 *
                                                                                                x123)))) < -0.00001)
                                                                                  continue;
                                                                                IkReal x124 = IKsqrt(
                                                                                    ((1.0) +
                                                                                     (((-1.0) * gconst1 * x123))));
                                                                                IkReal x125 = ((1.0) * x124);
                                                                                evalcond[0] = x122;
                                                                                evalcond[1] = ((-1.0) * x121);
                                                                                evalcond[2] =
                                                                                    ((((-1.0) * x121 * x123)) + new_r11);
                                                                                evalcond[3] =
                                                                                    (new_r10 + (((-1.0) * x122 * x123)));
                                                                                evalcond[4] =
                                                                                    ((((-1.0) * x121 * x125)) + new_r01);
                                                                                evalcond[5] =
                                                                                    (new_r00 + (((-1.0) * x122 * x125)));
                                                                                evalcond[6] = (((gconst1 * new_r10)) +
                                                                                               ((new_r00 * x124)) +
                                                                                               (((-1.0) * x122)));
                                                                                evalcond[7] = (((gconst1 * new_r11)) +
                                                                                               ((new_r01 * x124)) +
                                                                                               (((-1.0) * x121)));
                                                                                if (IKabs(evalcond[0]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[1]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[2]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[3]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[4]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[5]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[6]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[7]) >
                                                                                        IKFAST_EVALCOND_THRESH)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                              }

                                                                              {
                                                                                std::vector<
                                                                                    IkSingleDOFSolutionBase<IkReal> >
                                                                                    vinfos(7);
                                                                                vinfos[0].jointtype = 1;
                                                                                vinfos[0].foffset = j0;
                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                vinfos[1].jointtype = 17;
                                                                                vinfos[1].foffset = j1;
                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                vinfos[2].jointtype = 17;
                                                                                vinfos[2].foffset = j2;
                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                vinfos[3].jointtype = 17;
                                                                                vinfos[3].foffset = j3;
                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                vinfos[4].jointtype = 1;
                                                                                vinfos[4].foffset = j4;
                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                vinfos[5].jointtype = 1;
                                                                                vinfos[5].foffset = j5;
                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                vinfos[6].jointtype = 1;
                                                                                vinfos[6].foffset = j6;
                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                std::vector<int> vfree(0);
                                                                                solutions.AddSolution(vinfos, vfree);
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                        else
                                                                        {
                                                                          {
                                                                            IkReal j6array[1], cj6array[1], sj6array[1];
                                                                            bool j6valid[1] = { false };
                                                                            _nj6 = 1;
                                                                            CheckValue<IkReal> x126 =
                                                                                IKPowWithIntegerCheck(IKsign(gconst1),
                                                                                                      -1);
                                                                            if (!x126.valid)
                                                                            {
                                                                              continue;
                                                                            }
                                                                            CheckValue<IkReal> x127 = IKatan2WithCheck(
                                                                                IkReal(new_r10), IkReal(new_r11),
                                                                                IKFAST_ATAN2_MAGTHRESH);
                                                                            if (!x127.valid)
                                                                            {
                                                                              continue;
                                                                            }
                                                                            j6array[0] =
                                                                                ((-1.5707963267949) +
                                                                                 (((1.5707963267949) * (x126.value))) +
                                                                                 (x127.value));
                                                                            sj6array[0] = IKsin(j6array[0]);
                                                                            cj6array[0] = IKcos(j6array[0]);
                                                                            if (j6array[0] > IKPI)
                                                                            {
                                                                              j6array[0] -= IK2PI;
                                                                            }
                                                                            else if (j6array[0] < -IKPI)
                                                                            {
                                                                              j6array[0] += IK2PI;
                                                                            }
                                                                            j6valid[0] = true;
                                                                            for (int ij6 = 0; ij6 < 1; ++ij6)
                                                                            {
                                                                              if (!j6valid[ij6])
                                                                              {
                                                                                continue;
                                                                              }
                                                                              _ij6[0] = ij6;
                                                                              _ij6[1] = -1;
                                                                              for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                                              {
                                                                                if (j6valid[iij6] &&
                                                                                    IKabs(cj6array[ij6] -
                                                                                          cj6array[iij6]) <
                                                                                        IKFAST_SOLUTION_THRESH &&
                                                                                    IKabs(sj6array[ij6] -
                                                                                          sj6array[iij6]) <
                                                                                        IKFAST_SOLUTION_THRESH)
                                                                                {
                                                                                  j6valid[iij6] = false;
                                                                                  _ij6[1] = iij6;
                                                                                  break;
                                                                                }
                                                                              }
                                                                              j6 = j6array[ij6];
                                                                              cj6 = cj6array[ij6];
                                                                              sj6 = sj6array[ij6];
                                                                              {
                                                                                IkReal evalcond[8];
                                                                                IkReal x128 = IKcos(j6);
                                                                                IkReal x129 = IKsin(j6);
                                                                                IkReal x130 = ((1.0) * gconst1);
                                                                                if ((((1.0) + (((-1.0) * gconst1 *
                                                                                                x130)))) < -0.00001)
                                                                                  continue;
                                                                                IkReal x131 = IKsqrt(
                                                                                    ((1.0) +
                                                                                     (((-1.0) * gconst1 * x130))));
                                                                                IkReal x132 = ((1.0) * x131);
                                                                                evalcond[0] = x129;
                                                                                evalcond[1] = ((-1.0) * x128);
                                                                                evalcond[2] =
                                                                                    ((((-1.0) * x128 * x130)) + new_r11);
                                                                                evalcond[3] =
                                                                                    ((((-1.0) * x129 * x130)) + new_r10);
                                                                                evalcond[4] =
                                                                                    ((((-1.0) * x128 * x132)) + new_r01);
                                                                                evalcond[5] =
                                                                                    ((((-1.0) * x129 * x132)) + new_r00);
                                                                                evalcond[6] = (((gconst1 * new_r10)) +
                                                                                               ((new_r00 * x131)) +
                                                                                               (((-1.0) * x129)));
                                                                                evalcond[7] = (((gconst1 * new_r11)) +
                                                                                               ((new_r01 * x131)) +
                                                                                               (((-1.0) * x128)));
                                                                                if (IKabs(evalcond[0]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[1]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[2]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[3]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[4]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[5]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[6]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[7]) >
                                                                                        IKFAST_EVALCOND_THRESH)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                              }

                                                                              {
                                                                                std::vector<
                                                                                    IkSingleDOFSolutionBase<IkReal> >
                                                                                    vinfos(7);
                                                                                vinfos[0].jointtype = 1;
                                                                                vinfos[0].foffset = j0;
                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                vinfos[1].jointtype = 17;
                                                                                vinfos[1].foffset = j1;
                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                vinfos[2].jointtype = 17;
                                                                                vinfos[2].foffset = j2;
                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                vinfos[3].jointtype = 17;
                                                                                vinfos[3].foffset = j3;
                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                vinfos[4].jointtype = 1;
                                                                                vinfos[4].foffset = j4;
                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                vinfos[5].jointtype = 1;
                                                                                vinfos[5].foffset = j5;
                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                vinfos[6].jointtype = 1;
                                                                                vinfos[6].foffset = j6;
                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                std::vector<int> vfree(0);
                                                                                solutions.AddSolution(vinfos, vfree);
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  } while (0);
                                                                  if (bgotonextstatement)
                                                                  {
                                                                    bool bgotonextstatement = true;
                                                                    do
                                                                    {
                                                                      if (1)
                                                                      {
                                                                        bgotonextstatement = false;
                                                                        continue;  // branch miss [j6]
                                                                      }
                                                                    } while (0);
                                                                    if (bgotonextstatement) {}
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                                else
                                                {
                                                  {
                                                    IkReal j6array[1], cj6array[1], sj6array[1];
                                                    bool j6valid[1] = { false };
                                                    _nj6 = 1;
                                                    IkReal x133 = new_r22 * new_r22;
                                                    CheckValue<IkReal> x134 =
                                                        IKPowWithIntegerCheck((((cj4 * x133)) + (((-1.0) * cj4))), -1);
                                                    if (!x134.valid)
                                                    {
                                                      continue;
                                                    }
                                                    CheckValue<IkReal> x135 =
                                                        IKPowWithIntegerCheck(((((-1.0) * sj4)) + ((sj4 * x133))), -1);
                                                    if (!x135.valid)
                                                    {
                                                      continue;
                                                    }
                                                    if (IKabs(((x134.value) * (((((-1.0) * new_r01 * new_r22)) +
                                                                                (((-1.0) * new_r10)))))) <
                                                            IKFAST_ATAN2_MAGTHRESH &&
                                                        IKabs(((x135.value) * ((((new_r10 * new_r22)) + new_r01)))) <
                                                            IKFAST_ATAN2_MAGTHRESH &&
                                                        IKabs(IKsqr(((x134.value) * (((((-1.0) * new_r01 * new_r22)) +
                                                                                      (((-1.0) * new_r10)))))) +
                                                              IKsqr(((x135.value) *
                                                                     ((((new_r10 * new_r22)) + new_r01)))) -
                                                              1) <= IKFAST_SINCOS_THRESH)
                                                      continue;
                                                    j6array[0] =
                                                        IKatan2(((x134.value) * (((((-1.0) * new_r01 * new_r22)) +
                                                                                  (((-1.0) * new_r10))))),
                                                                ((x135.value) * ((((new_r10 * new_r22)) + new_r01))));
                                                    sj6array[0] = IKsin(j6array[0]);
                                                    cj6array[0] = IKcos(j6array[0]);
                                                    if (j6array[0] > IKPI)
                                                    {
                                                      j6array[0] -= IK2PI;
                                                    }
                                                    else if (j6array[0] < -IKPI)
                                                    {
                                                      j6array[0] += IK2PI;
                                                    }
                                                    j6valid[0] = true;
                                                    for (int ij6 = 0; ij6 < 1; ++ij6)
                                                    {
                                                      if (!j6valid[ij6])
                                                      {
                                                        continue;
                                                      }
                                                      _ij6[0] = ij6;
                                                      _ij6[1] = -1;
                                                      for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                      {
                                                        if (j6valid[iij6] &&
                                                            IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                IKFAST_SOLUTION_THRESH &&
                                                            IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                IKFAST_SOLUTION_THRESH)
                                                        {
                                                          j6valid[iij6] = false;
                                                          _ij6[1] = iij6;
                                                          break;
                                                        }
                                                      }
                                                      j6 = j6array[ij6];
                                                      cj6 = cj6array[ij6];
                                                      sj6 = sj6array[ij6];
                                                      {
                                                        IkReal evalcond[10];
                                                        IkReal x136 = IKsin(j6);
                                                        IkReal x137 = IKcos(j6);
                                                        IkReal x138 = ((1.0) * sj4);
                                                        IkReal x139 = (cj4 * new_r01);
                                                        IkReal x140 = (new_r10 * sj4);
                                                        IkReal x141 = (new_r11 * sj4);
                                                        IkReal x142 = (cj4 * new_r00);
                                                        IkReal x143 = ((1.0) * x137);
                                                        IkReal x144 = (sj4 * x136);
                                                        IkReal x145 = (new_r22 * x136);
                                                        IkReal x146 = ((1.0) * x136);
                                                        evalcond[0] = (x141 + x145 + x139);
                                                        evalcond[1] = (((new_r22 * x139)) + x136 + ((new_r22 * x141)));
                                                        evalcond[2] = ((((-1.0) * x146)) + ((cj4 * new_r10)) +
                                                                       (((-1.0) * new_r00 * x138)));
                                                        evalcond[3] = ((((-1.0) * x143)) + (((-1.0) * new_r01 * x138)) +
                                                                       ((cj4 * new_r11)));
                                                        evalcond[4] = (((sj4 * x137)) + new_r01 + ((cj4 * x145)));
                                                        evalcond[5] = ((((-1.0) * new_r22 * x143)) + x140 + x142);
                                                        evalcond[6] =
                                                            (x144 + (((-1.0) * cj4 * new_r22 * x143)) + new_r00);
                                                        evalcond[7] =
                                                            (((new_r22 * x144)) + new_r11 + (((-1.0) * cj4 * x143)));
                                                        evalcond[8] = ((((-1.0) * x143)) + ((new_r22 * x140)) +
                                                                       ((new_r22 * x142)));
                                                        evalcond[9] = ((((-1.0) * new_r22 * x137 * x138)) + new_r10 +
                                                                       (((-1.0) * cj4 * x146)));
                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH)
                                                        {
                                                          continue;
                                                        }
                                                      }

                                                      {
                                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                        vinfos[0].jointtype = 1;
                                                        vinfos[0].foffset = j0;
                                                        vinfos[0].indices[0] = _ij0[0];
                                                        vinfos[0].indices[1] = _ij0[1];
                                                        vinfos[0].maxsolutions = _nj0;
                                                        vinfos[1].jointtype = 17;
                                                        vinfos[1].foffset = j1;
                                                        vinfos[1].indices[0] = _ij1[0];
                                                        vinfos[1].indices[1] = _ij1[1];
                                                        vinfos[1].maxsolutions = _nj1;
                                                        vinfos[2].jointtype = 17;
                                                        vinfos[2].foffset = j2;
                                                        vinfos[2].indices[0] = _ij2[0];
                                                        vinfos[2].indices[1] = _ij2[1];
                                                        vinfos[2].maxsolutions = _nj2;
                                                        vinfos[3].jointtype = 17;
                                                        vinfos[3].foffset = j3;
                                                        vinfos[3].indices[0] = _ij3[0];
                                                        vinfos[3].indices[1] = _ij3[1];
                                                        vinfos[3].maxsolutions = _nj3;
                                                        vinfos[4].jointtype = 1;
                                                        vinfos[4].foffset = j4;
                                                        vinfos[4].indices[0] = _ij4[0];
                                                        vinfos[4].indices[1] = _ij4[1];
                                                        vinfos[4].maxsolutions = _nj4;
                                                        vinfos[5].jointtype = 1;
                                                        vinfos[5].foffset = j5;
                                                        vinfos[5].indices[0] = _ij5[0];
                                                        vinfos[5].indices[1] = _ij5[1];
                                                        vinfos[5].maxsolutions = _nj5;
                                                        vinfos[6].jointtype = 1;
                                                        vinfos[6].foffset = j6;
                                                        vinfos[6].indices[0] = _ij6[0];
                                                        vinfos[6].indices[1] = _ij6[1];
                                                        vinfos[6].maxsolutions = _nj6;
                                                        std::vector<int> vfree(0);
                                                        solutions.AddSolution(vinfos, vfree);
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                            else
                                            {
                                              {
                                                IkReal j6array[1], cj6array[1], sj6array[1];
                                                bool j6valid[1] = { false };
                                                _nj6 = 1;
                                                IkReal x147 = ((1.0) * sj4);
                                                CheckValue<IkReal> x148 = IKPowWithIntegerCheck(new_r22, -1);
                                                if (!x148.valid)
                                                {
                                                  continue;
                                                }
                                                if (IKabs(((x148.value) * (((((-1.0) * cj4 * new_r01)) +
                                                                            (((-1.0) * new_r11 * x147)))))) <
                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                    IKabs(((((-1.0) * new_r01 * x147)) + ((cj4 * new_r11)))) <
                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                    IKabs(IKsqr(((x148.value) * (((((-1.0) * cj4 * new_r01)) +
                                                                                  (((-1.0) * new_r11 * x147)))))) +
                                                          IKsqr(((((-1.0) * new_r01 * x147)) + ((cj4 * new_r11)))) -
                                                          1) <= IKFAST_SINCOS_THRESH)
                                                  continue;
                                                j6array[0] = IKatan2(((x148.value) * (((((-1.0) * cj4 * new_r01)) +
                                                                                       (((-1.0) * new_r11 * x147))))),
                                                                     ((((-1.0) * new_r01 * x147)) + ((cj4 * new_r11))));
                                                sj6array[0] = IKsin(j6array[0]);
                                                cj6array[0] = IKcos(j6array[0]);
                                                if (j6array[0] > IKPI)
                                                {
                                                  j6array[0] -= IK2PI;
                                                }
                                                else if (j6array[0] < -IKPI)
                                                {
                                                  j6array[0] += IK2PI;
                                                }
                                                j6valid[0] = true;
                                                for (int ij6 = 0; ij6 < 1; ++ij6)
                                                {
                                                  if (!j6valid[ij6])
                                                  {
                                                    continue;
                                                  }
                                                  _ij6[0] = ij6;
                                                  _ij6[1] = -1;
                                                  for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                  {
                                                    if (j6valid[iij6] &&
                                                        IKabs(cj6array[ij6] - cj6array[iij6]) < IKFAST_SOLUTION_THRESH &&
                                                        IKabs(sj6array[ij6] - sj6array[iij6]) < IKFAST_SOLUTION_THRESH)
                                                    {
                                                      j6valid[iij6] = false;
                                                      _ij6[1] = iij6;
                                                      break;
                                                    }
                                                  }
                                                  j6 = j6array[ij6];
                                                  cj6 = cj6array[ij6];
                                                  sj6 = sj6array[ij6];
                                                  {
                                                    IkReal evalcond[10];
                                                    IkReal x149 = IKsin(j6);
                                                    IkReal x150 = IKcos(j6);
                                                    IkReal x151 = ((1.0) * sj4);
                                                    IkReal x152 = (cj4 * new_r01);
                                                    IkReal x153 = (new_r10 * sj4);
                                                    IkReal x154 = (new_r11 * sj4);
                                                    IkReal x155 = (cj4 * new_r00);
                                                    IkReal x156 = ((1.0) * x150);
                                                    IkReal x157 = (sj4 * x149);
                                                    IkReal x158 = (new_r22 * x149);
                                                    IkReal x159 = ((1.0) * x149);
                                                    evalcond[0] = (x154 + x152 + x158);
                                                    evalcond[1] = (x149 + ((new_r22 * x154)) + ((new_r22 * x152)));
                                                    evalcond[2] = ((((-1.0) * x159)) + ((cj4 * new_r10)) +
                                                                   (((-1.0) * new_r00 * x151)));
                                                    evalcond[3] = ((((-1.0) * x156)) + ((cj4 * new_r11)) +
                                                                   (((-1.0) * new_r01 * x151)));
                                                    evalcond[4] = (((cj4 * x158)) + ((sj4 * x150)) + new_r01);
                                                    evalcond[5] = ((((-1.0) * new_r22 * x156)) + x155 + x153);
                                                    evalcond[6] = (x157 + (((-1.0) * cj4 * new_r22 * x156)) + new_r00);
                                                    evalcond[7] =
                                                        (((new_r22 * x157)) + new_r11 + (((-1.0) * cj4 * x156)));
                                                    evalcond[8] =
                                                        ((((-1.0) * x156)) + ((new_r22 * x153)) + ((new_r22 * x155)));
                                                    evalcond[9] = ((((-1.0) * new_r22 * x150 * x151)) + new_r10 +
                                                                   (((-1.0) * cj4 * x159)));
                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH)
                                                    {
                                                      continue;
                                                    }
                                                  }

                                                  {
                                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                    vinfos[0].jointtype = 1;
                                                    vinfos[0].foffset = j0;
                                                    vinfos[0].indices[0] = _ij0[0];
                                                    vinfos[0].indices[1] = _ij0[1];
                                                    vinfos[0].maxsolutions = _nj0;
                                                    vinfos[1].jointtype = 17;
                                                    vinfos[1].foffset = j1;
                                                    vinfos[1].indices[0] = _ij1[0];
                                                    vinfos[1].indices[1] = _ij1[1];
                                                    vinfos[1].maxsolutions = _nj1;
                                                    vinfos[2].jointtype = 17;
                                                    vinfos[2].foffset = j2;
                                                    vinfos[2].indices[0] = _ij2[0];
                                                    vinfos[2].indices[1] = _ij2[1];
                                                    vinfos[2].maxsolutions = _nj2;
                                                    vinfos[3].jointtype = 17;
                                                    vinfos[3].foffset = j3;
                                                    vinfos[3].indices[0] = _ij3[0];
                                                    vinfos[3].indices[1] = _ij3[1];
                                                    vinfos[3].maxsolutions = _nj3;
                                                    vinfos[4].jointtype = 1;
                                                    vinfos[4].foffset = j4;
                                                    vinfos[4].indices[0] = _ij4[0];
                                                    vinfos[4].indices[1] = _ij4[1];
                                                    vinfos[4].maxsolutions = _nj4;
                                                    vinfos[5].jointtype = 1;
                                                    vinfos[5].foffset = j5;
                                                    vinfos[5].indices[0] = _ij5[0];
                                                    vinfos[5].indices[1] = _ij5[1];
                                                    vinfos[5].maxsolutions = _nj5;
                                                    vinfos[6].jointtype = 1;
                                                    vinfos[6].foffset = j6;
                                                    vinfos[6].indices[0] = _ij6[0];
                                                    vinfos[6].indices[1] = _ij6[1];
                                                    vinfos[6].maxsolutions = _nj6;
                                                    std::vector<int> vfree(0);
                                                    solutions.AddSolution(vinfos, vfree);
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                        else
                                        {
                                          {
                                            IkReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1] = { false };
                                            _nj6 = 1;
                                            IkReal x160 = cj4 * cj4;
                                            IkReal x161 = (cj4 * new_r22);
                                            CheckValue<IkReal> x162 = IKPowWithIntegerCheck(
                                                IKsign(((-1.0) + x160 + (((-1.0) * x160 * (new_r22 * new_r22))))), -1);
                                            if (!x162.valid)
                                            {
                                              continue;
                                            }
                                            CheckValue<IkReal> x163 = IKatan2WithCheck(
                                                IkReal((((new_r01 * x161)) + ((new_r00 * sj4)))),
                                                IkReal((((new_r01 * sj4)) + (((-1.0) * new_r00 * x161)))),
                                                IKFAST_ATAN2_MAGTHRESH);
                                            if (!x163.valid)
                                            {
                                              continue;
                                            }
                                            j6array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x162.value))) +
                                                          (x163.value));
                                            sj6array[0] = IKsin(j6array[0]);
                                            cj6array[0] = IKcos(j6array[0]);
                                            if (j6array[0] > IKPI)
                                            {
                                              j6array[0] -= IK2PI;
                                            }
                                            else if (j6array[0] < -IKPI)
                                            {
                                              j6array[0] += IK2PI;
                                            }
                                            j6valid[0] = true;
                                            for (int ij6 = 0; ij6 < 1; ++ij6)
                                            {
                                              if (!j6valid[ij6])
                                              {
                                                continue;
                                              }
                                              _ij6[0] = ij6;
                                              _ij6[1] = -1;
                                              for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                              {
                                                if (j6valid[iij6] &&
                                                    IKabs(cj6array[ij6] - cj6array[iij6]) < IKFAST_SOLUTION_THRESH &&
                                                    IKabs(sj6array[ij6] - sj6array[iij6]) < IKFAST_SOLUTION_THRESH)
                                                {
                                                  j6valid[iij6] = false;
                                                  _ij6[1] = iij6;
                                                  break;
                                                }
                                              }
                                              j6 = j6array[ij6];
                                              cj6 = cj6array[ij6];
                                              sj6 = sj6array[ij6];
                                              {
                                                IkReal evalcond[10];
                                                IkReal x164 = IKsin(j6);
                                                IkReal x165 = IKcos(j6);
                                                IkReal x166 = ((1.0) * sj4);
                                                IkReal x167 = (cj4 * new_r01);
                                                IkReal x168 = (new_r10 * sj4);
                                                IkReal x169 = (new_r11 * sj4);
                                                IkReal x170 = (cj4 * new_r00);
                                                IkReal x171 = ((1.0) * x165);
                                                IkReal x172 = (sj4 * x164);
                                                IkReal x173 = (new_r22 * x164);
                                                IkReal x174 = ((1.0) * x164);
                                                evalcond[0] = (x173 + x169 + x167);
                                                evalcond[1] = (x164 + ((new_r22 * x167)) + ((new_r22 * x169)));
                                                evalcond[2] = ((((-1.0) * new_r00 * x166)) + (((-1.0) * x174)) +
                                                               ((cj4 * new_r10)));
                                                evalcond[3] = ((((-1.0) * x171)) + ((cj4 * new_r11)) +
                                                               (((-1.0) * new_r01 * x166)));
                                                evalcond[4] = (((cj4 * x173)) + ((sj4 * x165)) + new_r01);
                                                evalcond[5] = (x170 + x168 + (((-1.0) * new_r22 * x171)));
                                                evalcond[6] = (x172 + new_r00 + (((-1.0) * cj4 * new_r22 * x171)));
                                                evalcond[7] = ((((-1.0) * cj4 * x171)) + ((new_r22 * x172)) + new_r11);
                                                evalcond[8] =
                                                    ((((-1.0) * x171)) + ((new_r22 * x170)) + ((new_r22 * x168)));
                                                evalcond[9] = ((((-1.0) * cj4 * x174)) +
                                                               (((-1.0) * new_r22 * x165 * x166)) + new_r10);
                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH)
                                                {
                                                  continue;
                                                }
                                              }

                                              {
                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                vinfos[0].jointtype = 1;
                                                vinfos[0].foffset = j0;
                                                vinfos[0].indices[0] = _ij0[0];
                                                vinfos[0].indices[1] = _ij0[1];
                                                vinfos[0].maxsolutions = _nj0;
                                                vinfos[1].jointtype = 17;
                                                vinfos[1].foffset = j1;
                                                vinfos[1].indices[0] = _ij1[0];
                                                vinfos[1].indices[1] = _ij1[1];
                                                vinfos[1].maxsolutions = _nj1;
                                                vinfos[2].jointtype = 17;
                                                vinfos[2].foffset = j2;
                                                vinfos[2].indices[0] = _ij2[0];
                                                vinfos[2].indices[1] = _ij2[1];
                                                vinfos[2].maxsolutions = _nj2;
                                                vinfos[3].jointtype = 17;
                                                vinfos[3].foffset = j3;
                                                vinfos[3].indices[0] = _ij3[0];
                                                vinfos[3].indices[1] = _ij3[1];
                                                vinfos[3].maxsolutions = _nj3;
                                                vinfos[4].jointtype = 1;
                                                vinfos[4].foffset = j4;
                                                vinfos[4].indices[0] = _ij4[0];
                                                vinfos[4].indices[1] = _ij4[1];
                                                vinfos[4].maxsolutions = _nj4;
                                                vinfos[5].jointtype = 1;
                                                vinfos[5].foffset = j5;
                                                vinfos[5].indices[0] = _ij5[0];
                                                vinfos[5].indices[1] = _ij5[1];
                                                vinfos[5].maxsolutions = _nj5;
                                                vinfos[6].jointtype = 1;
                                                vinfos[6].foffset = j6;
                                                vinfos[6].indices[0] = _ij6[0];
                                                vinfos[6].indices[1] = _ij6[1];
                                                vinfos[6].maxsolutions = _nj6;
                                                std::vector<int> vfree(0);
                                                solutions.AddSolution(vinfos, vfree);
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            } while (0);
                            if (bgotonextstatement)
                            {
                              bool bgotonextstatement = true;
                              do
                              {
                                if (1)
                                {
                                  bgotonextstatement = false;
                                  continue;  // branch miss [j4, j6]
                                }
                              } while (0);
                              if (bgotonextstatement) {}
                            }
                          }
                        }
                      }
                    }
                    else
                    {
                      {
                        IkReal j4array[1], cj4array[1], sj4array[1];
                        bool j4valid[1] = { false };
                        _nj4 = 1;
                        CheckValue<IkReal> x176 = IKPowWithIntegerCheck(cj5, -1);
                        if (!x176.valid)
                        {
                          continue;
                        }
                        IkReal x175 = x176.value;
                        CheckValue<IkReal> x177 = IKPowWithIntegerCheck(new_r12, -1);
                        if (!x177.valid)
                        {
                          continue;
                        }
                        CheckValue<IkReal> x178 = IKPowWithIntegerCheck(x175, -2);
                        if (!x178.valid)
                        {
                          continue;
                        }
                        if (IKabs((x175 * (x177.value) * (((((-1.0) * (x178.value))) + (new_r02 * new_r02))))) <
                                IKFAST_ATAN2_MAGTHRESH &&
                            IKabs(((-1.0) * new_r02 * x175)) < IKFAST_ATAN2_MAGTHRESH &&
                            IKabs(IKsqr((x175 * (x177.value) * (((((-1.0) * (x178.value))) + (new_r02 * new_r02))))) +
                                  IKsqr(((-1.0) * new_r02 * x175)) - 1) <= IKFAST_SINCOS_THRESH)
                          continue;
                        j4array[0] =
                            IKatan2((x175 * (x177.value) * (((((-1.0) * (x178.value))) + (new_r02 * new_r02)))),
                                    ((-1.0) * new_r02 * x175));
                        sj4array[0] = IKsin(j4array[0]);
                        cj4array[0] = IKcos(j4array[0]);
                        if (j4array[0] > IKPI)
                        {
                          j4array[0] -= IK2PI;
                        }
                        else if (j4array[0] < -IKPI)
                        {
                          j4array[0] += IK2PI;
                        }
                        j4valid[0] = true;
                        for (int ij4 = 0; ij4 < 1; ++ij4)
                        {
                          if (!j4valid[ij4])
                          {
                            continue;
                          }
                          _ij4[0] = ij4;
                          _ij4[1] = -1;
                          for (int iij4 = ij4 + 1; iij4 < 1; ++iij4)
                          {
                            if (j4valid[iij4] && IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH &&
                                IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                            {
                              j4valid[iij4] = false;
                              _ij4[1] = iij4;
                              break;
                            }
                          }
                          j4 = j4array[ij4];
                          cj4 = cj4array[ij4];
                          sj4 = sj4array[ij4];
                          {
                            IkReal evalcond[8];
                            IkReal x179 = IKcos(j4);
                            IkReal x180 = IKsin(j4);
                            IkReal x181 = ((1.0) * sj5);
                            IkReal x182 = (cj5 * x179);
                            IkReal x183 = (cj5 * x180);
                            IkReal x184 = (new_r02 * x179);
                            IkReal x185 = (new_r12 * x180);
                            evalcond[0] = (x182 + new_r02);
                            evalcond[1] = (x183 + new_r12);
                            evalcond[2] = (((new_r12 * x179)) + (((-1.0) * new_r02 * x180)));
                            evalcond[3] = (cj5 + x184 + x185);
                            evalcond[4] = (((cj5 * new_r22)) + ((sj5 * x185)) + ((sj5 * x184)));
                            evalcond[5] = (((new_r10 * x183)) + ((new_r00 * x182)) + (((-1.0) * new_r20 * x181)));
                            evalcond[6] = (((new_r11 * x183)) + ((new_r01 * x182)) + (((-1.0) * new_r21 * x181)));
                            evalcond[7] =
                                ((1.0) + ((new_r02 * x182)) + ((new_r12 * x183)) + (((-1.0) * new_r22 * x181)));
                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                            {
                              continue;
                            }
                          }

                          {
                            IkReal j6eval[3];
                            j6eval[0] = cj5;
                            j6eval[1] = IKsign(cj5);
                            j6eval[2] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                            if (IKabs(j6eval[0]) < 0.0000010000000000 || IKabs(j6eval[1]) < 0.0000010000000000 ||
                                IKabs(j6eval[2]) < 0.0000010000000000)
                            {
                              {
                                IkReal j6eval[2];
                                j6eval[0] = cj5;
                                j6eval[1] = sj4;
                                if (IKabs(j6eval[0]) < 0.0000010000000000 || IKabs(j6eval[1]) < 0.0000010000000000)
                                {
                                  {
                                    IkReal j6eval[2];
                                    j6eval[0] = cj5;
                                    j6eval[1] = cj4;
                                    if (IKabs(j6eval[0]) < 0.0000010000000000 || IKabs(j6eval[1]) < 0.0000010000000000)
                                    {
                                      {
                                        IkReal evalcond[5];
                                        bool bgotonextstatement = true;
                                        do
                                        {
                                          evalcond[0] =
                                              ((-3.14159265358979) +
                                               (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j5)))),
                                                       6.28318530717959)));
                                          evalcond[1] = new_r02;
                                          evalcond[2] = new_r12;
                                          evalcond[3] = new_r21;
                                          evalcond[4] = new_r20;
                                          if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                              IKabs(evalcond[1]) < 0.0000050000000000 &&
                                              IKabs(evalcond[2]) < 0.0000050000000000 &&
                                              IKabs(evalcond[3]) < 0.0000050000000000 &&
                                              IKabs(evalcond[4]) < 0.0000050000000000)
                                          {
                                            bgotonextstatement = false;
                                            {
                                              IkReal j6array[1], cj6array[1], sj6array[1];
                                              bool j6valid[1] = { false };
                                              _nj6 = 1;
                                              IkReal x186 = ((1.0) * new_r01);
                                              if (IKabs(((((-1.0) * cj4 * x186)) + (((-1.0) * new_r00 * sj4)))) <
                                                      IKFAST_ATAN2_MAGTHRESH &&
                                                  IKabs((((cj4 * new_r00)) + (((-1.0) * sj4 * x186)))) <
                                                      IKFAST_ATAN2_MAGTHRESH &&
                                                  IKabs(IKsqr(((((-1.0) * cj4 * x186)) + (((-1.0) * new_r00 * sj4)))) +
                                                        IKsqr((((cj4 * new_r00)) + (((-1.0) * sj4 * x186)))) - 1) <=
                                                      IKFAST_SINCOS_THRESH)
                                                continue;
                                              j6array[0] =
                                                  IKatan2(((((-1.0) * cj4 * x186)) + (((-1.0) * new_r00 * sj4))),
                                                          (((cj4 * new_r00)) + (((-1.0) * sj4 * x186))));
                                              sj6array[0] = IKsin(j6array[0]);
                                              cj6array[0] = IKcos(j6array[0]);
                                              if (j6array[0] > IKPI)
                                              {
                                                j6array[0] -= IK2PI;
                                              }
                                              else if (j6array[0] < -IKPI)
                                              {
                                                j6array[0] += IK2PI;
                                              }
                                              j6valid[0] = true;
                                              for (int ij6 = 0; ij6 < 1; ++ij6)
                                              {
                                                if (!j6valid[ij6])
                                                {
                                                  continue;
                                                }
                                                _ij6[0] = ij6;
                                                _ij6[1] = -1;
                                                for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                {
                                                  if (j6valid[iij6] &&
                                                      IKabs(cj6array[ij6] - cj6array[iij6]) < IKFAST_SOLUTION_THRESH &&
                                                      IKabs(sj6array[ij6] - sj6array[iij6]) < IKFAST_SOLUTION_THRESH)
                                                  {
                                                    j6valid[iij6] = false;
                                                    _ij6[1] = iij6;
                                                    break;
                                                  }
                                                }
                                                j6 = j6array[ij6];
                                                cj6 = cj6array[ij6];
                                                sj6 = sj6array[ij6];
                                                {
                                                  IkReal evalcond[8];
                                                  IkReal x187 = IKsin(j6);
                                                  IkReal x188 = IKcos(j6);
                                                  IkReal x189 = ((1.0) * sj4);
                                                  IkReal x190 = ((1.0) * x188);
                                                  IkReal x191 = (sj4 * x187);
                                                  IkReal x192 = (sj4 * x188);
                                                  IkReal x193 = (cj4 * x187);
                                                  IkReal x194 = (cj4 * x190);
                                                  evalcond[0] = (((cj4 * new_r01)) + ((new_r11 * sj4)) + x187);
                                                  evalcond[1] = (x193 + x192 + new_r01);
                                                  evalcond[2] =
                                                      (((cj4 * new_r00)) + ((new_r10 * sj4)) + (((-1.0) * x190)));
                                                  evalcond[3] = (((cj4 * new_r10)) + (((-1.0) * x187)) +
                                                                 (((-1.0) * new_r00 * x189)));
                                                  evalcond[4] = (((cj4 * new_r11)) + (((-1.0) * x190)) +
                                                                 (((-1.0) * new_r01 * x189)));
                                                  evalcond[5] = ((((-1.0) * x194)) + x191 + new_r00);
                                                  evalcond[6] = ((((-1.0) * x194)) + x191 + new_r11);
                                                  evalcond[7] =
                                                      ((((-1.0) * x188 * x189)) + (((-1.0) * x193)) + new_r10);
                                                  if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                  {
                                                    continue;
                                                  }
                                                }

                                                {
                                                  std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                  vinfos[0].jointtype = 1;
                                                  vinfos[0].foffset = j0;
                                                  vinfos[0].indices[0] = _ij0[0];
                                                  vinfos[0].indices[1] = _ij0[1];
                                                  vinfos[0].maxsolutions = _nj0;
                                                  vinfos[1].jointtype = 17;
                                                  vinfos[1].foffset = j1;
                                                  vinfos[1].indices[0] = _ij1[0];
                                                  vinfos[1].indices[1] = _ij1[1];
                                                  vinfos[1].maxsolutions = _nj1;
                                                  vinfos[2].jointtype = 17;
                                                  vinfos[2].foffset = j2;
                                                  vinfos[2].indices[0] = _ij2[0];
                                                  vinfos[2].indices[1] = _ij2[1];
                                                  vinfos[2].maxsolutions = _nj2;
                                                  vinfos[3].jointtype = 17;
                                                  vinfos[3].foffset = j3;
                                                  vinfos[3].indices[0] = _ij3[0];
                                                  vinfos[3].indices[1] = _ij3[1];
                                                  vinfos[3].maxsolutions = _nj3;
                                                  vinfos[4].jointtype = 1;
                                                  vinfos[4].foffset = j4;
                                                  vinfos[4].indices[0] = _ij4[0];
                                                  vinfos[4].indices[1] = _ij4[1];
                                                  vinfos[4].maxsolutions = _nj4;
                                                  vinfos[5].jointtype = 1;
                                                  vinfos[5].foffset = j5;
                                                  vinfos[5].indices[0] = _ij5[0];
                                                  vinfos[5].indices[1] = _ij5[1];
                                                  vinfos[5].maxsolutions = _nj5;
                                                  vinfos[6].jointtype = 1;
                                                  vinfos[6].foffset = j6;
                                                  vinfos[6].indices[0] = _ij6[0];
                                                  vinfos[6].indices[1] = _ij6[1];
                                                  vinfos[6].maxsolutions = _nj6;
                                                  std::vector<int> vfree(0);
                                                  solutions.AddSolution(vinfos, vfree);
                                                }
                                              }
                                            }
                                          }
                                        } while (0);
                                        if (bgotonextstatement)
                                        {
                                          bool bgotonextstatement = true;
                                          do
                                          {
                                            evalcond[0] =
                                                ((-3.14159265358979) +
                                                 (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j5)))),
                                                         6.28318530717959)));
                                            evalcond[1] = new_r02;
                                            evalcond[2] = new_r12;
                                            evalcond[3] = new_r21;
                                            evalcond[4] = new_r20;
                                            if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                IKabs(evalcond[2]) < 0.0000050000000000 &&
                                                IKabs(evalcond[3]) < 0.0000050000000000 &&
                                                IKabs(evalcond[4]) < 0.0000050000000000)
                                            {
                                              bgotonextstatement = false;
                                              {
                                                IkReal j6array[1], cj6array[1], sj6array[1];
                                                bool j6valid[1] = { false };
                                                _nj6 = 1;
                                                IkReal x195 = ((1.0) * new_r00);
                                                if (IKabs((((cj4 * new_r01)) + (((-1.0) * sj4 * x195)))) <
                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                    IKabs(((((-1.0) * new_r01 * sj4)) + (((-1.0) * cj4 * x195)))) <
                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                    IKabs(IKsqr((((cj4 * new_r01)) + (((-1.0) * sj4 * x195)))) +
                                                          IKsqr(((((-1.0) * new_r01 * sj4)) + (((-1.0) * cj4 * x195)))) -
                                                          1) <= IKFAST_SINCOS_THRESH)
                                                  continue;
                                                j6array[0] =
                                                    IKatan2((((cj4 * new_r01)) + (((-1.0) * sj4 * x195))),
                                                            ((((-1.0) * new_r01 * sj4)) + (((-1.0) * cj4 * x195))));
                                                sj6array[0] = IKsin(j6array[0]);
                                                cj6array[0] = IKcos(j6array[0]);
                                                if (j6array[0] > IKPI)
                                                {
                                                  j6array[0] -= IK2PI;
                                                }
                                                else if (j6array[0] < -IKPI)
                                                {
                                                  j6array[0] += IK2PI;
                                                }
                                                j6valid[0] = true;
                                                for (int ij6 = 0; ij6 < 1; ++ij6)
                                                {
                                                  if (!j6valid[ij6])
                                                  {
                                                    continue;
                                                  }
                                                  _ij6[0] = ij6;
                                                  _ij6[1] = -1;
                                                  for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                  {
                                                    if (j6valid[iij6] &&
                                                        IKabs(cj6array[ij6] - cj6array[iij6]) < IKFAST_SOLUTION_THRESH &&
                                                        IKabs(sj6array[ij6] - sj6array[iij6]) < IKFAST_SOLUTION_THRESH)
                                                    {
                                                      j6valid[iij6] = false;
                                                      _ij6[1] = iij6;
                                                      break;
                                                    }
                                                  }
                                                  j6 = j6array[ij6];
                                                  cj6 = cj6array[ij6];
                                                  sj6 = sj6array[ij6];
                                                  {
                                                    IkReal evalcond[8];
                                                    IkReal x196 = IKcos(j6);
                                                    IkReal x197 = IKsin(j6);
                                                    IkReal x198 = ((1.0) * sj4);
                                                    IkReal x199 = ((1.0) * x197);
                                                    IkReal x200 = (sj4 * x196);
                                                    IkReal x201 = ((1.0) * x196);
                                                    IkReal x202 = (cj4 * x199);
                                                    evalcond[0] = (((cj4 * new_r00)) + ((new_r10 * sj4)) + x196);
                                                    evalcond[1] =
                                                        (((cj4 * new_r01)) + ((new_r11 * sj4)) + (((-1.0) * x199)));
                                                    evalcond[2] = (((cj4 * x196)) + ((sj4 * x197)) + new_r00);
                                                    evalcond[3] = (((cj4 * new_r10)) + (((-1.0) * x199)) +
                                                                   (((-1.0) * new_r00 * x198)));
                                                    evalcond[4] = (((cj4 * new_r11)) + (((-1.0) * x201)) +
                                                                   (((-1.0) * new_r01 * x198)));
                                                    evalcond[5] = ((((-1.0) * x202)) + x200 + new_r01);
                                                    evalcond[6] = ((((-1.0) * x202)) + x200 + new_r10);
                                                    evalcond[7] =
                                                        ((((-1.0) * x197 * x198)) + (((-1.0) * cj4 * x201)) + new_r11);
                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                    {
                                                      continue;
                                                    }
                                                  }

                                                  {
                                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                    vinfos[0].jointtype = 1;
                                                    vinfos[0].foffset = j0;
                                                    vinfos[0].indices[0] = _ij0[0];
                                                    vinfos[0].indices[1] = _ij0[1];
                                                    vinfos[0].maxsolutions = _nj0;
                                                    vinfos[1].jointtype = 17;
                                                    vinfos[1].foffset = j1;
                                                    vinfos[1].indices[0] = _ij1[0];
                                                    vinfos[1].indices[1] = _ij1[1];
                                                    vinfos[1].maxsolutions = _nj1;
                                                    vinfos[2].jointtype = 17;
                                                    vinfos[2].foffset = j2;
                                                    vinfos[2].indices[0] = _ij2[0];
                                                    vinfos[2].indices[1] = _ij2[1];
                                                    vinfos[2].maxsolutions = _nj2;
                                                    vinfos[3].jointtype = 17;
                                                    vinfos[3].foffset = j3;
                                                    vinfos[3].indices[0] = _ij3[0];
                                                    vinfos[3].indices[1] = _ij3[1];
                                                    vinfos[3].maxsolutions = _nj3;
                                                    vinfos[4].jointtype = 1;
                                                    vinfos[4].foffset = j4;
                                                    vinfos[4].indices[0] = _ij4[0];
                                                    vinfos[4].indices[1] = _ij4[1];
                                                    vinfos[4].maxsolutions = _nj4;
                                                    vinfos[5].jointtype = 1;
                                                    vinfos[5].foffset = j5;
                                                    vinfos[5].indices[0] = _ij5[0];
                                                    vinfos[5].indices[1] = _ij5[1];
                                                    vinfos[5].maxsolutions = _nj5;
                                                    vinfos[6].jointtype = 1;
                                                    vinfos[6].foffset = j6;
                                                    vinfos[6].indices[0] = _ij6[0];
                                                    vinfos[6].indices[1] = _ij6[1];
                                                    vinfos[6].maxsolutions = _nj6;
                                                    std::vector<int> vfree(0);
                                                    solutions.AddSolution(vinfos, vfree);
                                                  }
                                                }
                                              }
                                            }
                                          } while (0);
                                          if (bgotonextstatement)
                                          {
                                            bool bgotonextstatement = true;
                                            do
                                            {
                                              evalcond[0] =
                                                  ((-3.14159265358979) +
                                                   (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j4)))),
                                                           6.28318530717959)));
                                              evalcond[1] = new_r02;
                                              if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                  IKabs(evalcond[1]) < 0.0000050000000000)
                                              {
                                                bgotonextstatement = false;
                                                {
                                                  IkReal j6eval[3];
                                                  sj4 = 1.0;
                                                  cj4 = 0;
                                                  j4 = 1.5707963267949;
                                                  j6eval[0] = new_r12;
                                                  j6eval[1] = IKsign(new_r12);
                                                  j6eval[2] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                  if (IKabs(j6eval[0]) < 0.0000010000000000 ||
                                                      IKabs(j6eval[1]) < 0.0000010000000000 ||
                                                      IKabs(j6eval[2]) < 0.0000010000000000)
                                                  {
                                                    {
                                                      IkReal j6eval[3];
                                                      sj4 = 1.0;
                                                      cj4 = 0;
                                                      j4 = 1.5707963267949;
                                                      j6eval[0] = sj5;
                                                      j6eval[1] = IKsign(sj5);
                                                      j6eval[2] = ((IKabs(new_r11)) + (IKabs(new_r10)));
                                                      if (IKabs(j6eval[0]) < 0.0000010000000000 ||
                                                          IKabs(j6eval[1]) < 0.0000010000000000 ||
                                                          IKabs(j6eval[2]) < 0.0000010000000000)
                                                      {
                                                        {
                                                          IkReal j6eval[1];
                                                          sj4 = 1.0;
                                                          cj4 = 0;
                                                          j4 = 1.5707963267949;
                                                          j6eval[0] = new_r12;
                                                          if (IKabs(j6eval[0]) < 0.0000010000000000)
                                                          {
                                                            {
                                                              IkReal evalcond[4];
                                                              bool bgotonextstatement = true;
                                                              do
                                                              {
                                                                evalcond[0] =
                                                                    ((-3.14159265358979) +
                                                                     (IKfmod(((3.14159265358979) + (IKabs(j5))),
                                                                             6.28318530717959)));
                                                                evalcond[1] = new_r22;
                                                                evalcond[2] = new_r11;
                                                                evalcond[3] = new_r10;
                                                                if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                                    IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                                    IKabs(evalcond[2]) < 0.0000050000000000 &&
                                                                    IKabs(evalcond[3]) < 0.0000050000000000)
                                                                {
                                                                  bgotonextstatement = false;
                                                                  {
                                                                    IkReal j6array[1], cj6array[1], sj6array[1];
                                                                    bool j6valid[1] = { false };
                                                                    _nj6 = 1;
                                                                    if (IKabs(((-1.0) * new_r21)) <
                                                                            IKFAST_ATAN2_MAGTHRESH &&
                                                                        IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH &&
                                                                        IKabs(IKsqr(((-1.0) * new_r21)) +
                                                                              IKsqr(new_r20) - 1) <=
                                                                            IKFAST_SINCOS_THRESH)
                                                                      continue;
                                                                    j6array[0] = IKatan2(((-1.0) * new_r21), new_r20);
                                                                    sj6array[0] = IKsin(j6array[0]);
                                                                    cj6array[0] = IKcos(j6array[0]);
                                                                    if (j6array[0] > IKPI)
                                                                    {
                                                                      j6array[0] -= IK2PI;
                                                                    }
                                                                    else if (j6array[0] < -IKPI)
                                                                    {
                                                                      j6array[0] += IK2PI;
                                                                    }
                                                                    j6valid[0] = true;
                                                                    for (int ij6 = 0; ij6 < 1; ++ij6)
                                                                    {
                                                                      if (!j6valid[ij6])
                                                                      {
                                                                        continue;
                                                                      }
                                                                      _ij6[0] = ij6;
                                                                      _ij6[1] = -1;
                                                                      for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                                      {
                                                                        if (j6valid[iij6] &&
                                                                            IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                                IKFAST_SOLUTION_THRESH &&
                                                                            IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                                IKFAST_SOLUTION_THRESH)
                                                                        {
                                                                          j6valid[iij6] = false;
                                                                          _ij6[1] = iij6;
                                                                          break;
                                                                        }
                                                                      }
                                                                      j6 = j6array[ij6];
                                                                      cj6 = cj6array[ij6];
                                                                      sj6 = sj6array[ij6];
                                                                      {
                                                                        IkReal evalcond[4];
                                                                        IkReal x203 = IKsin(j6);
                                                                        IkReal x204 = ((1.0) * (IKcos(j6)));
                                                                        evalcond[0] = (x203 + new_r21);
                                                                        evalcond[1] = ((((-1.0) * x204)) + new_r20);
                                                                        evalcond[2] =
                                                                            ((((-1.0) * new_r00)) + (((-1.0) * x203)));
                                                                        evalcond[3] =
                                                                            ((((-1.0) * x204)) + (((-1.0) * new_r01)));
                                                                        if (IKabs(evalcond[0]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[1]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[2]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                        {
                                                                          continue;
                                                                        }
                                                                      }

                                                                      {
                                                                        std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                            vinfos(7);
                                                                        vinfos[0].jointtype = 1;
                                                                        vinfos[0].foffset = j0;
                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                        vinfos[0].maxsolutions = _nj0;
                                                                        vinfos[1].jointtype = 17;
                                                                        vinfos[1].foffset = j1;
                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                        vinfos[1].maxsolutions = _nj1;
                                                                        vinfos[2].jointtype = 17;
                                                                        vinfos[2].foffset = j2;
                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                        vinfos[2].maxsolutions = _nj2;
                                                                        vinfos[3].jointtype = 17;
                                                                        vinfos[3].foffset = j3;
                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                        vinfos[3].maxsolutions = _nj3;
                                                                        vinfos[4].jointtype = 1;
                                                                        vinfos[4].foffset = j4;
                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                        vinfos[4].maxsolutions = _nj4;
                                                                        vinfos[5].jointtype = 1;
                                                                        vinfos[5].foffset = j5;
                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                        vinfos[5].maxsolutions = _nj5;
                                                                        vinfos[6].jointtype = 1;
                                                                        vinfos[6].foffset = j6;
                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                        vinfos[6].maxsolutions = _nj6;
                                                                        std::vector<int> vfree(0);
                                                                        solutions.AddSolution(vinfos, vfree);
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              } while (0);
                                                              if (bgotonextstatement)
                                                              {
                                                                bool bgotonextstatement = true;
                                                                do
                                                                {
                                                                  evalcond[0] =
                                                                      ((-3.14159265358979) +
                                                                       (IKfmod(((3.14159265358979) +
                                                                                (IKabs(((-3.14159265358979) + j5)))),
                                                                               6.28318530717959)));
                                                                  evalcond[1] = new_r22;
                                                                  evalcond[2] = new_r11;
                                                                  evalcond[3] = new_r10;
                                                                  if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                                      IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                                      IKabs(evalcond[2]) < 0.0000050000000000 &&
                                                                      IKabs(evalcond[3]) < 0.0000050000000000)
                                                                  {
                                                                    bgotonextstatement = false;
                                                                    {
                                                                      IkReal j6array[1], cj6array[1], sj6array[1];
                                                                      bool j6valid[1] = { false };
                                                                      _nj6 = 1;
                                                                      if (IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH &&
                                                                          IKabs(((-1.0) * new_r20)) <
                                                                              IKFAST_ATAN2_MAGTHRESH &&
                                                                          IKabs(IKsqr(new_r21) +
                                                                                IKsqr(((-1.0) * new_r20)) - 1) <=
                                                                              IKFAST_SINCOS_THRESH)
                                                                        continue;
                                                                      j6array[0] = IKatan2(new_r21, ((-1.0) * new_r20));
                                                                      sj6array[0] = IKsin(j6array[0]);
                                                                      cj6array[0] = IKcos(j6array[0]);
                                                                      if (j6array[0] > IKPI)
                                                                      {
                                                                        j6array[0] -= IK2PI;
                                                                      }
                                                                      else if (j6array[0] < -IKPI)
                                                                      {
                                                                        j6array[0] += IK2PI;
                                                                      }
                                                                      j6valid[0] = true;
                                                                      for (int ij6 = 0; ij6 < 1; ++ij6)
                                                                      {
                                                                        if (!j6valid[ij6])
                                                                        {
                                                                          continue;
                                                                        }
                                                                        _ij6[0] = ij6;
                                                                        _ij6[1] = -1;
                                                                        for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                                        {
                                                                          if (j6valid[iij6] &&
                                                                              IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                                  IKFAST_SOLUTION_THRESH &&
                                                                              IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                                  IKFAST_SOLUTION_THRESH)
                                                                          {
                                                                            j6valid[iij6] = false;
                                                                            _ij6[1] = iij6;
                                                                            break;
                                                                          }
                                                                        }
                                                                        j6 = j6array[ij6];
                                                                        cj6 = cj6array[ij6];
                                                                        sj6 = sj6array[ij6];
                                                                        {
                                                                          IkReal evalcond[4];
                                                                          IkReal x205 = IKcos(j6);
                                                                          IkReal x206 = ((1.0) * (IKsin(j6)));
                                                                          evalcond[0] = (x205 + new_r20);
                                                                          evalcond[1] = ((((-1.0) * x206)) + new_r21);
                                                                          evalcond[2] = ((((-1.0) * x206)) +
                                                                                         (((-1.0) * new_r00)));
                                                                          evalcond[3] = ((((-1.0) * new_r01)) +
                                                                                         (((-1.0) * x205)));
                                                                          if (IKabs(evalcond[0]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[1]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[2]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[3]) >
                                                                                  IKFAST_EVALCOND_THRESH)
                                                                          {
                                                                            continue;
                                                                          }
                                                                        }

                                                                        {
                                                                          std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                              vinfos(7);
                                                                          vinfos[0].jointtype = 1;
                                                                          vinfos[0].foffset = j0;
                                                                          vinfos[0].indices[0] = _ij0[0];
                                                                          vinfos[0].indices[1] = _ij0[1];
                                                                          vinfos[0].maxsolutions = _nj0;
                                                                          vinfos[1].jointtype = 17;
                                                                          vinfos[1].foffset = j1;
                                                                          vinfos[1].indices[0] = _ij1[0];
                                                                          vinfos[1].indices[1] = _ij1[1];
                                                                          vinfos[1].maxsolutions = _nj1;
                                                                          vinfos[2].jointtype = 17;
                                                                          vinfos[2].foffset = j2;
                                                                          vinfos[2].indices[0] = _ij2[0];
                                                                          vinfos[2].indices[1] = _ij2[1];
                                                                          vinfos[2].maxsolutions = _nj2;
                                                                          vinfos[3].jointtype = 17;
                                                                          vinfos[3].foffset = j3;
                                                                          vinfos[3].indices[0] = _ij3[0];
                                                                          vinfos[3].indices[1] = _ij3[1];
                                                                          vinfos[3].maxsolutions = _nj3;
                                                                          vinfos[4].jointtype = 1;
                                                                          vinfos[4].foffset = j4;
                                                                          vinfos[4].indices[0] = _ij4[0];
                                                                          vinfos[4].indices[1] = _ij4[1];
                                                                          vinfos[4].maxsolutions = _nj4;
                                                                          vinfos[5].jointtype = 1;
                                                                          vinfos[5].foffset = j5;
                                                                          vinfos[5].indices[0] = _ij5[0];
                                                                          vinfos[5].indices[1] = _ij5[1];
                                                                          vinfos[5].maxsolutions = _nj5;
                                                                          vinfos[6].jointtype = 1;
                                                                          vinfos[6].foffset = j6;
                                                                          vinfos[6].indices[0] = _ij6[0];
                                                                          vinfos[6].indices[1] = _ij6[1];
                                                                          vinfos[6].maxsolutions = _nj6;
                                                                          std::vector<int> vfree(0);
                                                                          solutions.AddSolution(vinfos, vfree);
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                } while (0);
                                                                if (bgotonextstatement)
                                                                {
                                                                  bool bgotonextstatement = true;
                                                                  do
                                                                  {
                                                                    evalcond[0] = IKabs(new_r12);
                                                                    evalcond[1] = new_r21;
                                                                    evalcond[2] = new_r20;
                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                                        IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                                        IKabs(evalcond[2]) < 0.0000050000000000)
                                                                    {
                                                                      bgotonextstatement = false;
                                                                      {
                                                                        IkReal j6eval[3];
                                                                        sj4 = 1.0;
                                                                        cj4 = 0;
                                                                        j4 = 1.5707963267949;
                                                                        new_r12 = 0;
                                                                        j6eval[0] = sj5;
                                                                        j6eval[1] = IKsign(sj5);
                                                                        j6eval[2] =
                                                                            ((IKabs(new_r11)) + (IKabs(new_r10)));
                                                                        if (IKabs(j6eval[0]) < 0.0000010000000000 ||
                                                                            IKabs(j6eval[1]) < 0.0000010000000000 ||
                                                                            IKabs(j6eval[2]) < 0.0000010000000000)
                                                                        {
                                                                          {
                                                                            IkReal j6eval[1];
                                                                            sj4 = 1.0;
                                                                            cj4 = 0;
                                                                            j4 = 1.5707963267949;
                                                                            new_r12 = 0;
                                                                            j6eval[0] = sj5;
                                                                            if (IKabs(j6eval[0]) < 0.0000010000000000)
                                                                            {
                                                                              {
                                                                                IkReal evalcond[3];
                                                                                bool bgotonextstatement = true;
                                                                                do
                                                                                {
                                                                                  evalcond[0] =
                                                                                      ((-3.14159265358979) +
                                                                                       (IKfmod(((3.14159265358979) +
                                                                                                (IKabs(j5))),
                                                                                               6.28318530717959)));
                                                                                  evalcond[1] = new_r11;
                                                                                  evalcond[2] = new_r10;
                                                                                  if (IKabs(evalcond[0]) <
                                                                                          0.0000050000000000 &&
                                                                                      IKabs(evalcond[1]) <
                                                                                          0.0000050000000000 &&
                                                                                      IKabs(evalcond[2]) <
                                                                                          0.0000050000000000)
                                                                                  {
                                                                                    bgotonextstatement = false;
                                                                                    {
                                                                                      IkReal j6array[1], cj6array[1],
                                                                                          sj6array[1];
                                                                                      bool j6valid[1] = { false };
                                                                                      _nj6 = 1;
                                                                                      if (IKabs(((-1.0) * new_r00)) <
                                                                                              IKFAST_ATAN2_MAGTHRESH &&
                                                                                          IKabs(((-1.0) * new_r01)) <
                                                                                              IKFAST_ATAN2_MAGTHRESH &&
                                                                                          IKabs(
                                                                                              IKsqr(((-1.0) * new_r00)) +
                                                                                              IKsqr(((-1.0) * new_r01)) -
                                                                                              1) <= IKFAST_SINCOS_THRESH)
                                                                                        continue;
                                                                                      j6array[0] =
                                                                                          IKatan2(((-1.0) * new_r00),
                                                                                                  ((-1.0) * new_r01));
                                                                                      sj6array[0] = IKsin(j6array[0]);
                                                                                      cj6array[0] = IKcos(j6array[0]);
                                                                                      if (j6array[0] > IKPI)
                                                                                      {
                                                                                        j6array[0] -= IK2PI;
                                                                                      }
                                                                                      else if (j6array[0] < -IKPI)
                                                                                      {
                                                                                        j6array[0] += IK2PI;
                                                                                      }
                                                                                      j6valid[0] = true;
                                                                                      for (int ij6 = 0; ij6 < 1; ++ij6)
                                                                                      {
                                                                                        if (!j6valid[ij6])
                                                                                        {
                                                                                          continue;
                                                                                        }
                                                                                        _ij6[0] = ij6;
                                                                                        _ij6[1] = -1;
                                                                                        for (int iij6 = ij6 + 1;
                                                                                             iij6 < 1; ++iij6)
                                                                                        {
                                                                                          if (j6valid[iij6] &&
                                                                                              IKabs(cj6array[ij6] -
                                                                                                    cj6array[iij6]) <
                                                                                                  IKFAST_SOLUTION_THRESH &&
                                                                                              IKabs(sj6array[ij6] -
                                                                                                    sj6array[iij6]) <
                                                                                                  IKFAST_SOLUTION_THRESH)
                                                                                          {
                                                                                            j6valid[iij6] = false;
                                                                                            _ij6[1] = iij6;
                                                                                            break;
                                                                                          }
                                                                                        }
                                                                                        j6 = j6array[ij6];
                                                                                        cj6 = cj6array[ij6];
                                                                                        sj6 = sj6array[ij6];
                                                                                        {
                                                                                          IkReal evalcond[4];
                                                                                          IkReal x207 = IKsin(j6);
                                                                                          IkReal x208 = IKcos(j6);
                                                                                          evalcond[0] = x207;
                                                                                          evalcond[1] = ((-1.0) * x208);
                                                                                          evalcond[2] =
                                                                                              ((((-1.0) * new_r00)) +
                                                                                               (((-1.0) * x207)));
                                                                                          evalcond[3] =
                                                                                              ((((-1.0) * new_r01)) +
                                                                                               (((-1.0) * x208)));
                                                                                          if (IKabs(evalcond[0]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[1]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[2]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[3]) >
                                                                                                  IKFAST_EVALCOND_THRESH)
                                                                                          {
                                                                                            continue;
                                                                                          }
                                                                                        }

                                                                                        {
                                                                                          std::vector<
                                                                                              IkSingleDOFSolutionBase<
                                                                                                  IkReal> >
                                                                                              vinfos(7);
                                                                                          vinfos[0].jointtype = 1;
                                                                                          vinfos[0].foffset = j0;
                                                                                          vinfos[0].indices[0] =
                                                                                              _ij0[0];
                                                                                          vinfos[0].indices[1] =
                                                                                              _ij0[1];
                                                                                          vinfos[0].maxsolutions = _nj0;
                                                                                          vinfos[1].jointtype = 17;
                                                                                          vinfos[1].foffset = j1;
                                                                                          vinfos[1].indices[0] =
                                                                                              _ij1[0];
                                                                                          vinfos[1].indices[1] =
                                                                                              _ij1[1];
                                                                                          vinfos[1].maxsolutions = _nj1;
                                                                                          vinfos[2].jointtype = 17;
                                                                                          vinfos[2].foffset = j2;
                                                                                          vinfos[2].indices[0] =
                                                                                              _ij2[0];
                                                                                          vinfos[2].indices[1] =
                                                                                              _ij2[1];
                                                                                          vinfos[2].maxsolutions = _nj2;
                                                                                          vinfos[3].jointtype = 17;
                                                                                          vinfos[3].foffset = j3;
                                                                                          vinfos[3].indices[0] =
                                                                                              _ij3[0];
                                                                                          vinfos[3].indices[1] =
                                                                                              _ij3[1];
                                                                                          vinfos[3].maxsolutions = _nj3;
                                                                                          vinfos[4].jointtype = 1;
                                                                                          vinfos[4].foffset = j4;
                                                                                          vinfos[4].indices[0] =
                                                                                              _ij4[0];
                                                                                          vinfos[4].indices[1] =
                                                                                              _ij4[1];
                                                                                          vinfos[4].maxsolutions = _nj4;
                                                                                          vinfos[5].jointtype = 1;
                                                                                          vinfos[5].foffset = j5;
                                                                                          vinfos[5].indices[0] =
                                                                                              _ij5[0];
                                                                                          vinfos[5].indices[1] =
                                                                                              _ij5[1];
                                                                                          vinfos[5].maxsolutions = _nj5;
                                                                                          vinfos[6].jointtype = 1;
                                                                                          vinfos[6].foffset = j6;
                                                                                          vinfos[6].indices[0] =
                                                                                              _ij6[0];
                                                                                          vinfos[6].indices[1] =
                                                                                              _ij6[1];
                                                                                          vinfos[6].maxsolutions = _nj6;
                                                                                          std::vector<int> vfree(0);
                                                                                          solutions.AddSolution(vinfos,
                                                                                                                vfree);
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                } while (0);
                                                                                if (bgotonextstatement)
                                                                                {
                                                                                  bool bgotonextstatement = true;
                                                                                  do
                                                                                  {
                                                                                    evalcond[0] =
                                                                                        ((-3.14159265358979) +
                                                                                         (IKfmod(
                                                                                             ((3.14159265358979) +
                                                                                              (IKabs(
                                                                                                  ((-3.14159265358979) +
                                                                                                   j5)))),
                                                                                             6.28318530717959)));
                                                                                    evalcond[1] = new_r11;
                                                                                    evalcond[2] = new_r10;
                                                                                    if (IKabs(evalcond[0]) <
                                                                                            0.0000050000000000 &&
                                                                                        IKabs(evalcond[1]) <
                                                                                            0.0000050000000000 &&
                                                                                        IKabs(evalcond[2]) <
                                                                                            0.0000050000000000)
                                                                                    {
                                                                                      bgotonextstatement = false;
                                                                                      {
                                                                                        IkReal j6array[1], cj6array[1],
                                                                                            sj6array[1];
                                                                                        bool j6valid[1] = { false };
                                                                                        _nj6 = 1;
                                                                                        if (IKabs(((-1.0) * new_r00)) <
                                                                                                IKFAST_ATAN2_MAGTHRESH &&
                                                                                            IKabs(((-1.0) * new_r01)) <
                                                                                                IKFAST_ATAN2_MAGTHRESH &&
                                                                                            IKabs(IKsqr(((-1.0) *
                                                                                                         new_r00)) +
                                                                                                  IKsqr(((-1.0) *
                                                                                                         new_r01)) -
                                                                                                  1) <=
                                                                                                IKFAST_SINCOS_THRESH)
                                                                                          continue;
                                                                                        j6array[0] =
                                                                                            IKatan2(((-1.0) * new_r00),
                                                                                                    ((-1.0) * new_r01));
                                                                                        sj6array[0] = IKsin(j6array[0]);
                                                                                        cj6array[0] = IKcos(j6array[0]);
                                                                                        if (j6array[0] > IKPI)
                                                                                        {
                                                                                          j6array[0] -= IK2PI;
                                                                                        }
                                                                                        else if (j6array[0] < -IKPI)
                                                                                        {
                                                                                          j6array[0] += IK2PI;
                                                                                        }
                                                                                        j6valid[0] = true;
                                                                                        for (int ij6 = 0; ij6 < 1; ++ij6)
                                                                                        {
                                                                                          if (!j6valid[ij6])
                                                                                          {
                                                                                            continue;
                                                                                          }
                                                                                          _ij6[0] = ij6;
                                                                                          _ij6[1] = -1;
                                                                                          for (int iij6 = ij6 + 1;
                                                                                               iij6 < 1; ++iij6)
                                                                                          {
                                                                                            if (j6valid[iij6] &&
                                                                                                IKabs(cj6array[ij6] -
                                                                                                      cj6array[iij6]) <
                                                                                                    IKFAST_SOLUTION_THRESH &&
                                                                                                IKabs(sj6array[ij6] -
                                                                                                      sj6array[iij6]) <
                                                                                                    IKFAST_SOLUTION_THRESH)
                                                                                            {
                                                                                              j6valid[iij6] = false;
                                                                                              _ij6[1] = iij6;
                                                                                              break;
                                                                                            }
                                                                                          }
                                                                                          j6 = j6array[ij6];
                                                                                          cj6 = cj6array[ij6];
                                                                                          sj6 = sj6array[ij6];
                                                                                          {
                                                                                            IkReal evalcond[4];
                                                                                            IkReal x209 = IKsin(j6);
                                                                                            IkReal x210 = IKcos(j6);
                                                                                            evalcond[0] = x209;
                                                                                            evalcond[1] =
                                                                                                ((-1.0) * x210);
                                                                                            evalcond[2] =
                                                                                                ((((-1.0) * new_r00)) +
                                                                                                 (((-1.0) * x209)));
                                                                                            evalcond[3] =
                                                                                                ((((-1.0) * x210)) +
                                                                                                 (((-1.0) * new_r01)));
                                                                                            if (IKabs(evalcond[0]) >
                                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                                IKabs(evalcond[1]) >
                                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                                IKabs(evalcond[2]) >
                                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                                IKabs(evalcond[3]) >
                                                                                                    IKFAST_EVALCOND_THRESH)
                                                                                            {
                                                                                              continue;
                                                                                            }
                                                                                          }

                                                                                          {
                                                                                            std::vector<
                                                                                                IkSingleDOFSolutionBase<
                                                                                                    IkReal> >
                                                                                                vinfos(7);
                                                                                            vinfos[0].jointtype = 1;
                                                                                            vinfos[0].foffset = j0;
                                                                                            vinfos[0].indices[0] =
                                                                                                _ij0[0];
                                                                                            vinfos[0].indices[1] =
                                                                                                _ij0[1];
                                                                                            vinfos[0].maxsolutions =
                                                                                                _nj0;
                                                                                            vinfos[1].jointtype = 17;
                                                                                            vinfos[1].foffset = j1;
                                                                                            vinfos[1].indices[0] =
                                                                                                _ij1[0];
                                                                                            vinfos[1].indices[1] =
                                                                                                _ij1[1];
                                                                                            vinfos[1].maxsolutions =
                                                                                                _nj1;
                                                                                            vinfos[2].jointtype = 17;
                                                                                            vinfos[2].foffset = j2;
                                                                                            vinfos[2].indices[0] =
                                                                                                _ij2[0];
                                                                                            vinfos[2].indices[1] =
                                                                                                _ij2[1];
                                                                                            vinfos[2].maxsolutions =
                                                                                                _nj2;
                                                                                            vinfos[3].jointtype = 17;
                                                                                            vinfos[3].foffset = j3;
                                                                                            vinfos[3].indices[0] =
                                                                                                _ij3[0];
                                                                                            vinfos[3].indices[1] =
                                                                                                _ij3[1];
                                                                                            vinfos[3].maxsolutions =
                                                                                                _nj3;
                                                                                            vinfos[4].jointtype = 1;
                                                                                            vinfos[4].foffset = j4;
                                                                                            vinfos[4].indices[0] =
                                                                                                _ij4[0];
                                                                                            vinfos[4].indices[1] =
                                                                                                _ij4[1];
                                                                                            vinfos[4].maxsolutions =
                                                                                                _nj4;
                                                                                            vinfos[5].jointtype = 1;
                                                                                            vinfos[5].foffset = j5;
                                                                                            vinfos[5].indices[0] =
                                                                                                _ij5[0];
                                                                                            vinfos[5].indices[1] =
                                                                                                _ij5[1];
                                                                                            vinfos[5].maxsolutions =
                                                                                                _nj5;
                                                                                            vinfos[6].jointtype = 1;
                                                                                            vinfos[6].foffset = j6;
                                                                                            vinfos[6].indices[0] =
                                                                                                _ij6[0];
                                                                                            vinfos[6].indices[1] =
                                                                                                _ij6[1];
                                                                                            vinfos[6].maxsolutions =
                                                                                                _nj6;
                                                                                            std::vector<int> vfree(0);
                                                                                            solutions.AddSolution(
                                                                                                vinfos, vfree);
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  } while (0);
                                                                                  if (bgotonextstatement)
                                                                                  {
                                                                                    bool bgotonextstatement = true;
                                                                                    do
                                                                                    {
                                                                                      evalcond[0] = ((IKabs(new_r11)) +
                                                                                                     (IKabs(new_r10)));
                                                                                      if (IKabs(evalcond[0]) <
                                                                                          0.0000050000000000)
                                                                                      {
                                                                                        bgotonextstatement = false;
                                                                                        {
                                                                                          IkReal j6array[1],
                                                                                              cj6array[1], sj6array[1];
                                                                                          bool j6valid[1] = { false };
                                                                                          _nj6 = 1;
                                                                                          if (IKabs(((-1.0) * new_r00)) <
                                                                                                  IKFAST_ATAN2_MAGTHRESH &&
                                                                                              IKabs(((-1.0) * new_r01)) <
                                                                                                  IKFAST_ATAN2_MAGTHRESH &&
                                                                                              IKabs(IKsqr(((-1.0) *
                                                                                                           new_r00)) +
                                                                                                    IKsqr(((-1.0) *
                                                                                                           new_r01)) -
                                                                                                    1) <=
                                                                                                  IKFAST_SINCOS_THRESH)
                                                                                            continue;
                                                                                          j6array[0] = IKatan2(
                                                                                              ((-1.0) * new_r00),
                                                                                              ((-1.0) * new_r01));
                                                                                          sj6array[0] =
                                                                                              IKsin(j6array[0]);
                                                                                          cj6array[0] =
                                                                                              IKcos(j6array[0]);
                                                                                          if (j6array[0] > IKPI)
                                                                                          {
                                                                                            j6array[0] -= IK2PI;
                                                                                          }
                                                                                          else if (j6array[0] < -IKPI)
                                                                                          {
                                                                                            j6array[0] += IK2PI;
                                                                                          }
                                                                                          j6valid[0] = true;
                                                                                          for (int ij6 = 0; ij6 < 1;
                                                                                               ++ij6)
                                                                                          {
                                                                                            if (!j6valid[ij6])
                                                                                            {
                                                                                              continue;
                                                                                            }
                                                                                            _ij6[0] = ij6;
                                                                                            _ij6[1] = -1;
                                                                                            for (int iij6 = ij6 + 1;
                                                                                                 iij6 < 1; ++iij6)
                                                                                            {
                                                                                              if (j6valid[iij6] &&
                                                                                                  IKabs(cj6array[ij6] -
                                                                                                        cj6array[iij6]) <
                                                                                                      IKFAST_SOLUTION_THRESH &&
                                                                                                  IKabs(sj6array[ij6] -
                                                                                                        sj6array[iij6]) <
                                                                                                      IKFAST_SOLUTION_THRESH)
                                                                                              {
                                                                                                j6valid[iij6] = false;
                                                                                                _ij6[1] = iij6;
                                                                                                break;
                                                                                              }
                                                                                            }
                                                                                            j6 = j6array[ij6];
                                                                                            cj6 = cj6array[ij6];
                                                                                            sj6 = sj6array[ij6];
                                                                                            {
                                                                                              IkReal evalcond[6];
                                                                                              IkReal x211 = IKsin(j6);
                                                                                              IkReal x212 = IKcos(j6);
                                                                                              IkReal x213 =
                                                                                                  ((-1.0) * x212);
                                                                                              evalcond[0] = x211;
                                                                                              evalcond[1] =
                                                                                                  (sj5 * x211);
                                                                                              evalcond[2] = x213;
                                                                                              evalcond[3] =
                                                                                                  (sj5 * x213);
                                                                                              evalcond[4] =
                                                                                                  ((((-1.0) * x211)) +
                                                                                                   (((-1.0) * new_r00)));
                                                                                              evalcond[5] =
                                                                                                  ((((-1.0) * x212)) +
                                                                                                   (((-1.0) * new_r01)));
                                                                                              if (IKabs(evalcond[0]) >
                                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                                  IKabs(evalcond[1]) >
                                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                                  IKabs(evalcond[2]) >
                                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                                  IKabs(evalcond[3]) >
                                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                                  IKabs(evalcond[4]) >
                                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                                  IKabs(evalcond[5]) >
                                                                                                      IKFAST_EVALCOND_THRESH)
                                                                                              {
                                                                                                continue;
                                                                                              }
                                                                                            }

                                                                                            {
                                                                                              std::vector<
                                                                                                  IkSingleDOFSolutionBase<
                                                                                                      IkReal> >
                                                                                                  vinfos(7);
                                                                                              vinfos[0].jointtype = 1;
                                                                                              vinfos[0].foffset = j0;
                                                                                              vinfos[0].indices[0] =
                                                                                                  _ij0[0];
                                                                                              vinfos[0].indices[1] =
                                                                                                  _ij0[1];
                                                                                              vinfos[0].maxsolutions =
                                                                                                  _nj0;
                                                                                              vinfos[1].jointtype = 17;
                                                                                              vinfos[1].foffset = j1;
                                                                                              vinfos[1].indices[0] =
                                                                                                  _ij1[0];
                                                                                              vinfos[1].indices[1] =
                                                                                                  _ij1[1];
                                                                                              vinfos[1].maxsolutions =
                                                                                                  _nj1;
                                                                                              vinfos[2].jointtype = 17;
                                                                                              vinfos[2].foffset = j2;
                                                                                              vinfos[2].indices[0] =
                                                                                                  _ij2[0];
                                                                                              vinfos[2].indices[1] =
                                                                                                  _ij2[1];
                                                                                              vinfos[2].maxsolutions =
                                                                                                  _nj2;
                                                                                              vinfos[3].jointtype = 17;
                                                                                              vinfos[3].foffset = j3;
                                                                                              vinfos[3].indices[0] =
                                                                                                  _ij3[0];
                                                                                              vinfos[3].indices[1] =
                                                                                                  _ij3[1];
                                                                                              vinfos[3].maxsolutions =
                                                                                                  _nj3;
                                                                                              vinfos[4].jointtype = 1;
                                                                                              vinfos[4].foffset = j4;
                                                                                              vinfos[4].indices[0] =
                                                                                                  _ij4[0];
                                                                                              vinfos[4].indices[1] =
                                                                                                  _ij4[1];
                                                                                              vinfos[4].maxsolutions =
                                                                                                  _nj4;
                                                                                              vinfos[5].jointtype = 1;
                                                                                              vinfos[5].foffset = j5;
                                                                                              vinfos[5].indices[0] =
                                                                                                  _ij5[0];
                                                                                              vinfos[5].indices[1] =
                                                                                                  _ij5[1];
                                                                                              vinfos[5].maxsolutions =
                                                                                                  _nj5;
                                                                                              vinfos[6].jointtype = 1;
                                                                                              vinfos[6].foffset = j6;
                                                                                              vinfos[6].indices[0] =
                                                                                                  _ij6[0];
                                                                                              vinfos[6].indices[1] =
                                                                                                  _ij6[1];
                                                                                              vinfos[6].maxsolutions =
                                                                                                  _nj6;
                                                                                              std::vector<int> vfree(0);
                                                                                              solutions.AddSolution(
                                                                                                  vinfos, vfree);
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    } while (0);
                                                                                    if (bgotonextstatement)
                                                                                    {
                                                                                      bool bgotonextstatement = true;
                                                                                      do
                                                                                      {
                                                                                        if (1)
                                                                                        {
                                                                                          bgotonextstatement = false;
                                                                                          continue;  // branch miss [j6]
                                                                                        }
                                                                                      } while (0);
                                                                                      if (bgotonextstatement) {}
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                            else
                                                                            {
                                                                              {
                                                                                IkReal j6array[1], cj6array[1],
                                                                                    sj6array[1];
                                                                                bool j6valid[1] = { false };
                                                                                _nj6 = 1;
                                                                                CheckValue<IkReal> x214 =
                                                                                    IKPowWithIntegerCheck(sj5, -1);
                                                                                if (!x214.valid)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                                if (IKabs(((-1.0) * new_r11 * sj5)) <
                                                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                                                    IKabs((new_r10 * (x214.value))) <
                                                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                                                    IKabs(
                                                                                        IKsqr(((-1.0) * new_r11 * sj5)) +
                                                                                        IKsqr((new_r10 * (x214.value))) -
                                                                                        1) <= IKFAST_SINCOS_THRESH)
                                                                                  continue;
                                                                                j6array[0] =
                                                                                    IKatan2(((-1.0) * new_r11 * sj5),
                                                                                            (new_r10 * (x214.value)));
                                                                                sj6array[0] = IKsin(j6array[0]);
                                                                                cj6array[0] = IKcos(j6array[0]);
                                                                                if (j6array[0] > IKPI)
                                                                                {
                                                                                  j6array[0] -= IK2PI;
                                                                                }
                                                                                else if (j6array[0] < -IKPI)
                                                                                {
                                                                                  j6array[0] += IK2PI;
                                                                                }
                                                                                j6valid[0] = true;
                                                                                for (int ij6 = 0; ij6 < 1; ++ij6)
                                                                                {
                                                                                  if (!j6valid[ij6])
                                                                                  {
                                                                                    continue;
                                                                                  }
                                                                                  _ij6[0] = ij6;
                                                                                  _ij6[1] = -1;
                                                                                  for (int iij6 = ij6 + 1; iij6 < 1;
                                                                                       ++iij6)
                                                                                  {
                                                                                    if (j6valid[iij6] &&
                                                                                        IKabs(cj6array[ij6] -
                                                                                              cj6array[iij6]) <
                                                                                            IKFAST_SOLUTION_THRESH &&
                                                                                        IKabs(sj6array[ij6] -
                                                                                              sj6array[iij6]) <
                                                                                            IKFAST_SOLUTION_THRESH)
                                                                                    {
                                                                                      j6valid[iij6] = false;
                                                                                      _ij6[1] = iij6;
                                                                                      break;
                                                                                    }
                                                                                  }
                                                                                  j6 = j6array[ij6];
                                                                                  cj6 = cj6array[ij6];
                                                                                  sj6 = sj6array[ij6];
                                                                                  {
                                                                                    IkReal evalcond[6];
                                                                                    IkReal x215 = IKsin(j6);
                                                                                    IkReal x216 = IKcos(j6);
                                                                                    IkReal x217 = ((1.0) * x216);
                                                                                    evalcond[0] =
                                                                                        (((sj5 * x215)) + new_r11);
                                                                                    evalcond[1] =
                                                                                        (((new_r11 * sj5)) + x215);
                                                                                    evalcond[2] =
                                                                                        ((((-1.0) * sj5 * x217)) +
                                                                                         new_r10);
                                                                                    evalcond[3] =
                                                                                        ((((-1.0) * x215)) +
                                                                                         (((-1.0) * new_r00)));
                                                                                    evalcond[4] =
                                                                                        ((((-1.0) * new_r01)) +
                                                                                         (((-1.0) * x217)));
                                                                                    evalcond[5] = (((new_r10 * sj5)) +
                                                                                                   (((-1.0) * x217)));
                                                                                    if (IKabs(evalcond[0]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[1]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[2]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[3]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[4]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[5]) >
                                                                                            IKFAST_EVALCOND_THRESH)
                                                                                    {
                                                                                      continue;
                                                                                    }
                                                                                  }

                                                                                  {
                                                                                    std::vector<
                                                                                        IkSingleDOFSolutionBase<IkReal> >
                                                                                        vinfos(7);
                                                                                    vinfos[0].jointtype = 1;
                                                                                    vinfos[0].foffset = j0;
                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                    vinfos[1].jointtype = 17;
                                                                                    vinfos[1].foffset = j1;
                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                    vinfos[2].jointtype = 17;
                                                                                    vinfos[2].foffset = j2;
                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                    vinfos[3].jointtype = 17;
                                                                                    vinfos[3].foffset = j3;
                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                    vinfos[4].jointtype = 1;
                                                                                    vinfos[4].foffset = j4;
                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                    vinfos[5].jointtype = 1;
                                                                                    vinfos[5].foffset = j5;
                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                    vinfos[6].jointtype = 1;
                                                                                    vinfos[6].foffset = j6;
                                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                                    vinfos[6].maxsolutions = _nj6;
                                                                                    std::vector<int> vfree(0);
                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                        else
                                                                        {
                                                                          {
                                                                            IkReal j6array[1], cj6array[1], sj6array[1];
                                                                            bool j6valid[1] = { false };
                                                                            _nj6 = 1;
                                                                            CheckValue<IkReal> x218 =
                                                                                IKPowWithIntegerCheck(IKsign(sj5), -1);
                                                                            if (!x218.valid)
                                                                            {
                                                                              continue;
                                                                            }
                                                                            CheckValue<IkReal> x219 = IKatan2WithCheck(
                                                                                IkReal(((-1.0) * new_r11)),
                                                                                IkReal(new_r10),
                                                                                IKFAST_ATAN2_MAGTHRESH);
                                                                            if (!x219.valid)
                                                                            {
                                                                              continue;
                                                                            }
                                                                            j6array[0] =
                                                                                ((-1.5707963267949) +
                                                                                 (((1.5707963267949) * (x218.value))) +
                                                                                 (x219.value));
                                                                            sj6array[0] = IKsin(j6array[0]);
                                                                            cj6array[0] = IKcos(j6array[0]);
                                                                            if (j6array[0] > IKPI)
                                                                            {
                                                                              j6array[0] -= IK2PI;
                                                                            }
                                                                            else if (j6array[0] < -IKPI)
                                                                            {
                                                                              j6array[0] += IK2PI;
                                                                            }
                                                                            j6valid[0] = true;
                                                                            for (int ij6 = 0; ij6 < 1; ++ij6)
                                                                            {
                                                                              if (!j6valid[ij6])
                                                                              {
                                                                                continue;
                                                                              }
                                                                              _ij6[0] = ij6;
                                                                              _ij6[1] = -1;
                                                                              for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                                              {
                                                                                if (j6valid[iij6] &&
                                                                                    IKabs(cj6array[ij6] -
                                                                                          cj6array[iij6]) <
                                                                                        IKFAST_SOLUTION_THRESH &&
                                                                                    IKabs(sj6array[ij6] -
                                                                                          sj6array[iij6]) <
                                                                                        IKFAST_SOLUTION_THRESH)
                                                                                {
                                                                                  j6valid[iij6] = false;
                                                                                  _ij6[1] = iij6;
                                                                                  break;
                                                                                }
                                                                              }
                                                                              j6 = j6array[ij6];
                                                                              cj6 = cj6array[ij6];
                                                                              sj6 = sj6array[ij6];
                                                                              {
                                                                                IkReal evalcond[6];
                                                                                IkReal x220 = IKsin(j6);
                                                                                IkReal x221 = IKcos(j6);
                                                                                IkReal x222 = ((1.0) * x221);
                                                                                evalcond[0] =
                                                                                    (((sj5 * x220)) + new_r11);
                                                                                evalcond[1] =
                                                                                    (((new_r11 * sj5)) + x220);
                                                                                evalcond[2] =
                                                                                    ((((-1.0) * sj5 * x222)) + new_r10);
                                                                                evalcond[3] = ((((-1.0) * new_r00)) +
                                                                                               (((-1.0) * x220)));
                                                                                evalcond[4] = ((((-1.0) * new_r01)) +
                                                                                               (((-1.0) * x222)));
                                                                                evalcond[5] = (((new_r10 * sj5)) +
                                                                                               (((-1.0) * x222)));
                                                                                if (IKabs(evalcond[0]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[1]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[2]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[3]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[4]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[5]) >
                                                                                        IKFAST_EVALCOND_THRESH)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                              }

                                                                              {
                                                                                std::vector<
                                                                                    IkSingleDOFSolutionBase<IkReal> >
                                                                                    vinfos(7);
                                                                                vinfos[0].jointtype = 1;
                                                                                vinfos[0].foffset = j0;
                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                vinfos[1].jointtype = 17;
                                                                                vinfos[1].foffset = j1;
                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                vinfos[2].jointtype = 17;
                                                                                vinfos[2].foffset = j2;
                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                vinfos[3].jointtype = 17;
                                                                                vinfos[3].foffset = j3;
                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                vinfos[4].jointtype = 1;
                                                                                vinfos[4].foffset = j4;
                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                vinfos[5].jointtype = 1;
                                                                                vinfos[5].foffset = j5;
                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                vinfos[6].jointtype = 1;
                                                                                vinfos[6].foffset = j6;
                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                std::vector<int> vfree(0);
                                                                                solutions.AddSolution(vinfos, vfree);
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  } while (0);
                                                                  if (bgotonextstatement)
                                                                  {
                                                                    bool bgotonextstatement = true;
                                                                    do
                                                                    {
                                                                      evalcond[0] =
                                                                          ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                                      if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                      {
                                                                        bgotonextstatement = false;
                                                                        {
                                                                          IkReal j6array[1], cj6array[1], sj6array[1];
                                                                          bool j6valid[1] = { false };
                                                                          _nj6 = 1;
                                                                          if (IKabs(((-1.0) * new_r00)) <
                                                                                  IKFAST_ATAN2_MAGTHRESH &&
                                                                              IKabs(((-1.0) * new_r01)) <
                                                                                  IKFAST_ATAN2_MAGTHRESH &&
                                                                              IKabs(IKsqr(((-1.0) * new_r00)) +
                                                                                    IKsqr(((-1.0) * new_r01)) - 1) <=
                                                                                  IKFAST_SINCOS_THRESH)
                                                                            continue;
                                                                          j6array[0] = IKatan2(((-1.0) * new_r00),
                                                                                               ((-1.0) * new_r01));
                                                                          sj6array[0] = IKsin(j6array[0]);
                                                                          cj6array[0] = IKcos(j6array[0]);
                                                                          if (j6array[0] > IKPI)
                                                                          {
                                                                            j6array[0] -= IK2PI;
                                                                          }
                                                                          else if (j6array[0] < -IKPI)
                                                                          {
                                                                            j6array[0] += IK2PI;
                                                                          }
                                                                          j6valid[0] = true;
                                                                          for (int ij6 = 0; ij6 < 1; ++ij6)
                                                                          {
                                                                            if (!j6valid[ij6])
                                                                            {
                                                                              continue;
                                                                            }
                                                                            _ij6[0] = ij6;
                                                                            _ij6[1] = -1;
                                                                            for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                                            {
                                                                              if (j6valid[iij6] &&
                                                                                  IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                                      IKFAST_SOLUTION_THRESH &&
                                                                                  IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                                      IKFAST_SOLUTION_THRESH)
                                                                              {
                                                                                j6valid[iij6] = false;
                                                                                _ij6[1] = iij6;
                                                                                break;
                                                                              }
                                                                            }
                                                                            j6 = j6array[ij6];
                                                                            cj6 = cj6array[ij6];
                                                                            sj6 = sj6array[ij6];
                                                                            {
                                                                              IkReal evalcond[6];
                                                                              IkReal x223 = IKsin(j6);
                                                                              IkReal x224 = IKcos(j6);
                                                                              IkReal x225 = ((-1.0) * x224);
                                                                              evalcond[0] = x223;
                                                                              evalcond[1] = (new_r22 * x223);
                                                                              evalcond[2] = x225;
                                                                              evalcond[3] = (new_r22 * x225);
                                                                              evalcond[4] = ((((-1.0) * new_r00)) +
                                                                                             (((-1.0) * x223)));
                                                                              evalcond[5] = ((((-1.0) * new_r01)) +
                                                                                             (((-1.0) * x224)));
                                                                              if (IKabs(evalcond[0]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[1]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[2]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[3]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[4]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[5]) >
                                                                                      IKFAST_EVALCOND_THRESH)
                                                                              {
                                                                                continue;
                                                                              }
                                                                            }

                                                                            {
                                                                              std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                                  vinfos(7);
                                                                              vinfos[0].jointtype = 1;
                                                                              vinfos[0].foffset = j0;
                                                                              vinfos[0].indices[0] = _ij0[0];
                                                                              vinfos[0].indices[1] = _ij0[1];
                                                                              vinfos[0].maxsolutions = _nj0;
                                                                              vinfos[1].jointtype = 17;
                                                                              vinfos[1].foffset = j1;
                                                                              vinfos[1].indices[0] = _ij1[0];
                                                                              vinfos[1].indices[1] = _ij1[1];
                                                                              vinfos[1].maxsolutions = _nj1;
                                                                              vinfos[2].jointtype = 17;
                                                                              vinfos[2].foffset = j2;
                                                                              vinfos[2].indices[0] = _ij2[0];
                                                                              vinfos[2].indices[1] = _ij2[1];
                                                                              vinfos[2].maxsolutions = _nj2;
                                                                              vinfos[3].jointtype = 17;
                                                                              vinfos[3].foffset = j3;
                                                                              vinfos[3].indices[0] = _ij3[0];
                                                                              vinfos[3].indices[1] = _ij3[1];
                                                                              vinfos[3].maxsolutions = _nj3;
                                                                              vinfos[4].jointtype = 1;
                                                                              vinfos[4].foffset = j4;
                                                                              vinfos[4].indices[0] = _ij4[0];
                                                                              vinfos[4].indices[1] = _ij4[1];
                                                                              vinfos[4].maxsolutions = _nj4;
                                                                              vinfos[5].jointtype = 1;
                                                                              vinfos[5].foffset = j5;
                                                                              vinfos[5].indices[0] = _ij5[0];
                                                                              vinfos[5].indices[1] = _ij5[1];
                                                                              vinfos[5].maxsolutions = _nj5;
                                                                              vinfos[6].jointtype = 1;
                                                                              vinfos[6].foffset = j6;
                                                                              vinfos[6].indices[0] = _ij6[0];
                                                                              vinfos[6].indices[1] = _ij6[1];
                                                                              vinfos[6].maxsolutions = _nj6;
                                                                              std::vector<int> vfree(0);
                                                                              solutions.AddSolution(vinfos, vfree);
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    } while (0);
                                                                    if (bgotonextstatement)
                                                                    {
                                                                      bool bgotonextstatement = true;
                                                                      do
                                                                      {
                                                                        if (1)
                                                                        {
                                                                          bgotonextstatement = false;
                                                                          continue;  // branch miss [j6]
                                                                        }
                                                                      } while (0);
                                                                      if (bgotonextstatement) {}
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                          else
                                                          {
                                                            {
                                                              IkReal j6array[1], cj6array[1], sj6array[1];
                                                              bool j6valid[1] = { false };
                                                              _nj6 = 1;
                                                              CheckValue<IkReal> x226 =
                                                                  IKPowWithIntegerCheck(new_r12, -1);
                                                              if (!x226.valid)
                                                              {
                                                                continue;
                                                              }
                                                              if (IKabs(((-1.0) * new_r00)) < IKFAST_ATAN2_MAGTHRESH &&
                                                                  IKabs(((-1.0) * new_r20 * (x226.value))) <
                                                                      IKFAST_ATAN2_MAGTHRESH &&
                                                                  IKabs(IKsqr(((-1.0) * new_r00)) +
                                                                        IKsqr(((-1.0) * new_r20 * (x226.value))) - 1) <=
                                                                      IKFAST_SINCOS_THRESH)
                                                                continue;
                                                              j6array[0] = IKatan2(((-1.0) * new_r00),
                                                                                   ((-1.0) * new_r20 * (x226.value)));
                                                              sj6array[0] = IKsin(j6array[0]);
                                                              cj6array[0] = IKcos(j6array[0]);
                                                              if (j6array[0] > IKPI)
                                                              {
                                                                j6array[0] -= IK2PI;
                                                              }
                                                              else if (j6array[0] < -IKPI)
                                                              {
                                                                j6array[0] += IK2PI;
                                                              }
                                                              j6valid[0] = true;
                                                              for (int ij6 = 0; ij6 < 1; ++ij6)
                                                              {
                                                                if (!j6valid[ij6])
                                                                {
                                                                  continue;
                                                                }
                                                                _ij6[0] = ij6;
                                                                _ij6[1] = -1;
                                                                for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                                {
                                                                  if (j6valid[iij6] &&
                                                                      IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                          IKFAST_SOLUTION_THRESH &&
                                                                      IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                          IKFAST_SOLUTION_THRESH)
                                                                  {
                                                                    j6valid[iij6] = false;
                                                                    _ij6[1] = iij6;
                                                                    break;
                                                                  }
                                                                }
                                                                j6 = j6array[ij6];
                                                                cj6 = cj6array[ij6];
                                                                sj6 = sj6array[ij6];
                                                                {
                                                                  IkReal evalcond[8];
                                                                  IkReal x227 = IKsin(j6);
                                                                  IkReal x228 = IKcos(j6);
                                                                  IkReal x229 = ((1.0) * x228);
                                                                  IkReal x230 = ((1.0) * x227);
                                                                  evalcond[0] = (((new_r12 * x228)) + new_r20);
                                                                  evalcond[1] = (((sj5 * x227)) + new_r11);
                                                                  evalcond[2] = ((((-1.0) * new_r12 * x230)) + new_r21);
                                                                  evalcond[3] = ((((-1.0) * sj5 * x229)) + new_r10);
                                                                  evalcond[4] =
                                                                      ((((-1.0) * x230)) + (((-1.0) * new_r00)));
                                                                  evalcond[5] =
                                                                      ((((-1.0) * new_r01)) + (((-1.0) * x229)));
                                                                  evalcond[6] =
                                                                      (((new_r11 * sj5)) + ((cj5 * new_r21)) + x227);
                                                                  evalcond[7] = (((new_r10 * sj5)) + ((cj5 * new_r20)) +
                                                                                 (((-1.0) * x229)));
                                                                  if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                  {
                                                                    continue;
                                                                  }
                                                                }

                                                                {
                                                                  std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(
                                                                      7);
                                                                  vinfos[0].jointtype = 1;
                                                                  vinfos[0].foffset = j0;
                                                                  vinfos[0].indices[0] = _ij0[0];
                                                                  vinfos[0].indices[1] = _ij0[1];
                                                                  vinfos[0].maxsolutions = _nj0;
                                                                  vinfos[1].jointtype = 17;
                                                                  vinfos[1].foffset = j1;
                                                                  vinfos[1].indices[0] = _ij1[0];
                                                                  vinfos[1].indices[1] = _ij1[1];
                                                                  vinfos[1].maxsolutions = _nj1;
                                                                  vinfos[2].jointtype = 17;
                                                                  vinfos[2].foffset = j2;
                                                                  vinfos[2].indices[0] = _ij2[0];
                                                                  vinfos[2].indices[1] = _ij2[1];
                                                                  vinfos[2].maxsolutions = _nj2;
                                                                  vinfos[3].jointtype = 17;
                                                                  vinfos[3].foffset = j3;
                                                                  vinfos[3].indices[0] = _ij3[0];
                                                                  vinfos[3].indices[1] = _ij3[1];
                                                                  vinfos[3].maxsolutions = _nj3;
                                                                  vinfos[4].jointtype = 1;
                                                                  vinfos[4].foffset = j4;
                                                                  vinfos[4].indices[0] = _ij4[0];
                                                                  vinfos[4].indices[1] = _ij4[1];
                                                                  vinfos[4].maxsolutions = _nj4;
                                                                  vinfos[5].jointtype = 1;
                                                                  vinfos[5].foffset = j5;
                                                                  vinfos[5].indices[0] = _ij5[0];
                                                                  vinfos[5].indices[1] = _ij5[1];
                                                                  vinfos[5].maxsolutions = _nj5;
                                                                  vinfos[6].jointtype = 1;
                                                                  vinfos[6].foffset = j6;
                                                                  vinfos[6].indices[0] = _ij6[0];
                                                                  vinfos[6].indices[1] = _ij6[1];
                                                                  vinfos[6].maxsolutions = _nj6;
                                                                  std::vector<int> vfree(0);
                                                                  solutions.AddSolution(vinfos, vfree);
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                      else
                                                      {
                                                        {
                                                          IkReal j6array[1], cj6array[1], sj6array[1];
                                                          bool j6valid[1] = { false };
                                                          _nj6 = 1;
                                                          CheckValue<IkReal> x231 =
                                                              IKPowWithIntegerCheck(IKsign(sj5), -1);
                                                          if (!x231.valid)
                                                          {
                                                            continue;
                                                          }
                                                          CheckValue<IkReal> x232 =
                                                              IKatan2WithCheck(IkReal(((-1.0) * new_r11)),
                                                                               IkReal(new_r10), IKFAST_ATAN2_MAGTHRESH);
                                                          if (!x232.valid)
                                                          {
                                                            continue;
                                                          }
                                                          j6array[0] =
                                                              ((-1.5707963267949) +
                                                               (((1.5707963267949) * (x231.value))) + (x232.value));
                                                          sj6array[0] = IKsin(j6array[0]);
                                                          cj6array[0] = IKcos(j6array[0]);
                                                          if (j6array[0] > IKPI)
                                                          {
                                                            j6array[0] -= IK2PI;
                                                          }
                                                          else if (j6array[0] < -IKPI)
                                                          {
                                                            j6array[0] += IK2PI;
                                                          }
                                                          j6valid[0] = true;
                                                          for (int ij6 = 0; ij6 < 1; ++ij6)
                                                          {
                                                            if (!j6valid[ij6])
                                                            {
                                                              continue;
                                                            }
                                                            _ij6[0] = ij6;
                                                            _ij6[1] = -1;
                                                            for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                            {
                                                              if (j6valid[iij6] &&
                                                                  IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                      IKFAST_SOLUTION_THRESH &&
                                                                  IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                      IKFAST_SOLUTION_THRESH)
                                                              {
                                                                j6valid[iij6] = false;
                                                                _ij6[1] = iij6;
                                                                break;
                                                              }
                                                            }
                                                            j6 = j6array[ij6];
                                                            cj6 = cj6array[ij6];
                                                            sj6 = sj6array[ij6];
                                                            {
                                                              IkReal evalcond[8];
                                                              IkReal x233 = IKsin(j6);
                                                              IkReal x234 = IKcos(j6);
                                                              IkReal x235 = ((1.0) * x234);
                                                              IkReal x236 = ((1.0) * x233);
                                                              evalcond[0] = (((new_r12 * x234)) + new_r20);
                                                              evalcond[1] = (new_r11 + ((sj5 * x233)));
                                                              evalcond[2] = ((((-1.0) * new_r12 * x236)) + new_r21);
                                                              evalcond[3] = ((((-1.0) * sj5 * x235)) + new_r10);
                                                              evalcond[4] = ((((-1.0) * x236)) + (((-1.0) * new_r00)));
                                                              evalcond[5] = ((((-1.0) * x235)) + (((-1.0) * new_r01)));
                                                              evalcond[6] =
                                                                  (((new_r11 * sj5)) + ((cj5 * new_r21)) + x233);
                                                              evalcond[7] = (((new_r10 * sj5)) + ((cj5 * new_r20)) +
                                                                             (((-1.0) * x235)));
                                                              if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                              {
                                                                continue;
                                                              }
                                                            }

                                                            {
                                                              std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                              vinfos[0].jointtype = 1;
                                                              vinfos[0].foffset = j0;
                                                              vinfos[0].indices[0] = _ij0[0];
                                                              vinfos[0].indices[1] = _ij0[1];
                                                              vinfos[0].maxsolutions = _nj0;
                                                              vinfos[1].jointtype = 17;
                                                              vinfos[1].foffset = j1;
                                                              vinfos[1].indices[0] = _ij1[0];
                                                              vinfos[1].indices[1] = _ij1[1];
                                                              vinfos[1].maxsolutions = _nj1;
                                                              vinfos[2].jointtype = 17;
                                                              vinfos[2].foffset = j2;
                                                              vinfos[2].indices[0] = _ij2[0];
                                                              vinfos[2].indices[1] = _ij2[1];
                                                              vinfos[2].maxsolutions = _nj2;
                                                              vinfos[3].jointtype = 17;
                                                              vinfos[3].foffset = j3;
                                                              vinfos[3].indices[0] = _ij3[0];
                                                              vinfos[3].indices[1] = _ij3[1];
                                                              vinfos[3].maxsolutions = _nj3;
                                                              vinfos[4].jointtype = 1;
                                                              vinfos[4].foffset = j4;
                                                              vinfos[4].indices[0] = _ij4[0];
                                                              vinfos[4].indices[1] = _ij4[1];
                                                              vinfos[4].maxsolutions = _nj4;
                                                              vinfos[5].jointtype = 1;
                                                              vinfos[5].foffset = j5;
                                                              vinfos[5].indices[0] = _ij5[0];
                                                              vinfos[5].indices[1] = _ij5[1];
                                                              vinfos[5].maxsolutions = _nj5;
                                                              vinfos[6].jointtype = 1;
                                                              vinfos[6].foffset = j6;
                                                              vinfos[6].indices[0] = _ij6[0];
                                                              vinfos[6].indices[1] = _ij6[1];
                                                              vinfos[6].maxsolutions = _nj6;
                                                              std::vector<int> vfree(0);
                                                              solutions.AddSolution(vinfos, vfree);
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                  else
                                                  {
                                                    {
                                                      IkReal j6array[1], cj6array[1], sj6array[1];
                                                      bool j6valid[1] = { false };
                                                      _nj6 = 1;
                                                      CheckValue<IkReal> x237 =
                                                          IKatan2WithCheck(IkReal(new_r21), IkReal(((-1.0) * new_r20)),
                                                                           IKFAST_ATAN2_MAGTHRESH);
                                                      if (!x237.valid)
                                                      {
                                                        continue;
                                                      }
                                                      CheckValue<IkReal> x238 =
                                                          IKPowWithIntegerCheck(IKsign(new_r12), -1);
                                                      if (!x238.valid)
                                                      {
                                                        continue;
                                                      }
                                                      j6array[0] = ((-1.5707963267949) + (x237.value) +
                                                                    (((1.5707963267949) * (x238.value))));
                                                      sj6array[0] = IKsin(j6array[0]);
                                                      cj6array[0] = IKcos(j6array[0]);
                                                      if (j6array[0] > IKPI)
                                                      {
                                                        j6array[0] -= IK2PI;
                                                      }
                                                      else if (j6array[0] < -IKPI)
                                                      {
                                                        j6array[0] += IK2PI;
                                                      }
                                                      j6valid[0] = true;
                                                      for (int ij6 = 0; ij6 < 1; ++ij6)
                                                      {
                                                        if (!j6valid[ij6])
                                                        {
                                                          continue;
                                                        }
                                                        _ij6[0] = ij6;
                                                        _ij6[1] = -1;
                                                        for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                        {
                                                          if (j6valid[iij6] &&
                                                              IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                  IKFAST_SOLUTION_THRESH &&
                                                              IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                  IKFAST_SOLUTION_THRESH)
                                                          {
                                                            j6valid[iij6] = false;
                                                            _ij6[1] = iij6;
                                                            break;
                                                          }
                                                        }
                                                        j6 = j6array[ij6];
                                                        cj6 = cj6array[ij6];
                                                        sj6 = sj6array[ij6];
                                                        {
                                                          IkReal evalcond[8];
                                                          IkReal x239 = IKsin(j6);
                                                          IkReal x240 = IKcos(j6);
                                                          IkReal x241 = ((1.0) * x240);
                                                          IkReal x242 = ((1.0) * x239);
                                                          evalcond[0] = (((new_r12 * x240)) + new_r20);
                                                          evalcond[1] = (new_r11 + ((sj5 * x239)));
                                                          evalcond[2] = ((((-1.0) * new_r12 * x242)) + new_r21);
                                                          evalcond[3] = (new_r10 + (((-1.0) * sj5 * x241)));
                                                          evalcond[4] = ((((-1.0) * new_r00)) + (((-1.0) * x242)));
                                                          evalcond[5] = ((((-1.0) * new_r01)) + (((-1.0) * x241)));
                                                          evalcond[6] = (((new_r11 * sj5)) + ((cj5 * new_r21)) + x239);
                                                          evalcond[7] = (((new_r10 * sj5)) + ((cj5 * new_r20)) +
                                                                         (((-1.0) * x241)));
                                                          if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                          {
                                                            continue;
                                                          }
                                                        }

                                                        {
                                                          std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                          vinfos[0].jointtype = 1;
                                                          vinfos[0].foffset = j0;
                                                          vinfos[0].indices[0] = _ij0[0];
                                                          vinfos[0].indices[1] = _ij0[1];
                                                          vinfos[0].maxsolutions = _nj0;
                                                          vinfos[1].jointtype = 17;
                                                          vinfos[1].foffset = j1;
                                                          vinfos[1].indices[0] = _ij1[0];
                                                          vinfos[1].indices[1] = _ij1[1];
                                                          vinfos[1].maxsolutions = _nj1;
                                                          vinfos[2].jointtype = 17;
                                                          vinfos[2].foffset = j2;
                                                          vinfos[2].indices[0] = _ij2[0];
                                                          vinfos[2].indices[1] = _ij2[1];
                                                          vinfos[2].maxsolutions = _nj2;
                                                          vinfos[3].jointtype = 17;
                                                          vinfos[3].foffset = j3;
                                                          vinfos[3].indices[0] = _ij3[0];
                                                          vinfos[3].indices[1] = _ij3[1];
                                                          vinfos[3].maxsolutions = _nj3;
                                                          vinfos[4].jointtype = 1;
                                                          vinfos[4].foffset = j4;
                                                          vinfos[4].indices[0] = _ij4[0];
                                                          vinfos[4].indices[1] = _ij4[1];
                                                          vinfos[4].maxsolutions = _nj4;
                                                          vinfos[5].jointtype = 1;
                                                          vinfos[5].foffset = j5;
                                                          vinfos[5].indices[0] = _ij5[0];
                                                          vinfos[5].indices[1] = _ij5[1];
                                                          vinfos[5].maxsolutions = _nj5;
                                                          vinfos[6].jointtype = 1;
                                                          vinfos[6].foffset = j6;
                                                          vinfos[6].indices[0] = _ij6[0];
                                                          vinfos[6].indices[1] = _ij6[1];
                                                          vinfos[6].maxsolutions = _nj6;
                                                          std::vector<int> vfree(0);
                                                          solutions.AddSolution(vinfos, vfree);
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            } while (0);
                                            if (bgotonextstatement)
                                            {
                                              bool bgotonextstatement = true;
                                              do
                                              {
                                                evalcond[0] =
                                                    ((-3.14159265358979) +
                                                     (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j4)))),
                                                             6.28318530717959)));
                                                evalcond[1] = new_r02;
                                                if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                    IKabs(evalcond[1]) < 0.0000050000000000)
                                                {
                                                  bgotonextstatement = false;
                                                  {
                                                    IkReal j6array[1], cj6array[1], sj6array[1];
                                                    bool j6valid[1] = { false };
                                                    _nj6 = 1;
                                                    if (IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH &&
                                                        IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH &&
                                                        IKabs(IKsqr(new_r00) + IKsqr(new_r01) - 1) <=
                                                            IKFAST_SINCOS_THRESH)
                                                      continue;
                                                    j6array[0] = IKatan2(new_r00, new_r01);
                                                    sj6array[0] = IKsin(j6array[0]);
                                                    cj6array[0] = IKcos(j6array[0]);
                                                    if (j6array[0] > IKPI)
                                                    {
                                                      j6array[0] -= IK2PI;
                                                    }
                                                    else if (j6array[0] < -IKPI)
                                                    {
                                                      j6array[0] += IK2PI;
                                                    }
                                                    j6valid[0] = true;
                                                    for (int ij6 = 0; ij6 < 1; ++ij6)
                                                    {
                                                      if (!j6valid[ij6])
                                                      {
                                                        continue;
                                                      }
                                                      _ij6[0] = ij6;
                                                      _ij6[1] = -1;
                                                      for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                      {
                                                        if (j6valid[iij6] &&
                                                            IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                IKFAST_SOLUTION_THRESH &&
                                                            IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                IKFAST_SOLUTION_THRESH)
                                                        {
                                                          j6valid[iij6] = false;
                                                          _ij6[1] = iij6;
                                                          break;
                                                        }
                                                      }
                                                      j6 = j6array[ij6];
                                                      cj6 = cj6array[ij6];
                                                      sj6 = sj6array[ij6];
                                                      {
                                                        IkReal evalcond[8];
                                                        IkReal x243 = IKsin(j6);
                                                        IkReal x244 = IKcos(j6);
                                                        IkReal x245 = ((1.0) * sj5);
                                                        IkReal x246 = ((1.0) * x244);
                                                        evalcond[0] = (((new_r12 * x243)) + new_r21);
                                                        evalcond[1] = ((((-1.0) * x243)) + new_r00);
                                                        evalcond[2] = ((((-1.0) * x246)) + new_r01);
                                                        evalcond[3] = ((((-1.0) * new_r12 * x246)) + new_r20);
                                                        evalcond[4] = (((sj5 * x243)) + (((-1.0) * new_r11)));
                                                        evalcond[5] = ((((-1.0) * new_r10)) + (((-1.0) * x244 * x245)));
                                                        evalcond[6] =
                                                            (((cj5 * new_r21)) + x243 + (((-1.0) * new_r11 * x245)));
                                                        evalcond[7] = (((cj5 * new_r20)) + (((-1.0) * new_r10 * x245)) +
                                                                       (((-1.0) * x246)));
                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                        {
                                                          continue;
                                                        }
                                                      }

                                                      {
                                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                        vinfos[0].jointtype = 1;
                                                        vinfos[0].foffset = j0;
                                                        vinfos[0].indices[0] = _ij0[0];
                                                        vinfos[0].indices[1] = _ij0[1];
                                                        vinfos[0].maxsolutions = _nj0;
                                                        vinfos[1].jointtype = 17;
                                                        vinfos[1].foffset = j1;
                                                        vinfos[1].indices[0] = _ij1[0];
                                                        vinfos[1].indices[1] = _ij1[1];
                                                        vinfos[1].maxsolutions = _nj1;
                                                        vinfos[2].jointtype = 17;
                                                        vinfos[2].foffset = j2;
                                                        vinfos[2].indices[0] = _ij2[0];
                                                        vinfos[2].indices[1] = _ij2[1];
                                                        vinfos[2].maxsolutions = _nj2;
                                                        vinfos[3].jointtype = 17;
                                                        vinfos[3].foffset = j3;
                                                        vinfos[3].indices[0] = _ij3[0];
                                                        vinfos[3].indices[1] = _ij3[1];
                                                        vinfos[3].maxsolutions = _nj3;
                                                        vinfos[4].jointtype = 1;
                                                        vinfos[4].foffset = j4;
                                                        vinfos[4].indices[0] = _ij4[0];
                                                        vinfos[4].indices[1] = _ij4[1];
                                                        vinfos[4].maxsolutions = _nj4;
                                                        vinfos[5].jointtype = 1;
                                                        vinfos[5].foffset = j5;
                                                        vinfos[5].indices[0] = _ij5[0];
                                                        vinfos[5].indices[1] = _ij5[1];
                                                        vinfos[5].maxsolutions = _nj5;
                                                        vinfos[6].jointtype = 1;
                                                        vinfos[6].foffset = j6;
                                                        vinfos[6].indices[0] = _ij6[0];
                                                        vinfos[6].indices[1] = _ij6[1];
                                                        vinfos[6].maxsolutions = _nj6;
                                                        std::vector<int> vfree(0);
                                                        solutions.AddSolution(vinfos, vfree);
                                                      }
                                                    }
                                                  }
                                                }
                                              } while (0);
                                              if (bgotonextstatement)
                                              {
                                                bool bgotonextstatement = true;
                                                do
                                                {
                                                  evalcond[0] =
                                                      ((-3.14159265358979) +
                                                       (IKfmod(((3.14159265358979) + (IKabs(j4))), 6.28318530717959)));
                                                  evalcond[1] = new_r12;
                                                  if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                      IKabs(evalcond[1]) < 0.0000050000000000)
                                                  {
                                                    bgotonextstatement = false;
                                                    {
                                                      IkReal j6array[1], cj6array[1], sj6array[1];
                                                      bool j6valid[1] = { false };
                                                      _nj6 = 1;
                                                      if (IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH &&
                                                          IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH &&
                                                          IKabs(IKsqr(new_r10) + IKsqr(new_r11) - 1) <=
                                                              IKFAST_SINCOS_THRESH)
                                                        continue;
                                                      j6array[0] = IKatan2(new_r10, new_r11);
                                                      sj6array[0] = IKsin(j6array[0]);
                                                      cj6array[0] = IKcos(j6array[0]);
                                                      if (j6array[0] > IKPI)
                                                      {
                                                        j6array[0] -= IK2PI;
                                                      }
                                                      else if (j6array[0] < -IKPI)
                                                      {
                                                        j6array[0] += IK2PI;
                                                      }
                                                      j6valid[0] = true;
                                                      for (int ij6 = 0; ij6 < 1; ++ij6)
                                                      {
                                                        if (!j6valid[ij6])
                                                        {
                                                          continue;
                                                        }
                                                        _ij6[0] = ij6;
                                                        _ij6[1] = -1;
                                                        for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                        {
                                                          if (j6valid[iij6] &&
                                                              IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                  IKFAST_SOLUTION_THRESH &&
                                                              IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                  IKFAST_SOLUTION_THRESH)
                                                          {
                                                            j6valid[iij6] = false;
                                                            _ij6[1] = iij6;
                                                            break;
                                                          }
                                                        }
                                                        j6 = j6array[ij6];
                                                        cj6 = cj6array[ij6];
                                                        sj6 = sj6array[ij6];
                                                        {
                                                          IkReal evalcond[8];
                                                          IkReal x247 = IKcos(j6);
                                                          IkReal x248 = IKsin(j6);
                                                          IkReal x249 = ((1.0) * x247);
                                                          IkReal x250 = ((1.0) * x248);
                                                          evalcond[0] = (new_r20 + ((new_r02 * x247)));
                                                          evalcond[1] = (new_r10 + (((-1.0) * x250)));
                                                          evalcond[2] = ((((-1.0) * x249)) + new_r11);
                                                          evalcond[3] = (((sj5 * x248)) + new_r01);
                                                          evalcond[4] = (new_r21 + (((-1.0) * new_r02 * x250)));
                                                          evalcond[5] = (new_r00 + (((-1.0) * sj5 * x249)));
                                                          evalcond[6] = (((new_r01 * sj5)) + ((cj5 * new_r21)) + x248);
                                                          evalcond[7] = (((new_r00 * sj5)) + ((cj5 * new_r20)) +
                                                                         (((-1.0) * x249)));
                                                          if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                          {
                                                            continue;
                                                          }
                                                        }

                                                        {
                                                          std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                          vinfos[0].jointtype = 1;
                                                          vinfos[0].foffset = j0;
                                                          vinfos[0].indices[0] = _ij0[0];
                                                          vinfos[0].indices[1] = _ij0[1];
                                                          vinfos[0].maxsolutions = _nj0;
                                                          vinfos[1].jointtype = 17;
                                                          vinfos[1].foffset = j1;
                                                          vinfos[1].indices[0] = _ij1[0];
                                                          vinfos[1].indices[1] = _ij1[1];
                                                          vinfos[1].maxsolutions = _nj1;
                                                          vinfos[2].jointtype = 17;
                                                          vinfos[2].foffset = j2;
                                                          vinfos[2].indices[0] = _ij2[0];
                                                          vinfos[2].indices[1] = _ij2[1];
                                                          vinfos[2].maxsolutions = _nj2;
                                                          vinfos[3].jointtype = 17;
                                                          vinfos[3].foffset = j3;
                                                          vinfos[3].indices[0] = _ij3[0];
                                                          vinfos[3].indices[1] = _ij3[1];
                                                          vinfos[3].maxsolutions = _nj3;
                                                          vinfos[4].jointtype = 1;
                                                          vinfos[4].foffset = j4;
                                                          vinfos[4].indices[0] = _ij4[0];
                                                          vinfos[4].indices[1] = _ij4[1];
                                                          vinfos[4].maxsolutions = _nj4;
                                                          vinfos[5].jointtype = 1;
                                                          vinfos[5].foffset = j5;
                                                          vinfos[5].indices[0] = _ij5[0];
                                                          vinfos[5].indices[1] = _ij5[1];
                                                          vinfos[5].maxsolutions = _nj5;
                                                          vinfos[6].jointtype = 1;
                                                          vinfos[6].foffset = j6;
                                                          vinfos[6].indices[0] = _ij6[0];
                                                          vinfos[6].indices[1] = _ij6[1];
                                                          vinfos[6].maxsolutions = _nj6;
                                                          std::vector<int> vfree(0);
                                                          solutions.AddSolution(vinfos, vfree);
                                                        }
                                                      }
                                                    }
                                                  }
                                                } while (0);
                                                if (bgotonextstatement)
                                                {
                                                  bool bgotonextstatement = true;
                                                  do
                                                  {
                                                    evalcond[0] = ((-3.14159265358979) +
                                                                   (IKfmod(((3.14159265358979) +
                                                                            (IKabs(((-3.14159265358979) + j4)))),
                                                                           6.28318530717959)));
                                                    evalcond[1] = new_r12;
                                                    if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                        IKabs(evalcond[1]) < 0.0000050000000000)
                                                    {
                                                      bgotonextstatement = false;
                                                      {
                                                        IkReal j6eval[3];
                                                        sj4 = 0;
                                                        cj4 = -1.0;
                                                        j4 = 3.14159265358979;
                                                        j6eval[0] = new_r02;
                                                        j6eval[1] = IKsign(new_r02);
                                                        j6eval[2] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                        if (IKabs(j6eval[0]) < 0.0000010000000000 ||
                                                            IKabs(j6eval[1]) < 0.0000010000000000 ||
                                                            IKabs(j6eval[2]) < 0.0000010000000000)
                                                        {
                                                          {
                                                            IkReal j6eval[1];
                                                            sj4 = 0;
                                                            cj4 = -1.0;
                                                            j4 = 3.14159265358979;
                                                            j6eval[0] = new_r02;
                                                            if (IKabs(j6eval[0]) < 0.0000010000000000)
                                                            {
                                                              {
                                                                IkReal j6eval[2];
                                                                sj4 = 0;
                                                                cj4 = -1.0;
                                                                j4 = 3.14159265358979;
                                                                j6eval[0] = new_r02;
                                                                j6eval[1] = sj5;
                                                                if (IKabs(j6eval[0]) < 0.0000010000000000 ||
                                                                    IKabs(j6eval[1]) < 0.0000010000000000)
                                                                {
                                                                  {
                                                                    IkReal evalcond[4];
                                                                    bool bgotonextstatement = true;
                                                                    do
                                                                    {
                                                                      evalcond[0] =
                                                                          ((-3.14159265358979) +
                                                                           (IKfmod(((3.14159265358979) + (IKabs(j5))),
                                                                                   6.28318530717959)));
                                                                      evalcond[1] = new_r22;
                                                                      evalcond[2] = new_r01;
                                                                      evalcond[3] = new_r00;
                                                                      if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                                          IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                                          IKabs(evalcond[2]) < 0.0000050000000000 &&
                                                                          IKabs(evalcond[3]) < 0.0000050000000000)
                                                                      {
                                                                        bgotonextstatement = false;
                                                                        {
                                                                          IkReal j6array[1], cj6array[1], sj6array[1];
                                                                          bool j6valid[1] = { false };
                                                                          _nj6 = 1;
                                                                          if (IKabs(((-1.0) * new_r21)) <
                                                                                  IKFAST_ATAN2_MAGTHRESH &&
                                                                              IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH &&
                                                                              IKabs(IKsqr(((-1.0) * new_r21)) +
                                                                                    IKsqr(new_r20) - 1) <=
                                                                                  IKFAST_SINCOS_THRESH)
                                                                            continue;
                                                                          j6array[0] =
                                                                              IKatan2(((-1.0) * new_r21), new_r20);
                                                                          sj6array[0] = IKsin(j6array[0]);
                                                                          cj6array[0] = IKcos(j6array[0]);
                                                                          if (j6array[0] > IKPI)
                                                                          {
                                                                            j6array[0] -= IK2PI;
                                                                          }
                                                                          else if (j6array[0] < -IKPI)
                                                                          {
                                                                            j6array[0] += IK2PI;
                                                                          }
                                                                          j6valid[0] = true;
                                                                          for (int ij6 = 0; ij6 < 1; ++ij6)
                                                                          {
                                                                            if (!j6valid[ij6])
                                                                            {
                                                                              continue;
                                                                            }
                                                                            _ij6[0] = ij6;
                                                                            _ij6[1] = -1;
                                                                            for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                                            {
                                                                              if (j6valid[iij6] &&
                                                                                  IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                                      IKFAST_SOLUTION_THRESH &&
                                                                                  IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                                      IKFAST_SOLUTION_THRESH)
                                                                              {
                                                                                j6valid[iij6] = false;
                                                                                _ij6[1] = iij6;
                                                                                break;
                                                                              }
                                                                            }
                                                                            j6 = j6array[ij6];
                                                                            cj6 = cj6array[ij6];
                                                                            sj6 = sj6array[ij6];
                                                                            {
                                                                              IkReal evalcond[4];
                                                                              IkReal x251 = IKsin(j6);
                                                                              IkReal x252 = ((1.0) * (IKcos(j6)));
                                                                              evalcond[0] = (x251 + new_r21);
                                                                              evalcond[1] =
                                                                                  (new_r20 + (((-1.0) * x252)));
                                                                              evalcond[2] = ((((-1.0) * new_r10)) +
                                                                                             (((-1.0) * x251)));
                                                                              evalcond[3] = ((((-1.0) * new_r11)) +
                                                                                             (((-1.0) * x252)));
                                                                              if (IKabs(evalcond[0]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[1]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[2]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[3]) >
                                                                                      IKFAST_EVALCOND_THRESH)
                                                                              {
                                                                                continue;
                                                                              }
                                                                            }

                                                                            {
                                                                              std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                                  vinfos(7);
                                                                              vinfos[0].jointtype = 1;
                                                                              vinfos[0].foffset = j0;
                                                                              vinfos[0].indices[0] = _ij0[0];
                                                                              vinfos[0].indices[1] = _ij0[1];
                                                                              vinfos[0].maxsolutions = _nj0;
                                                                              vinfos[1].jointtype = 17;
                                                                              vinfos[1].foffset = j1;
                                                                              vinfos[1].indices[0] = _ij1[0];
                                                                              vinfos[1].indices[1] = _ij1[1];
                                                                              vinfos[1].maxsolutions = _nj1;
                                                                              vinfos[2].jointtype = 17;
                                                                              vinfos[2].foffset = j2;
                                                                              vinfos[2].indices[0] = _ij2[0];
                                                                              vinfos[2].indices[1] = _ij2[1];
                                                                              vinfos[2].maxsolutions = _nj2;
                                                                              vinfos[3].jointtype = 17;
                                                                              vinfos[3].foffset = j3;
                                                                              vinfos[3].indices[0] = _ij3[0];
                                                                              vinfos[3].indices[1] = _ij3[1];
                                                                              vinfos[3].maxsolutions = _nj3;
                                                                              vinfos[4].jointtype = 1;
                                                                              vinfos[4].foffset = j4;
                                                                              vinfos[4].indices[0] = _ij4[0];
                                                                              vinfos[4].indices[1] = _ij4[1];
                                                                              vinfos[4].maxsolutions = _nj4;
                                                                              vinfos[5].jointtype = 1;
                                                                              vinfos[5].foffset = j5;
                                                                              vinfos[5].indices[0] = _ij5[0];
                                                                              vinfos[5].indices[1] = _ij5[1];
                                                                              vinfos[5].maxsolutions = _nj5;
                                                                              vinfos[6].jointtype = 1;
                                                                              vinfos[6].foffset = j6;
                                                                              vinfos[6].indices[0] = _ij6[0];
                                                                              vinfos[6].indices[1] = _ij6[1];
                                                                              vinfos[6].maxsolutions = _nj6;
                                                                              std::vector<int> vfree(0);
                                                                              solutions.AddSolution(vinfos, vfree);
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    } while (0);
                                                                    if (bgotonextstatement)
                                                                    {
                                                                      bool bgotonextstatement = true;
                                                                      do
                                                                      {
                                                                        evalcond[0] =
                                                                            ((-3.14159265358979) +
                                                                             (IKfmod(
                                                                                 ((3.14159265358979) +
                                                                                  (IKabs(((-3.14159265358979) + j5)))),
                                                                                 6.28318530717959)));
                                                                        evalcond[1] = new_r22;
                                                                        evalcond[2] = new_r01;
                                                                        evalcond[3] = new_r00;
                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                                            IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                                            IKabs(evalcond[2]) < 0.0000050000000000 &&
                                                                            IKabs(evalcond[3]) < 0.0000050000000000)
                                                                        {
                                                                          bgotonextstatement = false;
                                                                          {
                                                                            IkReal j6array[1], cj6array[1], sj6array[1];
                                                                            bool j6valid[1] = { false };
                                                                            _nj6 = 1;
                                                                            if (IKabs(new_r21) <
                                                                                    IKFAST_ATAN2_MAGTHRESH &&
                                                                                IKabs(((-1.0) * new_r20)) <
                                                                                    IKFAST_ATAN2_MAGTHRESH &&
                                                                                IKabs(IKsqr(new_r21) +
                                                                                      IKsqr(((-1.0) * new_r20)) - 1) <=
                                                                                    IKFAST_SINCOS_THRESH)
                                                                              continue;
                                                                            j6array[0] =
                                                                                IKatan2(new_r21, ((-1.0) * new_r20));
                                                                            sj6array[0] = IKsin(j6array[0]);
                                                                            cj6array[0] = IKcos(j6array[0]);
                                                                            if (j6array[0] > IKPI)
                                                                            {
                                                                              j6array[0] -= IK2PI;
                                                                            }
                                                                            else if (j6array[0] < -IKPI)
                                                                            {
                                                                              j6array[0] += IK2PI;
                                                                            }
                                                                            j6valid[0] = true;
                                                                            for (int ij6 = 0; ij6 < 1; ++ij6)
                                                                            {
                                                                              if (!j6valid[ij6])
                                                                              {
                                                                                continue;
                                                                              }
                                                                              _ij6[0] = ij6;
                                                                              _ij6[1] = -1;
                                                                              for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                                              {
                                                                                if (j6valid[iij6] &&
                                                                                    IKabs(cj6array[ij6] -
                                                                                          cj6array[iij6]) <
                                                                                        IKFAST_SOLUTION_THRESH &&
                                                                                    IKabs(sj6array[ij6] -
                                                                                          sj6array[iij6]) <
                                                                                        IKFAST_SOLUTION_THRESH)
                                                                                {
                                                                                  j6valid[iij6] = false;
                                                                                  _ij6[1] = iij6;
                                                                                  break;
                                                                                }
                                                                              }
                                                                              j6 = j6array[ij6];
                                                                              cj6 = cj6array[ij6];
                                                                              sj6 = sj6array[ij6];
                                                                              {
                                                                                IkReal evalcond[4];
                                                                                IkReal x253 = IKcos(j6);
                                                                                IkReal x254 = ((1.0) * (IKsin(j6)));
                                                                                evalcond[0] = (x253 + new_r20);
                                                                                evalcond[1] =
                                                                                    (new_r21 + (((-1.0) * x254)));
                                                                                evalcond[2] = ((((-1.0) * new_r10)) +
                                                                                               (((-1.0) * x254)));
                                                                                evalcond[3] = ((((-1.0) * new_r11)) +
                                                                                               (((-1.0) * x253)));
                                                                                if (IKabs(evalcond[0]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[1]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[2]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[3]) >
                                                                                        IKFAST_EVALCOND_THRESH)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                              }

                                                                              {
                                                                                std::vector<
                                                                                    IkSingleDOFSolutionBase<IkReal> >
                                                                                    vinfos(7);
                                                                                vinfos[0].jointtype = 1;
                                                                                vinfos[0].foffset = j0;
                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                vinfos[1].jointtype = 17;
                                                                                vinfos[1].foffset = j1;
                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                vinfos[2].jointtype = 17;
                                                                                vinfos[2].foffset = j2;
                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                vinfos[3].jointtype = 17;
                                                                                vinfos[3].foffset = j3;
                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                vinfos[4].jointtype = 1;
                                                                                vinfos[4].foffset = j4;
                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                vinfos[5].jointtype = 1;
                                                                                vinfos[5].foffset = j5;
                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                vinfos[6].jointtype = 1;
                                                                                vinfos[6].foffset = j6;
                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                std::vector<int> vfree(0);
                                                                                solutions.AddSolution(vinfos, vfree);
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      } while (0);
                                                                      if (bgotonextstatement)
                                                                      {
                                                                        bool bgotonextstatement = true;
                                                                        do
                                                                        {
                                                                          evalcond[0] = IKabs(new_r02);
                                                                          evalcond[1] = new_r21;
                                                                          evalcond[2] = new_r20;
                                                                          if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                                              IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                                              IKabs(evalcond[2]) < 0.0000050000000000)
                                                                          {
                                                                            bgotonextstatement = false;
                                                                            {
                                                                              IkReal j6array[1], cj6array[1],
                                                                                  sj6array[1];
                                                                              bool j6valid[1] = { false };
                                                                              _nj6 = 1;
                                                                              if (IKabs((new_r01 * sj5)) <
                                                                                      IKFAST_ATAN2_MAGTHRESH &&
                                                                                  IKabs(((-1.0) * new_r11)) <
                                                                                      IKFAST_ATAN2_MAGTHRESH &&
                                                                                  IKabs(IKsqr((new_r01 * sj5)) +
                                                                                        IKsqr(((-1.0) * new_r11)) -
                                                                                        1) <= IKFAST_SINCOS_THRESH)
                                                                                continue;
                                                                              j6array[0] = IKatan2((new_r01 * sj5),
                                                                                                   ((-1.0) * new_r11));
                                                                              sj6array[0] = IKsin(j6array[0]);
                                                                              cj6array[0] = IKcos(j6array[0]);
                                                                              if (j6array[0] > IKPI)
                                                                              {
                                                                                j6array[0] -= IK2PI;
                                                                              }
                                                                              else if (j6array[0] < -IKPI)
                                                                              {
                                                                                j6array[0] += IK2PI;
                                                                              }
                                                                              j6valid[0] = true;
                                                                              for (int ij6 = 0; ij6 < 1; ++ij6)
                                                                              {
                                                                                if (!j6valid[ij6])
                                                                                {
                                                                                  continue;
                                                                                }
                                                                                _ij6[0] = ij6;
                                                                                _ij6[1] = -1;
                                                                                for (int iij6 = ij6 + 1; iij6 < 1;
                                                                                     ++iij6)
                                                                                {
                                                                                  if (j6valid[iij6] &&
                                                                                      IKabs(cj6array[ij6] -
                                                                                            cj6array[iij6]) <
                                                                                          IKFAST_SOLUTION_THRESH &&
                                                                                      IKabs(sj6array[ij6] -
                                                                                            sj6array[iij6]) <
                                                                                          IKFAST_SOLUTION_THRESH)
                                                                                  {
                                                                                    j6valid[iij6] = false;
                                                                                    _ij6[1] = iij6;
                                                                                    break;
                                                                                  }
                                                                                }
                                                                                j6 = j6array[ij6];
                                                                                cj6 = cj6array[ij6];
                                                                                sj6 = sj6array[ij6];
                                                                                {
                                                                                  IkReal evalcond[6];
                                                                                  IkReal x255 = IKsin(j6);
                                                                                  IkReal x256 = IKcos(j6);
                                                                                  IkReal x257 = ((1.0) * sj5);
                                                                                  IkReal x258 = ((1.0) * x256);
                                                                                  evalcond[0] =
                                                                                      ((((-1.0) * new_r01 * x257)) +
                                                                                       x255);
                                                                                  evalcond[1] = ((((-1.0) * new_r10)) +
                                                                                                 (((-1.0) * x255)));
                                                                                  evalcond[2] = ((((-1.0) * new_r11)) +
                                                                                                 (((-1.0) * x258)));
                                                                                  evalcond[3] = ((((-1.0) * new_r01)) +
                                                                                                 ((sj5 * x255)));
                                                                                  evalcond[4] =
                                                                                      ((((-1.0) * x256 * x257)) +
                                                                                       (((-1.0) * new_r00)));
                                                                                  evalcond[5] =
                                                                                      ((((-1.0) * new_r00 * x257)) +
                                                                                       (((-1.0) * x258)));
                                                                                  if (IKabs(evalcond[0]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[1]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[2]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[3]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[4]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[5]) >
                                                                                          IKFAST_EVALCOND_THRESH)
                                                                                  {
                                                                                    continue;
                                                                                  }
                                                                                }

                                                                                {
                                                                                  std::vector<
                                                                                      IkSingleDOFSolutionBase<IkReal> >
                                                                                      vinfos(7);
                                                                                  vinfos[0].jointtype = 1;
                                                                                  vinfos[0].foffset = j0;
                                                                                  vinfos[0].indices[0] = _ij0[0];
                                                                                  vinfos[0].indices[1] = _ij0[1];
                                                                                  vinfos[0].maxsolutions = _nj0;
                                                                                  vinfos[1].jointtype = 17;
                                                                                  vinfos[1].foffset = j1;
                                                                                  vinfos[1].indices[0] = _ij1[0];
                                                                                  vinfos[1].indices[1] = _ij1[1];
                                                                                  vinfos[1].maxsolutions = _nj1;
                                                                                  vinfos[2].jointtype = 17;
                                                                                  vinfos[2].foffset = j2;
                                                                                  vinfos[2].indices[0] = _ij2[0];
                                                                                  vinfos[2].indices[1] = _ij2[1];
                                                                                  vinfos[2].maxsolutions = _nj2;
                                                                                  vinfos[3].jointtype = 17;
                                                                                  vinfos[3].foffset = j3;
                                                                                  vinfos[3].indices[0] = _ij3[0];
                                                                                  vinfos[3].indices[1] = _ij3[1];
                                                                                  vinfos[3].maxsolutions = _nj3;
                                                                                  vinfos[4].jointtype = 1;
                                                                                  vinfos[4].foffset = j4;
                                                                                  vinfos[4].indices[0] = _ij4[0];
                                                                                  vinfos[4].indices[1] = _ij4[1];
                                                                                  vinfos[4].maxsolutions = _nj4;
                                                                                  vinfos[5].jointtype = 1;
                                                                                  vinfos[5].foffset = j5;
                                                                                  vinfos[5].indices[0] = _ij5[0];
                                                                                  vinfos[5].indices[1] = _ij5[1];
                                                                                  vinfos[5].maxsolutions = _nj5;
                                                                                  vinfos[6].jointtype = 1;
                                                                                  vinfos[6].foffset = j6;
                                                                                  vinfos[6].indices[0] = _ij6[0];
                                                                                  vinfos[6].indices[1] = _ij6[1];
                                                                                  vinfos[6].maxsolutions = _nj6;
                                                                                  std::vector<int> vfree(0);
                                                                                  solutions.AddSolution(vinfos, vfree);
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        } while (0);
                                                                        if (bgotonextstatement)
                                                                        {
                                                                          bool bgotonextstatement = true;
                                                                          do
                                                                          {
                                                                            evalcond[0] =
                                                                                ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                                            if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                            {
                                                                              bgotonextstatement = false;
                                                                              {
                                                                                IkReal j6array[1], cj6array[1],
                                                                                    sj6array[1];
                                                                                bool j6valid[1] = { false };
                                                                                _nj6 = 1;
                                                                                if (IKabs(((-1.0) * new_r10)) <
                                                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                                                    IKabs(((-1.0) * new_r11)) <
                                                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                                                    IKabs(IKsqr(((-1.0) * new_r10)) +
                                                                                          IKsqr(((-1.0) * new_r11)) -
                                                                                          1) <= IKFAST_SINCOS_THRESH)
                                                                                  continue;
                                                                                j6array[0] =
                                                                                    IKatan2(((-1.0) * new_r10),
                                                                                            ((-1.0) * new_r11));
                                                                                sj6array[0] = IKsin(j6array[0]);
                                                                                cj6array[0] = IKcos(j6array[0]);
                                                                                if (j6array[0] > IKPI)
                                                                                {
                                                                                  j6array[0] -= IK2PI;
                                                                                }
                                                                                else if (j6array[0] < -IKPI)
                                                                                {
                                                                                  j6array[0] += IK2PI;
                                                                                }
                                                                                j6valid[0] = true;
                                                                                for (int ij6 = 0; ij6 < 1; ++ij6)
                                                                                {
                                                                                  if (!j6valid[ij6])
                                                                                  {
                                                                                    continue;
                                                                                  }
                                                                                  _ij6[0] = ij6;
                                                                                  _ij6[1] = -1;
                                                                                  for (int iij6 = ij6 + 1; iij6 < 1;
                                                                                       ++iij6)
                                                                                  {
                                                                                    if (j6valid[iij6] &&
                                                                                        IKabs(cj6array[ij6] -
                                                                                              cj6array[iij6]) <
                                                                                            IKFAST_SOLUTION_THRESH &&
                                                                                        IKabs(sj6array[ij6] -
                                                                                              sj6array[iij6]) <
                                                                                            IKFAST_SOLUTION_THRESH)
                                                                                    {
                                                                                      j6valid[iij6] = false;
                                                                                      _ij6[1] = iij6;
                                                                                      break;
                                                                                    }
                                                                                  }
                                                                                  j6 = j6array[ij6];
                                                                                  cj6 = cj6array[ij6];
                                                                                  sj6 = sj6array[ij6];
                                                                                  {
                                                                                    IkReal evalcond[6];
                                                                                    IkReal x259 = IKsin(j6);
                                                                                    IkReal x260 = IKcos(j6);
                                                                                    IkReal x261 = ((-1.0) * x260);
                                                                                    evalcond[0] = x259;
                                                                                    evalcond[1] = (new_r22 * x259);
                                                                                    evalcond[2] = x261;
                                                                                    evalcond[3] = (new_r22 * x261);
                                                                                    evalcond[4] =
                                                                                        ((((-1.0) * new_r10)) +
                                                                                         (((-1.0) * x259)));
                                                                                    evalcond[5] =
                                                                                        ((((-1.0) * x260)) +
                                                                                         (((-1.0) * new_r11)));
                                                                                    if (IKabs(evalcond[0]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[1]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[2]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[3]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[4]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[5]) >
                                                                                            IKFAST_EVALCOND_THRESH)
                                                                                    {
                                                                                      continue;
                                                                                    }
                                                                                  }

                                                                                  {
                                                                                    std::vector<
                                                                                        IkSingleDOFSolutionBase<IkReal> >
                                                                                        vinfos(7);
                                                                                    vinfos[0].jointtype = 1;
                                                                                    vinfos[0].foffset = j0;
                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                    vinfos[1].jointtype = 17;
                                                                                    vinfos[1].foffset = j1;
                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                    vinfos[2].jointtype = 17;
                                                                                    vinfos[2].foffset = j2;
                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                    vinfos[3].jointtype = 17;
                                                                                    vinfos[3].foffset = j3;
                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                    vinfos[4].jointtype = 1;
                                                                                    vinfos[4].foffset = j4;
                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                    vinfos[5].jointtype = 1;
                                                                                    vinfos[5].foffset = j5;
                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                    vinfos[6].jointtype = 1;
                                                                                    vinfos[6].foffset = j6;
                                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                                    vinfos[6].maxsolutions = _nj6;
                                                                                    std::vector<int> vfree(0);
                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          } while (0);
                                                                          if (bgotonextstatement)
                                                                          {
                                                                            bool bgotonextstatement = true;
                                                                            do
                                                                            {
                                                                              if (1)
                                                                              {
                                                                                bgotonextstatement = false;
                                                                                continue;  // branch miss [j6]
                                                                              }
                                                                            } while (0);
                                                                            if (bgotonextstatement) {}
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                                else
                                                                {
                                                                  {
                                                                    IkReal j6array[1], cj6array[1], sj6array[1];
                                                                    bool j6valid[1] = { false };
                                                                    _nj6 = 1;
                                                                    CheckValue<IkReal> x262 =
                                                                        IKPowWithIntegerCheck(new_r02, -1);
                                                                    if (!x262.valid)
                                                                    {
                                                                      continue;
                                                                    }
                                                                    CheckValue<IkReal> x263 =
                                                                        IKPowWithIntegerCheck(sj5, -1);
                                                                    if (!x263.valid)
                                                                    {
                                                                      continue;
                                                                    }
                                                                    if (IKabs(((-1.0) * new_r21 * (x262.value))) <
                                                                            IKFAST_ATAN2_MAGTHRESH &&
                                                                        IKabs(((-1.0) * new_r00 * (x263.value))) <
                                                                            IKFAST_ATAN2_MAGTHRESH &&
                                                                        IKabs(IKsqr(((-1.0) * new_r21 * (x262.value))) +
                                                                              IKsqr(((-1.0) * new_r00 * (x263.value))) -
                                                                              1) <= IKFAST_SINCOS_THRESH)
                                                                      continue;
                                                                    j6array[0] =
                                                                        IKatan2(((-1.0) * new_r21 * (x262.value)),
                                                                                ((-1.0) * new_r00 * (x263.value)));
                                                                    sj6array[0] = IKsin(j6array[0]);
                                                                    cj6array[0] = IKcos(j6array[0]);
                                                                    if (j6array[0] > IKPI)
                                                                    {
                                                                      j6array[0] -= IK2PI;
                                                                    }
                                                                    else if (j6array[0] < -IKPI)
                                                                    {
                                                                      j6array[0] += IK2PI;
                                                                    }
                                                                    j6valid[0] = true;
                                                                    for (int ij6 = 0; ij6 < 1; ++ij6)
                                                                    {
                                                                      if (!j6valid[ij6])
                                                                      {
                                                                        continue;
                                                                      }
                                                                      _ij6[0] = ij6;
                                                                      _ij6[1] = -1;
                                                                      for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                                      {
                                                                        if (j6valid[iij6] &&
                                                                            IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                                IKFAST_SOLUTION_THRESH &&
                                                                            IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                                IKFAST_SOLUTION_THRESH)
                                                                        {
                                                                          j6valid[iij6] = false;
                                                                          _ij6[1] = iij6;
                                                                          break;
                                                                        }
                                                                      }
                                                                      j6 = j6array[ij6];
                                                                      cj6 = cj6array[ij6];
                                                                      sj6 = sj6array[ij6];
                                                                      {
                                                                        IkReal evalcond[8];
                                                                        IkReal x264 = IKsin(j6);
                                                                        IkReal x265 = IKcos(j6);
                                                                        IkReal x266 = ((1.0) * sj5);
                                                                        IkReal x267 = ((1.0) * x265);
                                                                        evalcond[0] = (new_r21 + ((new_r02 * x264)));
                                                                        evalcond[1] =
                                                                            (new_r20 + (((-1.0) * new_r02 * x267)));
                                                                        evalcond[2] =
                                                                            ((((-1.0) * x264)) + (((-1.0) * new_r10)));
                                                                        evalcond[3] =
                                                                            ((((-1.0) * new_r11)) + (((-1.0) * x267)));
                                                                        evalcond[4] =
                                                                            (((sj5 * x264)) + (((-1.0) * new_r01)));
                                                                        evalcond[5] = ((((-1.0) * new_r00)) +
                                                                                       (((-1.0) * x265 * x266)));
                                                                        evalcond[6] = ((((-1.0) * new_r01 * x266)) +
                                                                                       ((cj5 * new_r21)) + x264);
                                                                        evalcond[7] =
                                                                            ((((-1.0) * new_r00 * x266)) +
                                                                             ((cj5 * new_r20)) + (((-1.0) * x267)));
                                                                        if (IKabs(evalcond[0]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[1]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[2]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[3]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[4]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[5]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[6]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                        {
                                                                          continue;
                                                                        }
                                                                      }

                                                                      {
                                                                        std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                            vinfos(7);
                                                                        vinfos[0].jointtype = 1;
                                                                        vinfos[0].foffset = j0;
                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                        vinfos[0].maxsolutions = _nj0;
                                                                        vinfos[1].jointtype = 17;
                                                                        vinfos[1].foffset = j1;
                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                        vinfos[1].maxsolutions = _nj1;
                                                                        vinfos[2].jointtype = 17;
                                                                        vinfos[2].foffset = j2;
                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                        vinfos[2].maxsolutions = _nj2;
                                                                        vinfos[3].jointtype = 17;
                                                                        vinfos[3].foffset = j3;
                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                        vinfos[3].maxsolutions = _nj3;
                                                                        vinfos[4].jointtype = 1;
                                                                        vinfos[4].foffset = j4;
                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                        vinfos[4].maxsolutions = _nj4;
                                                                        vinfos[5].jointtype = 1;
                                                                        vinfos[5].foffset = j5;
                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                        vinfos[5].maxsolutions = _nj5;
                                                                        vinfos[6].jointtype = 1;
                                                                        vinfos[6].foffset = j6;
                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                        vinfos[6].maxsolutions = _nj6;
                                                                        std::vector<int> vfree(0);
                                                                        solutions.AddSolution(vinfos, vfree);
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                            else
                                                            {
                                                              {
                                                                IkReal j6array[1], cj6array[1], sj6array[1];
                                                                bool j6valid[1] = { false };
                                                                _nj6 = 1;
                                                                CheckValue<IkReal> x268 =
                                                                    IKPowWithIntegerCheck(new_r02, -1);
                                                                if (!x268.valid)
                                                                {
                                                                  continue;
                                                                }
                                                                if (IKabs(((-1.0) * new_r10)) < IKFAST_ATAN2_MAGTHRESH &&
                                                                    IKabs((new_r20 * (x268.value))) <
                                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                                    IKabs(IKsqr(((-1.0) * new_r10)) +
                                                                          IKsqr((new_r20 * (x268.value))) - 1) <=
                                                                        IKFAST_SINCOS_THRESH)
                                                                  continue;
                                                                j6array[0] = IKatan2(((-1.0) * new_r10),
                                                                                     (new_r20 * (x268.value)));
                                                                sj6array[0] = IKsin(j6array[0]);
                                                                cj6array[0] = IKcos(j6array[0]);
                                                                if (j6array[0] > IKPI)
                                                                {
                                                                  j6array[0] -= IK2PI;
                                                                }
                                                                else if (j6array[0] < -IKPI)
                                                                {
                                                                  j6array[0] += IK2PI;
                                                                }
                                                                j6valid[0] = true;
                                                                for (int ij6 = 0; ij6 < 1; ++ij6)
                                                                {
                                                                  if (!j6valid[ij6])
                                                                  {
                                                                    continue;
                                                                  }
                                                                  _ij6[0] = ij6;
                                                                  _ij6[1] = -1;
                                                                  for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                                  {
                                                                    if (j6valid[iij6] &&
                                                                        IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                            IKFAST_SOLUTION_THRESH &&
                                                                        IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                            IKFAST_SOLUTION_THRESH)
                                                                    {
                                                                      j6valid[iij6] = false;
                                                                      _ij6[1] = iij6;
                                                                      break;
                                                                    }
                                                                  }
                                                                  j6 = j6array[ij6];
                                                                  cj6 = cj6array[ij6];
                                                                  sj6 = sj6array[ij6];
                                                                  {
                                                                    IkReal evalcond[8];
                                                                    IkReal x269 = IKsin(j6);
                                                                    IkReal x270 = IKcos(j6);
                                                                    IkReal x271 = ((1.0) * sj5);
                                                                    IkReal x272 = ((1.0) * x270);
                                                                    evalcond[0] = (new_r21 + ((new_r02 * x269)));
                                                                    evalcond[1] =
                                                                        ((((-1.0) * new_r02 * x272)) + new_r20);
                                                                    evalcond[2] =
                                                                        ((((-1.0) * x269)) + (((-1.0) * new_r10)));
                                                                    evalcond[3] =
                                                                        ((((-1.0) * new_r11)) + (((-1.0) * x272)));
                                                                    evalcond[4] =
                                                                        (((sj5 * x269)) + (((-1.0) * new_r01)));
                                                                    evalcond[5] = ((((-1.0) * new_r00)) +
                                                                                   (((-1.0) * x270 * x271)));
                                                                    evalcond[6] = ((((-1.0) * new_r01 * x271)) +
                                                                                   ((cj5 * new_r21)) + x269);
                                                                    evalcond[7] =
                                                                        ((((-1.0) * new_r00 * x271)) +
                                                                         ((cj5 * new_r20)) + (((-1.0) * x272)));
                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                    {
                                                                      continue;
                                                                    }
                                                                  }

                                                                  {
                                                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(
                                                                        7);
                                                                    vinfos[0].jointtype = 1;
                                                                    vinfos[0].foffset = j0;
                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                    vinfos[0].maxsolutions = _nj0;
                                                                    vinfos[1].jointtype = 17;
                                                                    vinfos[1].foffset = j1;
                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                    vinfos[1].maxsolutions = _nj1;
                                                                    vinfos[2].jointtype = 17;
                                                                    vinfos[2].foffset = j2;
                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                    vinfos[2].maxsolutions = _nj2;
                                                                    vinfos[3].jointtype = 17;
                                                                    vinfos[3].foffset = j3;
                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                    vinfos[3].maxsolutions = _nj3;
                                                                    vinfos[4].jointtype = 1;
                                                                    vinfos[4].foffset = j4;
                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                    vinfos[4].maxsolutions = _nj4;
                                                                    vinfos[5].jointtype = 1;
                                                                    vinfos[5].foffset = j5;
                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                    vinfos[5].maxsolutions = _nj5;
                                                                    vinfos[6].jointtype = 1;
                                                                    vinfos[6].foffset = j6;
                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                    vinfos[6].maxsolutions = _nj6;
                                                                    std::vector<int> vfree(0);
                                                                    solutions.AddSolution(vinfos, vfree);
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                        else
                                                        {
                                                          {
                                                            IkReal j6array[1], cj6array[1], sj6array[1];
                                                            bool j6valid[1] = { false };
                                                            _nj6 = 1;
                                                            CheckValue<IkReal> x273 =
                                                                IKatan2WithCheck(IkReal(((-1.0) * new_r21)),
                                                                                 IkReal(new_r20),
                                                                                 IKFAST_ATAN2_MAGTHRESH);
                                                            if (!x273.valid)
                                                            {
                                                              continue;
                                                            }
                                                            CheckValue<IkReal> x274 =
                                                                IKPowWithIntegerCheck(IKsign(new_r02), -1);
                                                            if (!x274.valid)
                                                            {
                                                              continue;
                                                            }
                                                            j6array[0] = ((-1.5707963267949) + (x273.value) +
                                                                          (((1.5707963267949) * (x274.value))));
                                                            sj6array[0] = IKsin(j6array[0]);
                                                            cj6array[0] = IKcos(j6array[0]);
                                                            if (j6array[0] > IKPI)
                                                            {
                                                              j6array[0] -= IK2PI;
                                                            }
                                                            else if (j6array[0] < -IKPI)
                                                            {
                                                              j6array[0] += IK2PI;
                                                            }
                                                            j6valid[0] = true;
                                                            for (int ij6 = 0; ij6 < 1; ++ij6)
                                                            {
                                                              if (!j6valid[ij6])
                                                              {
                                                                continue;
                                                              }
                                                              _ij6[0] = ij6;
                                                              _ij6[1] = -1;
                                                              for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                              {
                                                                if (j6valid[iij6] &&
                                                                    IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                        IKFAST_SOLUTION_THRESH &&
                                                                    IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                        IKFAST_SOLUTION_THRESH)
                                                                {
                                                                  j6valid[iij6] = false;
                                                                  _ij6[1] = iij6;
                                                                  break;
                                                                }
                                                              }
                                                              j6 = j6array[ij6];
                                                              cj6 = cj6array[ij6];
                                                              sj6 = sj6array[ij6];
                                                              {
                                                                IkReal evalcond[8];
                                                                IkReal x275 = IKsin(j6);
                                                                IkReal x276 = IKcos(j6);
                                                                IkReal x277 = ((1.0) * sj5);
                                                                IkReal x278 = ((1.0) * x276);
                                                                evalcond[0] = (new_r21 + ((new_r02 * x275)));
                                                                evalcond[1] = ((((-1.0) * new_r02 * x278)) + new_r20);
                                                                evalcond[2] =
                                                                    ((((-1.0) * x275)) + (((-1.0) * new_r10)));
                                                                evalcond[3] =
                                                                    ((((-1.0) * new_r11)) + (((-1.0) * x278)));
                                                                evalcond[4] = (((sj5 * x275)) + (((-1.0) * new_r01)));
                                                                evalcond[5] =
                                                                    ((((-1.0) * new_r00)) + (((-1.0) * x276 * x277)));
                                                                evalcond[6] = ((((-1.0) * new_r01 * x277)) +
                                                                               ((cj5 * new_r21)) + x275);
                                                                evalcond[7] = ((((-1.0) * new_r00 * x277)) +
                                                                               ((cj5 * new_r20)) + (((-1.0) * x278)));
                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                {
                                                                  continue;
                                                                }
                                                              }

                                                              {
                                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                                vinfos[0].jointtype = 1;
                                                                vinfos[0].foffset = j0;
                                                                vinfos[0].indices[0] = _ij0[0];
                                                                vinfos[0].indices[1] = _ij0[1];
                                                                vinfos[0].maxsolutions = _nj0;
                                                                vinfos[1].jointtype = 17;
                                                                vinfos[1].foffset = j1;
                                                                vinfos[1].indices[0] = _ij1[0];
                                                                vinfos[1].indices[1] = _ij1[1];
                                                                vinfos[1].maxsolutions = _nj1;
                                                                vinfos[2].jointtype = 17;
                                                                vinfos[2].foffset = j2;
                                                                vinfos[2].indices[0] = _ij2[0];
                                                                vinfos[2].indices[1] = _ij2[1];
                                                                vinfos[2].maxsolutions = _nj2;
                                                                vinfos[3].jointtype = 17;
                                                                vinfos[3].foffset = j3;
                                                                vinfos[3].indices[0] = _ij3[0];
                                                                vinfos[3].indices[1] = _ij3[1];
                                                                vinfos[3].maxsolutions = _nj3;
                                                                vinfos[4].jointtype = 1;
                                                                vinfos[4].foffset = j4;
                                                                vinfos[4].indices[0] = _ij4[0];
                                                                vinfos[4].indices[1] = _ij4[1];
                                                                vinfos[4].maxsolutions = _nj4;
                                                                vinfos[5].jointtype = 1;
                                                                vinfos[5].foffset = j5;
                                                                vinfos[5].indices[0] = _ij5[0];
                                                                vinfos[5].indices[1] = _ij5[1];
                                                                vinfos[5].maxsolutions = _nj5;
                                                                vinfos[6].jointtype = 1;
                                                                vinfos[6].foffset = j6;
                                                                vinfos[6].indices[0] = _ij6[0];
                                                                vinfos[6].indices[1] = _ij6[1];
                                                                vinfos[6].maxsolutions = _nj6;
                                                                std::vector<int> vfree(0);
                                                                solutions.AddSolution(vinfos, vfree);
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  } while (0);
                                                  if (bgotonextstatement)
                                                  {
                                                    bool bgotonextstatement = true;
                                                    do
                                                    {
                                                      evalcond[0] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                      if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                      {
                                                        bgotonextstatement = false;
                                                        {
                                                          IkReal j6eval[1];
                                                          new_r21 = 0;
                                                          new_r20 = 0;
                                                          new_r02 = 0;
                                                          new_r12 = 0;
                                                          j6eval[0] = 1.0;
                                                          if (IKabs(j6eval[0]) < 0.0000000100000000)
                                                          {
                                                            continue;  // no branches [j6]
                                                          }
                                                          else
                                                          {
                                                            IkReal op[2 + 1], zeror[2];
                                                            int numroots;
                                                            op[0] = 1.0;
                                                            op[1] = 0;
                                                            op[2] = -1.0;
                                                            polyroots2(op, zeror, numroots);
                                                            IkReal j6array[2], cj6array[2], sj6array[2], tempj6array[1];
                                                            int numsolutions = 0;
                                                            for (int ij6 = 0; ij6 < numroots; ++ij6)
                                                            {
                                                              IkReal htj6 = zeror[ij6];
                                                              tempj6array[0] = ((2.0) * (atan(htj6)));
                                                              for (int kj6 = 0; kj6 < 1; ++kj6)
                                                              {
                                                                j6array[numsolutions] = tempj6array[kj6];
                                                                if (j6array[numsolutions] > IKPI)
                                                                {
                                                                  j6array[numsolutions] -= IK2PI;
                                                                }
                                                                else if (j6array[numsolutions] < -IKPI)
                                                                {
                                                                  j6array[numsolutions] += IK2PI;
                                                                }
                                                                sj6array[numsolutions] = IKsin(j6array[numsolutions]);
                                                                cj6array[numsolutions] = IKcos(j6array[numsolutions]);
                                                                numsolutions++;
                                                              }
                                                            }
                                                            bool j6valid[2] = { true, true };
                                                            _nj6 = 2;
                                                            for (int ij6 = 0; ij6 < numsolutions; ++ij6)
                                                            {
                                                              if (!j6valid[ij6])
                                                              {
                                                                continue;
                                                              }
                                                              j6 = j6array[ij6];
                                                              cj6 = cj6array[ij6];
                                                              sj6 = sj6array[ij6];
                                                              htj6 = IKtan(j6 / 2);

                                                              _ij6[0] = ij6;
                                                              _ij6[1] = -1;
                                                              for (int iij6 = ij6 + 1; iij6 < numsolutions; ++iij6)
                                                              {
                                                                if (j6valid[iij6] &&
                                                                    IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                        IKFAST_SOLUTION_THRESH &&
                                                                    IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                        IKFAST_SOLUTION_THRESH)
                                                                {
                                                                  j6valid[iij6] = false;
                                                                  _ij6[1] = iij6;
                                                                  break;
                                                                }
                                                              }
                                                              {
                                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                                vinfos[0].jointtype = 1;
                                                                vinfos[0].foffset = j0;
                                                                vinfos[0].indices[0] = _ij0[0];
                                                                vinfos[0].indices[1] = _ij0[1];
                                                                vinfos[0].maxsolutions = _nj0;
                                                                vinfos[1].jointtype = 17;
                                                                vinfos[1].foffset = j1;
                                                                vinfos[1].indices[0] = _ij1[0];
                                                                vinfos[1].indices[1] = _ij1[1];
                                                                vinfos[1].maxsolutions = _nj1;
                                                                vinfos[2].jointtype = 17;
                                                                vinfos[2].foffset = j2;
                                                                vinfos[2].indices[0] = _ij2[0];
                                                                vinfos[2].indices[1] = _ij2[1];
                                                                vinfos[2].maxsolutions = _nj2;
                                                                vinfos[3].jointtype = 17;
                                                                vinfos[3].foffset = j3;
                                                                vinfos[3].indices[0] = _ij3[0];
                                                                vinfos[3].indices[1] = _ij3[1];
                                                                vinfos[3].maxsolutions = _nj3;
                                                                vinfos[4].jointtype = 1;
                                                                vinfos[4].foffset = j4;
                                                                vinfos[4].indices[0] = _ij4[0];
                                                                vinfos[4].indices[1] = _ij4[1];
                                                                vinfos[4].maxsolutions = _nj4;
                                                                vinfos[5].jointtype = 1;
                                                                vinfos[5].foffset = j5;
                                                                vinfos[5].indices[0] = _ij5[0];
                                                                vinfos[5].indices[1] = _ij5[1];
                                                                vinfos[5].maxsolutions = _nj5;
                                                                vinfos[6].jointtype = 1;
                                                                vinfos[6].foffset = j6;
                                                                vinfos[6].indices[0] = _ij6[0];
                                                                vinfos[6].indices[1] = _ij6[1];
                                                                vinfos[6].maxsolutions = _nj6;
                                                                std::vector<int> vfree(0);
                                                                solutions.AddSolution(vinfos, vfree);
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    } while (0);
                                                    if (bgotonextstatement)
                                                    {
                                                      bool bgotonextstatement = true;
                                                      do
                                                      {
                                                        if (1)
                                                        {
                                                          bgotonextstatement = false;
                                                          continue;  // branch miss [j6]
                                                        }
                                                      } while (0);
                                                      if (bgotonextstatement) {}
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                    else
                                    {
                                      {
                                        IkReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1] = { false };
                                        _nj6 = 1;
                                        CheckValue<IkReal> x280 = IKPowWithIntegerCheck(cj5, -1);
                                        if (!x280.valid)
                                        {
                                          continue;
                                        }
                                        IkReal x279 = x280.value;
                                        CheckValue<IkReal> x281 = IKPowWithIntegerCheck(cj4, -1);
                                        if (!x281.valid)
                                        {
                                          continue;
                                        }
                                        if (IKabs(((-1.0) * new_r21 * x279)) < IKFAST_ATAN2_MAGTHRESH &&
                                            IKabs((x279 * (x281.value) *
                                                   (((((-1.0) * new_r21 * sj4 * sj5)) + ((cj5 * new_r11)))))) <
                                                IKFAST_ATAN2_MAGTHRESH &&
                                            IKabs(IKsqr(((-1.0) * new_r21 * x279)) +
                                                  IKsqr((x279 * (x281.value) *
                                                         (((((-1.0) * new_r21 * sj4 * sj5)) + ((cj5 * new_r11)))))) -
                                                  1) <= IKFAST_SINCOS_THRESH)
                                          continue;
                                        j6array[0] =
                                            IKatan2(((-1.0) * new_r21 * x279),
                                                    (x279 * (x281.value) *
                                                     (((((-1.0) * new_r21 * sj4 * sj5)) + ((cj5 * new_r11))))));
                                        sj6array[0] = IKsin(j6array[0]);
                                        cj6array[0] = IKcos(j6array[0]);
                                        if (j6array[0] > IKPI)
                                        {
                                          j6array[0] -= IK2PI;
                                        }
                                        else if (j6array[0] < -IKPI)
                                        {
                                          j6array[0] += IK2PI;
                                        }
                                        j6valid[0] = true;
                                        for (int ij6 = 0; ij6 < 1; ++ij6)
                                        {
                                          if (!j6valid[ij6])
                                          {
                                            continue;
                                          }
                                          _ij6[0] = ij6;
                                          _ij6[1] = -1;
                                          for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                          {
                                            if (j6valid[iij6] &&
                                                IKabs(cj6array[ij6] - cj6array[iij6]) < IKFAST_SOLUTION_THRESH &&
                                                IKabs(sj6array[ij6] - sj6array[iij6]) < IKFAST_SOLUTION_THRESH)
                                            {
                                              j6valid[iij6] = false;
                                              _ij6[1] = iij6;
                                              break;
                                            }
                                          }
                                          j6 = j6array[ij6];
                                          cj6 = cj6array[ij6];
                                          sj6 = sj6array[ij6];
                                          {
                                            IkReal evalcond[12];
                                            IkReal x282 = IKsin(j6);
                                            IkReal x283 = IKcos(j6);
                                            IkReal x284 = (sj4 * sj5);
                                            IkReal x285 = ((1.0) * sj4);
                                            IkReal x286 = (cj4 * new_r01);
                                            IkReal x287 = (cj4 * new_r00);
                                            IkReal x288 = ((1.0) * x283);
                                            IkReal x289 = (sj5 * x282);
                                            IkReal x290 = ((1.0) * x282);
                                            IkReal x291 = (sj5 * x288);
                                            evalcond[0] = (new_r21 + ((cj5 * x282)));
                                            evalcond[1] = ((((-1.0) * cj5 * x288)) + new_r20);
                                            evalcond[2] = (((new_r11 * sj4)) + x289 + x286);
                                            evalcond[3] =
                                                (((cj4 * new_r10)) + (((-1.0) * x290)) + (((-1.0) * new_r00 * x285)));
                                            evalcond[4] =
                                                (((cj4 * new_r11)) + (((-1.0) * new_r01 * x285)) + (((-1.0) * x288)));
                                            evalcond[5] = (new_r01 + ((cj4 * x289)) + ((sj4 * x283)));
                                            evalcond[6] = (((new_r10 * sj4)) + (((-1.0) * x291)) + x287);
                                            evalcond[7] = ((((-1.0) * cj4 * x291)) + new_r00 + ((sj4 * x282)));
                                            evalcond[8] = ((((-1.0) * cj4 * x288)) + new_r11 + ((x282 * x284)));
                                            evalcond[9] =
                                                ((((-1.0) * cj4 * x290)) + (((-1.0) * x284 * x288)) + new_r10);
                                            evalcond[10] =
                                                (((cj5 * new_r21)) + x282 + ((sj5 * x286)) + ((new_r11 * x284)));
                                            evalcond[11] = (((cj5 * new_r20)) + ((sj5 * x287)) + (((-1.0) * x288)) +
                                                            ((new_r10 * x284)));
                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH)
                                            {
                                              continue;
                                            }
                                          }

                                          {
                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                            vinfos[0].jointtype = 1;
                                            vinfos[0].foffset = j0;
                                            vinfos[0].indices[0] = _ij0[0];
                                            vinfos[0].indices[1] = _ij0[1];
                                            vinfos[0].maxsolutions = _nj0;
                                            vinfos[1].jointtype = 17;
                                            vinfos[1].foffset = j1;
                                            vinfos[1].indices[0] = _ij1[0];
                                            vinfos[1].indices[1] = _ij1[1];
                                            vinfos[1].maxsolutions = _nj1;
                                            vinfos[2].jointtype = 17;
                                            vinfos[2].foffset = j2;
                                            vinfos[2].indices[0] = _ij2[0];
                                            vinfos[2].indices[1] = _ij2[1];
                                            vinfos[2].maxsolutions = _nj2;
                                            vinfos[3].jointtype = 17;
                                            vinfos[3].foffset = j3;
                                            vinfos[3].indices[0] = _ij3[0];
                                            vinfos[3].indices[1] = _ij3[1];
                                            vinfos[3].maxsolutions = _nj3;
                                            vinfos[4].jointtype = 1;
                                            vinfos[4].foffset = j4;
                                            vinfos[4].indices[0] = _ij4[0];
                                            vinfos[4].indices[1] = _ij4[1];
                                            vinfos[4].maxsolutions = _nj4;
                                            vinfos[5].jointtype = 1;
                                            vinfos[5].foffset = j5;
                                            vinfos[5].indices[0] = _ij5[0];
                                            vinfos[5].indices[1] = _ij5[1];
                                            vinfos[5].maxsolutions = _nj5;
                                            vinfos[6].jointtype = 1;
                                            vinfos[6].foffset = j6;
                                            vinfos[6].indices[0] = _ij6[0];
                                            vinfos[6].indices[1] = _ij6[1];
                                            vinfos[6].maxsolutions = _nj6;
                                            std::vector<int> vfree(0);
                                            solutions.AddSolution(vinfos, vfree);
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                else
                                {
                                  {
                                    IkReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1] = { false };
                                    _nj6 = 1;
                                    CheckValue<IkReal> x293 = IKPowWithIntegerCheck(cj5, -1);
                                    if (!x293.valid)
                                    {
                                      continue;
                                    }
                                    IkReal x292 = x293.value;
                                    CheckValue<IkReal> x294 = IKPowWithIntegerCheck(sj4, -1);
                                    if (!x294.valid)
                                    {
                                      continue;
                                    }
                                    if (IKabs(((-1.0) * new_r21 * x292)) < IKFAST_ATAN2_MAGTHRESH &&
                                        IKabs((x292 * (x294.value) *
                                               (((((-1.0) * cj5 * new_r01)) + ((cj4 * new_r21 * sj5)))))) <
                                            IKFAST_ATAN2_MAGTHRESH &&
                                        IKabs(IKsqr(((-1.0) * new_r21 * x292)) +
                                              IKsqr((x292 * (x294.value) *
                                                     (((((-1.0) * cj5 * new_r01)) + ((cj4 * new_r21 * sj5)))))) -
                                              1) <= IKFAST_SINCOS_THRESH)
                                      continue;
                                    j6array[0] = IKatan2(((-1.0) * new_r21 * x292),
                                                         (x292 * (x294.value) *
                                                          (((((-1.0) * cj5 * new_r01)) + ((cj4 * new_r21 * sj5))))));
                                    sj6array[0] = IKsin(j6array[0]);
                                    cj6array[0] = IKcos(j6array[0]);
                                    if (j6array[0] > IKPI)
                                    {
                                      j6array[0] -= IK2PI;
                                    }
                                    else if (j6array[0] < -IKPI)
                                    {
                                      j6array[0] += IK2PI;
                                    }
                                    j6valid[0] = true;
                                    for (int ij6 = 0; ij6 < 1; ++ij6)
                                    {
                                      if (!j6valid[ij6])
                                      {
                                        continue;
                                      }
                                      _ij6[0] = ij6;
                                      _ij6[1] = -1;
                                      for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                      {
                                        if (j6valid[iij6] &&
                                            IKabs(cj6array[ij6] - cj6array[iij6]) < IKFAST_SOLUTION_THRESH &&
                                            IKabs(sj6array[ij6] - sj6array[iij6]) < IKFAST_SOLUTION_THRESH)
                                        {
                                          j6valid[iij6] = false;
                                          _ij6[1] = iij6;
                                          break;
                                        }
                                      }
                                      j6 = j6array[ij6];
                                      cj6 = cj6array[ij6];
                                      sj6 = sj6array[ij6];
                                      {
                                        IkReal evalcond[12];
                                        IkReal x295 = IKsin(j6);
                                        IkReal x296 = IKcos(j6);
                                        IkReal x297 = (sj4 * sj5);
                                        IkReal x298 = ((1.0) * sj4);
                                        IkReal x299 = (cj4 * new_r01);
                                        IkReal x300 = (cj4 * new_r00);
                                        IkReal x301 = ((1.0) * x296);
                                        IkReal x302 = (sj5 * x295);
                                        IkReal x303 = ((1.0) * x295);
                                        IkReal x304 = (sj5 * x301);
                                        evalcond[0] = (((cj5 * x295)) + new_r21);
                                        evalcond[1] = ((((-1.0) * cj5 * x301)) + new_r20);
                                        evalcond[2] = (((new_r11 * sj4)) + x302 + x299);
                                        evalcond[3] =
                                            (((cj4 * new_r10)) + (((-1.0) * new_r00 * x298)) + (((-1.0) * x303)));
                                        evalcond[4] =
                                            ((((-1.0) * new_r01 * x298)) + ((cj4 * new_r11)) + (((-1.0) * x301)));
                                        evalcond[5] = (((sj4 * x296)) + new_r01 + ((cj4 * x302)));
                                        evalcond[6] = (((new_r10 * sj4)) + x300 + (((-1.0) * x304)));
                                        evalcond[7] = ((((-1.0) * cj4 * x304)) + ((sj4 * x295)) + new_r00);
                                        evalcond[8] = ((((-1.0) * cj4 * x301)) + ((x295 * x297)) + new_r11);
                                        evalcond[9] = ((((-1.0) * x297 * x301)) + (((-1.0) * cj4 * x303)) + new_r10);
                                        evalcond[10] = (((sj5 * x299)) + ((new_r11 * x297)) + ((cj5 * new_r21)) + x295);
                                        evalcond[11] = (((sj5 * x300)) + ((new_r10 * x297)) + ((cj5 * new_r20)) +
                                                        (((-1.0) * x301)));
                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH)
                                        {
                                          continue;
                                        }
                                      }

                                      {
                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                        vinfos[0].jointtype = 1;
                                        vinfos[0].foffset = j0;
                                        vinfos[0].indices[0] = _ij0[0];
                                        vinfos[0].indices[1] = _ij0[1];
                                        vinfos[0].maxsolutions = _nj0;
                                        vinfos[1].jointtype = 17;
                                        vinfos[1].foffset = j1;
                                        vinfos[1].indices[0] = _ij1[0];
                                        vinfos[1].indices[1] = _ij1[1];
                                        vinfos[1].maxsolutions = _nj1;
                                        vinfos[2].jointtype = 17;
                                        vinfos[2].foffset = j2;
                                        vinfos[2].indices[0] = _ij2[0];
                                        vinfos[2].indices[1] = _ij2[1];
                                        vinfos[2].maxsolutions = _nj2;
                                        vinfos[3].jointtype = 17;
                                        vinfos[3].foffset = j3;
                                        vinfos[3].indices[0] = _ij3[0];
                                        vinfos[3].indices[1] = _ij3[1];
                                        vinfos[3].maxsolutions = _nj3;
                                        vinfos[4].jointtype = 1;
                                        vinfos[4].foffset = j4;
                                        vinfos[4].indices[0] = _ij4[0];
                                        vinfos[4].indices[1] = _ij4[1];
                                        vinfos[4].maxsolutions = _nj4;
                                        vinfos[5].jointtype = 1;
                                        vinfos[5].foffset = j5;
                                        vinfos[5].indices[0] = _ij5[0];
                                        vinfos[5].indices[1] = _ij5[1];
                                        vinfos[5].maxsolutions = _nj5;
                                        vinfos[6].jointtype = 1;
                                        vinfos[6].foffset = j6;
                                        vinfos[6].indices[0] = _ij6[0];
                                        vinfos[6].indices[1] = _ij6[1];
                                        vinfos[6].maxsolutions = _nj6;
                                        std::vector<int> vfree(0);
                                        solutions.AddSolution(vinfos, vfree);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            else
                            {
                              {
                                IkReal j6array[1], cj6array[1], sj6array[1];
                                bool j6valid[1] = { false };
                                _nj6 = 1;
                                CheckValue<IkReal> x305 = IKatan2WithCheck(IkReal(((-1.0) * new_r21)), IkReal(new_r20),
                                                                           IKFAST_ATAN2_MAGTHRESH);
                                if (!x305.valid)
                                {
                                  continue;
                                }
                                CheckValue<IkReal> x306 = IKPowWithIntegerCheck(IKsign(cj5), -1);
                                if (!x306.valid)
                                {
                                  continue;
                                }
                                j6array[0] = ((-1.5707963267949) + (x305.value) + (((1.5707963267949) * (x306.value))));
                                sj6array[0] = IKsin(j6array[0]);
                                cj6array[0] = IKcos(j6array[0]);
                                if (j6array[0] > IKPI)
                                {
                                  j6array[0] -= IK2PI;
                                }
                                else if (j6array[0] < -IKPI)
                                {
                                  j6array[0] += IK2PI;
                                }
                                j6valid[0] = true;
                                for (int ij6 = 0; ij6 < 1; ++ij6)
                                {
                                  if (!j6valid[ij6])
                                  {
                                    continue;
                                  }
                                  _ij6[0] = ij6;
                                  _ij6[1] = -1;
                                  for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                  {
                                    if (j6valid[iij6] &&
                                        IKabs(cj6array[ij6] - cj6array[iij6]) < IKFAST_SOLUTION_THRESH &&
                                        IKabs(sj6array[ij6] - sj6array[iij6]) < IKFAST_SOLUTION_THRESH)
                                    {
                                      j6valid[iij6] = false;
                                      _ij6[1] = iij6;
                                      break;
                                    }
                                  }
                                  j6 = j6array[ij6];
                                  cj6 = cj6array[ij6];
                                  sj6 = sj6array[ij6];
                                  {
                                    IkReal evalcond[12];
                                    IkReal x307 = IKsin(j6);
                                    IkReal x308 = IKcos(j6);
                                    IkReal x309 = (sj4 * sj5);
                                    IkReal x310 = ((1.0) * sj4);
                                    IkReal x311 = (cj4 * new_r01);
                                    IkReal x312 = (cj4 * new_r00);
                                    IkReal x313 = ((1.0) * x308);
                                    IkReal x314 = (sj5 * x307);
                                    IkReal x315 = ((1.0) * x307);
                                    IkReal x316 = (sj5 * x313);
                                    evalcond[0] = (new_r21 + ((cj5 * x307)));
                                    evalcond[1] = ((((-1.0) * cj5 * x313)) + new_r20);
                                    evalcond[2] = (((new_r11 * sj4)) + x314 + x311);
                                    evalcond[3] = ((((-1.0) * new_r00 * x310)) + ((cj4 * new_r10)) + (((-1.0) * x315)));
                                    evalcond[4] = (((cj4 * new_r11)) + (((-1.0) * x313)) + (((-1.0) * new_r01 * x310)));
                                    evalcond[5] = (((cj4 * x314)) + ((sj4 * x308)) + new_r01);
                                    evalcond[6] = (((new_r10 * sj4)) + x312 + (((-1.0) * x316)));
                                    evalcond[7] = ((((-1.0) * cj4 * x316)) + ((sj4 * x307)) + new_r00);
                                    evalcond[8] = ((((-1.0) * cj4 * x313)) + new_r11 + ((x307 * x309)));
                                    evalcond[9] = ((((-1.0) * cj4 * x315)) + new_r10 + (((-1.0) * x309 * x313)));
                                    evalcond[10] = (((new_r11 * x309)) + ((cj5 * new_r21)) + x307 + ((sj5 * x311)));
                                    evalcond[11] =
                                        (((new_r10 * x309)) + ((cj5 * new_r20)) + (((-1.0) * x313)) + ((sj5 * x312)));
                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH)
                                    {
                                      continue;
                                    }
                                  }

                                  {
                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                    vinfos[0].jointtype = 1;
                                    vinfos[0].foffset = j0;
                                    vinfos[0].indices[0] = _ij0[0];
                                    vinfos[0].indices[1] = _ij0[1];
                                    vinfos[0].maxsolutions = _nj0;
                                    vinfos[1].jointtype = 17;
                                    vinfos[1].foffset = j1;
                                    vinfos[1].indices[0] = _ij1[0];
                                    vinfos[1].indices[1] = _ij1[1];
                                    vinfos[1].maxsolutions = _nj1;
                                    vinfos[2].jointtype = 17;
                                    vinfos[2].foffset = j2;
                                    vinfos[2].indices[0] = _ij2[0];
                                    vinfos[2].indices[1] = _ij2[1];
                                    vinfos[2].maxsolutions = _nj2;
                                    vinfos[3].jointtype = 17;
                                    vinfos[3].foffset = j3;
                                    vinfos[3].indices[0] = _ij3[0];
                                    vinfos[3].indices[1] = _ij3[1];
                                    vinfos[3].maxsolutions = _nj3;
                                    vinfos[4].jointtype = 1;
                                    vinfos[4].foffset = j4;
                                    vinfos[4].indices[0] = _ij4[0];
                                    vinfos[4].indices[1] = _ij4[1];
                                    vinfos[4].maxsolutions = _nj4;
                                    vinfos[5].jointtype = 1;
                                    vinfos[5].foffset = j5;
                                    vinfos[5].indices[0] = _ij5[0];
                                    vinfos[5].indices[1] = _ij5[1];
                                    vinfos[5].maxsolutions = _nj5;
                                    vinfos[6].jointtype = 1;
                                    vinfos[6].foffset = j6;
                                    vinfos[6].indices[0] = _ij6[0];
                                    vinfos[6].indices[1] = _ij6[1];
                                    vinfos[6].maxsolutions = _nj6;
                                    std::vector<int> vfree(0);
                                    solutions.AddSolution(vinfos, vfree);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                else
                {
                  {
                    IkReal j4array[1], cj4array[1], sj4array[1];
                    bool j4valid[1] = { false };
                    _nj4 = 1;
                    CheckValue<IkReal> x317 = IKPowWithIntegerCheck(IKsign(cj5), -1);
                    if (!x317.valid)
                    {
                      continue;
                    }
                    CheckValue<IkReal> x318 = IKatan2WithCheck(IkReal(((-1.0) * new_r12)), IkReal(((-1.0) * new_r02)),
                                                               IKFAST_ATAN2_MAGTHRESH);
                    if (!x318.valid)
                    {
                      continue;
                    }
                    j4array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x317.value))) + (x318.value));
                    sj4array[0] = IKsin(j4array[0]);
                    cj4array[0] = IKcos(j4array[0]);
                    if (j4array[0] > IKPI)
                    {
                      j4array[0] -= IK2PI;
                    }
                    else if (j4array[0] < -IKPI)
                    {
                      j4array[0] += IK2PI;
                    }
                    j4valid[0] = true;
                    for (int ij4 = 0; ij4 < 1; ++ij4)
                    {
                      if (!j4valid[ij4])
                      {
                        continue;
                      }
                      _ij4[0] = ij4;
                      _ij4[1] = -1;
                      for (int iij4 = ij4 + 1; iij4 < 1; ++iij4)
                      {
                        if (j4valid[iij4] && IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH &&
                            IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                        {
                          j4valid[iij4] = false;
                          _ij4[1] = iij4;
                          break;
                        }
                      }
                      j4 = j4array[ij4];
                      cj4 = cj4array[ij4];
                      sj4 = sj4array[ij4];
                      {
                        IkReal evalcond[8];
                        IkReal x319 = IKcos(j4);
                        IkReal x320 = IKsin(j4);
                        IkReal x321 = ((1.0) * sj5);
                        IkReal x322 = (cj5 * x319);
                        IkReal x323 = (cj5 * x320);
                        IkReal x324 = (new_r02 * x319);
                        IkReal x325 = (new_r12 * x320);
                        evalcond[0] = (x322 + new_r02);
                        evalcond[1] = (x323 + new_r12);
                        evalcond[2] = (((new_r12 * x319)) + (((-1.0) * new_r02 * x320)));
                        evalcond[3] = (cj5 + x324 + x325);
                        evalcond[4] = (((sj5 * x324)) + ((sj5 * x325)) + ((cj5 * new_r22)));
                        evalcond[5] = (((new_r00 * x322)) + ((new_r10 * x323)) + (((-1.0) * new_r20 * x321)));
                        evalcond[6] = (((new_r01 * x322)) + (((-1.0) * new_r21 * x321)) + ((new_r11 * x323)));
                        evalcond[7] = ((1.0) + ((new_r12 * x323)) + (((-1.0) * new_r22 * x321)) + ((new_r02 * x322)));
                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                            IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                            IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                            IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                            IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                            IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                            IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                        {
                          continue;
                        }
                      }

                      {
                        IkReal j6eval[3];
                        j6eval[0] = cj5;
                        j6eval[1] = IKsign(cj5);
                        j6eval[2] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                        if (IKabs(j6eval[0]) < 0.0000010000000000 || IKabs(j6eval[1]) < 0.0000010000000000 ||
                            IKabs(j6eval[2]) < 0.0000010000000000)
                        {
                          {
                            IkReal j6eval[2];
                            j6eval[0] = cj5;
                            j6eval[1] = sj4;
                            if (IKabs(j6eval[0]) < 0.0000010000000000 || IKabs(j6eval[1]) < 0.0000010000000000)
                            {
                              {
                                IkReal j6eval[2];
                                j6eval[0] = cj5;
                                j6eval[1] = cj4;
                                if (IKabs(j6eval[0]) < 0.0000010000000000 || IKabs(j6eval[1]) < 0.0000010000000000)
                                {
                                  {
                                    IkReal evalcond[5];
                                    bool bgotonextstatement = true;
                                    do
                                    {
                                      evalcond[0] = ((-3.14159265358979) +
                                                     (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j5)))),
                                                             6.28318530717959)));
                                      evalcond[1] = new_r02;
                                      evalcond[2] = new_r12;
                                      evalcond[3] = new_r21;
                                      evalcond[4] = new_r20;
                                      if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                          IKabs(evalcond[1]) < 0.0000050000000000 &&
                                          IKabs(evalcond[2]) < 0.0000050000000000 &&
                                          IKabs(evalcond[3]) < 0.0000050000000000 &&
                                          IKabs(evalcond[4]) < 0.0000050000000000)
                                      {
                                        bgotonextstatement = false;
                                        {
                                          IkReal j6array[1], cj6array[1], sj6array[1];
                                          bool j6valid[1] = { false };
                                          _nj6 = 1;
                                          IkReal x326 = ((1.0) * new_r01);
                                          if (IKabs(((((-1.0) * new_r00 * sj4)) + (((-1.0) * cj4 * x326)))) <
                                                  IKFAST_ATAN2_MAGTHRESH &&
                                              IKabs((((cj4 * new_r00)) + (((-1.0) * sj4 * x326)))) <
                                                  IKFAST_ATAN2_MAGTHRESH &&
                                              IKabs(IKsqr(((((-1.0) * new_r00 * sj4)) + (((-1.0) * cj4 * x326)))) +
                                                    IKsqr((((cj4 * new_r00)) + (((-1.0) * sj4 * x326)))) - 1) <=
                                                  IKFAST_SINCOS_THRESH)
                                            continue;
                                          j6array[0] = IKatan2(((((-1.0) * new_r00 * sj4)) + (((-1.0) * cj4 * x326))),
                                                               (((cj4 * new_r00)) + (((-1.0) * sj4 * x326))));
                                          sj6array[0] = IKsin(j6array[0]);
                                          cj6array[0] = IKcos(j6array[0]);
                                          if (j6array[0] > IKPI)
                                          {
                                            j6array[0] -= IK2PI;
                                          }
                                          else if (j6array[0] < -IKPI)
                                          {
                                            j6array[0] += IK2PI;
                                          }
                                          j6valid[0] = true;
                                          for (int ij6 = 0; ij6 < 1; ++ij6)
                                          {
                                            if (!j6valid[ij6])
                                            {
                                              continue;
                                            }
                                            _ij6[0] = ij6;
                                            _ij6[1] = -1;
                                            for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                            {
                                              if (j6valid[iij6] &&
                                                  IKabs(cj6array[ij6] - cj6array[iij6]) < IKFAST_SOLUTION_THRESH &&
                                                  IKabs(sj6array[ij6] - sj6array[iij6]) < IKFAST_SOLUTION_THRESH)
                                              {
                                                j6valid[iij6] = false;
                                                _ij6[1] = iij6;
                                                break;
                                              }
                                            }
                                            j6 = j6array[ij6];
                                            cj6 = cj6array[ij6];
                                            sj6 = sj6array[ij6];
                                            {
                                              IkReal evalcond[8];
                                              IkReal x327 = IKsin(j6);
                                              IkReal x328 = IKcos(j6);
                                              IkReal x329 = ((1.0) * sj4);
                                              IkReal x330 = ((1.0) * x328);
                                              IkReal x331 = (sj4 * x327);
                                              IkReal x332 = (sj4 * x328);
                                              IkReal x333 = (cj4 * x327);
                                              IkReal x334 = (cj4 * x330);
                                              evalcond[0] = (((cj4 * new_r01)) + ((new_r11 * sj4)) + x327);
                                              evalcond[1] = (x333 + x332 + new_r01);
                                              evalcond[2] = (((cj4 * new_r00)) + ((new_r10 * sj4)) + (((-1.0) * x330)));
                                              evalcond[3] =
                                                  (((cj4 * new_r10)) + (((-1.0) * x327)) + (((-1.0) * new_r00 * x329)));
                                              evalcond[4] =
                                                  (((cj4 * new_r11)) + (((-1.0) * new_r01 * x329)) + (((-1.0) * x330)));
                                              evalcond[5] = (x331 + (((-1.0) * x334)) + new_r00);
                                              evalcond[6] = (x331 + (((-1.0) * x334)) + new_r11);
                                              evalcond[7] = ((((-1.0) * x333)) + new_r10 + (((-1.0) * x328 * x329)));
                                              if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                              {
                                                continue;
                                              }
                                            }

                                            {
                                              std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                              vinfos[0].jointtype = 1;
                                              vinfos[0].foffset = j0;
                                              vinfos[0].indices[0] = _ij0[0];
                                              vinfos[0].indices[1] = _ij0[1];
                                              vinfos[0].maxsolutions = _nj0;
                                              vinfos[1].jointtype = 17;
                                              vinfos[1].foffset = j1;
                                              vinfos[1].indices[0] = _ij1[0];
                                              vinfos[1].indices[1] = _ij1[1];
                                              vinfos[1].maxsolutions = _nj1;
                                              vinfos[2].jointtype = 17;
                                              vinfos[2].foffset = j2;
                                              vinfos[2].indices[0] = _ij2[0];
                                              vinfos[2].indices[1] = _ij2[1];
                                              vinfos[2].maxsolutions = _nj2;
                                              vinfos[3].jointtype = 17;
                                              vinfos[3].foffset = j3;
                                              vinfos[3].indices[0] = _ij3[0];
                                              vinfos[3].indices[1] = _ij3[1];
                                              vinfos[3].maxsolutions = _nj3;
                                              vinfos[4].jointtype = 1;
                                              vinfos[4].foffset = j4;
                                              vinfos[4].indices[0] = _ij4[0];
                                              vinfos[4].indices[1] = _ij4[1];
                                              vinfos[4].maxsolutions = _nj4;
                                              vinfos[5].jointtype = 1;
                                              vinfos[5].foffset = j5;
                                              vinfos[5].indices[0] = _ij5[0];
                                              vinfos[5].indices[1] = _ij5[1];
                                              vinfos[5].maxsolutions = _nj5;
                                              vinfos[6].jointtype = 1;
                                              vinfos[6].foffset = j6;
                                              vinfos[6].indices[0] = _ij6[0];
                                              vinfos[6].indices[1] = _ij6[1];
                                              vinfos[6].maxsolutions = _nj6;
                                              std::vector<int> vfree(0);
                                              solutions.AddSolution(vinfos, vfree);
                                            }
                                          }
                                        }
                                      }
                                    } while (0);
                                    if (bgotonextstatement)
                                    {
                                      bool bgotonextstatement = true;
                                      do
                                      {
                                        evalcond[0] = ((-3.14159265358979) +
                                                       (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j5)))),
                                                               6.28318530717959)));
                                        evalcond[1] = new_r02;
                                        evalcond[2] = new_r12;
                                        evalcond[3] = new_r21;
                                        evalcond[4] = new_r20;
                                        if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                            IKabs(evalcond[1]) < 0.0000050000000000 &&
                                            IKabs(evalcond[2]) < 0.0000050000000000 &&
                                            IKabs(evalcond[3]) < 0.0000050000000000 &&
                                            IKabs(evalcond[4]) < 0.0000050000000000)
                                        {
                                          bgotonextstatement = false;
                                          {
                                            IkReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1] = { false };
                                            _nj6 = 1;
                                            IkReal x335 = ((1.0) * new_r00);
                                            if (IKabs(((((-1.0) * sj4 * x335)) + ((cj4 * new_r01)))) <
                                                    IKFAST_ATAN2_MAGTHRESH &&
                                                IKabs(((((-1.0) * new_r01 * sj4)) + (((-1.0) * cj4 * x335)))) <
                                                    IKFAST_ATAN2_MAGTHRESH &&
                                                IKabs(IKsqr(((((-1.0) * sj4 * x335)) + ((cj4 * new_r01)))) +
                                                      IKsqr(((((-1.0) * new_r01 * sj4)) + (((-1.0) * cj4 * x335)))) -
                                                      1) <= IKFAST_SINCOS_THRESH)
                                              continue;
                                            j6array[0] =
                                                IKatan2(((((-1.0) * sj4 * x335)) + ((cj4 * new_r01))),
                                                        ((((-1.0) * new_r01 * sj4)) + (((-1.0) * cj4 * x335))));
                                            sj6array[0] = IKsin(j6array[0]);
                                            cj6array[0] = IKcos(j6array[0]);
                                            if (j6array[0] > IKPI)
                                            {
                                              j6array[0] -= IK2PI;
                                            }
                                            else if (j6array[0] < -IKPI)
                                            {
                                              j6array[0] += IK2PI;
                                            }
                                            j6valid[0] = true;
                                            for (int ij6 = 0; ij6 < 1; ++ij6)
                                            {
                                              if (!j6valid[ij6])
                                              {
                                                continue;
                                              }
                                              _ij6[0] = ij6;
                                              _ij6[1] = -1;
                                              for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                              {
                                                if (j6valid[iij6] &&
                                                    IKabs(cj6array[ij6] - cj6array[iij6]) < IKFAST_SOLUTION_THRESH &&
                                                    IKabs(sj6array[ij6] - sj6array[iij6]) < IKFAST_SOLUTION_THRESH)
                                                {
                                                  j6valid[iij6] = false;
                                                  _ij6[1] = iij6;
                                                  break;
                                                }
                                              }
                                              j6 = j6array[ij6];
                                              cj6 = cj6array[ij6];
                                              sj6 = sj6array[ij6];
                                              {
                                                IkReal evalcond[8];
                                                IkReal x336 = IKcos(j6);
                                                IkReal x337 = IKsin(j6);
                                                IkReal x338 = ((1.0) * sj4);
                                                IkReal x339 = ((1.0) * x337);
                                                IkReal x340 = (sj4 * x336);
                                                IkReal x341 = ((1.0) * x336);
                                                IkReal x342 = (cj4 * x339);
                                                evalcond[0] = (((cj4 * new_r00)) + ((new_r10 * sj4)) + x336);
                                                evalcond[1] =
                                                    (((cj4 * new_r01)) + ((new_r11 * sj4)) + (((-1.0) * x339)));
                                                evalcond[2] = (((sj4 * x337)) + ((cj4 * x336)) + new_r00);
                                                evalcond[3] = (((cj4 * new_r10)) + (((-1.0) * new_r00 * x338)) +
                                                               (((-1.0) * x339)));
                                                evalcond[4] = (((cj4 * new_r11)) + (((-1.0) * x341)) +
                                                               (((-1.0) * new_r01 * x338)));
                                                evalcond[5] = (x340 + new_r01 + (((-1.0) * x342)));
                                                evalcond[6] = (x340 + new_r10 + (((-1.0) * x342)));
                                                evalcond[7] =
                                                    ((((-1.0) * x337 * x338)) + (((-1.0) * cj4 * x341)) + new_r11);
                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                {
                                                  continue;
                                                }
                                              }

                                              {
                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                vinfos[0].jointtype = 1;
                                                vinfos[0].foffset = j0;
                                                vinfos[0].indices[0] = _ij0[0];
                                                vinfos[0].indices[1] = _ij0[1];
                                                vinfos[0].maxsolutions = _nj0;
                                                vinfos[1].jointtype = 17;
                                                vinfos[1].foffset = j1;
                                                vinfos[1].indices[0] = _ij1[0];
                                                vinfos[1].indices[1] = _ij1[1];
                                                vinfos[1].maxsolutions = _nj1;
                                                vinfos[2].jointtype = 17;
                                                vinfos[2].foffset = j2;
                                                vinfos[2].indices[0] = _ij2[0];
                                                vinfos[2].indices[1] = _ij2[1];
                                                vinfos[2].maxsolutions = _nj2;
                                                vinfos[3].jointtype = 17;
                                                vinfos[3].foffset = j3;
                                                vinfos[3].indices[0] = _ij3[0];
                                                vinfos[3].indices[1] = _ij3[1];
                                                vinfos[3].maxsolutions = _nj3;
                                                vinfos[4].jointtype = 1;
                                                vinfos[4].foffset = j4;
                                                vinfos[4].indices[0] = _ij4[0];
                                                vinfos[4].indices[1] = _ij4[1];
                                                vinfos[4].maxsolutions = _nj4;
                                                vinfos[5].jointtype = 1;
                                                vinfos[5].foffset = j5;
                                                vinfos[5].indices[0] = _ij5[0];
                                                vinfos[5].indices[1] = _ij5[1];
                                                vinfos[5].maxsolutions = _nj5;
                                                vinfos[6].jointtype = 1;
                                                vinfos[6].foffset = j6;
                                                vinfos[6].indices[0] = _ij6[0];
                                                vinfos[6].indices[1] = _ij6[1];
                                                vinfos[6].maxsolutions = _nj6;
                                                std::vector<int> vfree(0);
                                                solutions.AddSolution(vinfos, vfree);
                                              }
                                            }
                                          }
                                        }
                                      } while (0);
                                      if (bgotonextstatement)
                                      {
                                        bool bgotonextstatement = true;
                                        do
                                        {
                                          evalcond[0] =
                                              ((-3.14159265358979) +
                                               (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j4)))),
                                                       6.28318530717959)));
                                          evalcond[1] = new_r02;
                                          if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                              IKabs(evalcond[1]) < 0.0000050000000000)
                                          {
                                            bgotonextstatement = false;
                                            {
                                              IkReal j6eval[3];
                                              sj4 = 1.0;
                                              cj4 = 0;
                                              j4 = 1.5707963267949;
                                              j6eval[0] = new_r12;
                                              j6eval[1] = IKsign(new_r12);
                                              j6eval[2] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                              if (IKabs(j6eval[0]) < 0.0000010000000000 ||
                                                  IKabs(j6eval[1]) < 0.0000010000000000 ||
                                                  IKabs(j6eval[2]) < 0.0000010000000000)
                                              {
                                                {
                                                  IkReal j6eval[3];
                                                  sj4 = 1.0;
                                                  cj4 = 0;
                                                  j4 = 1.5707963267949;
                                                  j6eval[0] = sj5;
                                                  j6eval[1] = IKsign(sj5);
                                                  j6eval[2] = ((IKabs(new_r11)) + (IKabs(new_r10)));
                                                  if (IKabs(j6eval[0]) < 0.0000010000000000 ||
                                                      IKabs(j6eval[1]) < 0.0000010000000000 ||
                                                      IKabs(j6eval[2]) < 0.0000010000000000)
                                                  {
                                                    {
                                                      IkReal j6eval[1];
                                                      sj4 = 1.0;
                                                      cj4 = 0;
                                                      j4 = 1.5707963267949;
                                                      j6eval[0] = new_r12;
                                                      if (IKabs(j6eval[0]) < 0.0000010000000000)
                                                      {
                                                        {
                                                          IkReal evalcond[4];
                                                          bool bgotonextstatement = true;
                                                          do
                                                          {
                                                            evalcond[0] = ((-3.14159265358979) +
                                                                           (IKfmod(((3.14159265358979) + (IKabs(j5))),
                                                                                   6.28318530717959)));
                                                            evalcond[1] = new_r22;
                                                            evalcond[2] = new_r11;
                                                            evalcond[3] = new_r10;
                                                            if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                                IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                                IKabs(evalcond[2]) < 0.0000050000000000 &&
                                                                IKabs(evalcond[3]) < 0.0000050000000000)
                                                            {
                                                              bgotonextstatement = false;
                                                              {
                                                                IkReal j6array[1], cj6array[1], sj6array[1];
                                                                bool j6valid[1] = { false };
                                                                _nj6 = 1;
                                                                if (IKabs(((-1.0) * new_r21)) < IKFAST_ATAN2_MAGTHRESH &&
                                                                    IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH &&
                                                                    IKabs(IKsqr(((-1.0) * new_r21)) + IKsqr(new_r20) -
                                                                          1) <= IKFAST_SINCOS_THRESH)
                                                                  continue;
                                                                j6array[0] = IKatan2(((-1.0) * new_r21), new_r20);
                                                                sj6array[0] = IKsin(j6array[0]);
                                                                cj6array[0] = IKcos(j6array[0]);
                                                                if (j6array[0] > IKPI)
                                                                {
                                                                  j6array[0] -= IK2PI;
                                                                }
                                                                else if (j6array[0] < -IKPI)
                                                                {
                                                                  j6array[0] += IK2PI;
                                                                }
                                                                j6valid[0] = true;
                                                                for (int ij6 = 0; ij6 < 1; ++ij6)
                                                                {
                                                                  if (!j6valid[ij6])
                                                                  {
                                                                    continue;
                                                                  }
                                                                  _ij6[0] = ij6;
                                                                  _ij6[1] = -1;
                                                                  for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                                  {
                                                                    if (j6valid[iij6] &&
                                                                        IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                            IKFAST_SOLUTION_THRESH &&
                                                                        IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                            IKFAST_SOLUTION_THRESH)
                                                                    {
                                                                      j6valid[iij6] = false;
                                                                      _ij6[1] = iij6;
                                                                      break;
                                                                    }
                                                                  }
                                                                  j6 = j6array[ij6];
                                                                  cj6 = cj6array[ij6];
                                                                  sj6 = sj6array[ij6];
                                                                  {
                                                                    IkReal evalcond[4];
                                                                    IkReal x343 = IKsin(j6);
                                                                    IkReal x344 = ((1.0) * (IKcos(j6)));
                                                                    evalcond[0] = (x343 + new_r21);
                                                                    evalcond[1] = (new_r20 + (((-1.0) * x344)));
                                                                    evalcond[2] =
                                                                        ((((-1.0) * new_r00)) + (((-1.0) * x343)));
                                                                    evalcond[3] =
                                                                        ((((-1.0) * new_r01)) + (((-1.0) * x344)));
                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                    {
                                                                      continue;
                                                                    }
                                                                  }

                                                                  {
                                                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(
                                                                        7);
                                                                    vinfos[0].jointtype = 1;
                                                                    vinfos[0].foffset = j0;
                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                    vinfos[0].maxsolutions = _nj0;
                                                                    vinfos[1].jointtype = 17;
                                                                    vinfos[1].foffset = j1;
                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                    vinfos[1].maxsolutions = _nj1;
                                                                    vinfos[2].jointtype = 17;
                                                                    vinfos[2].foffset = j2;
                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                    vinfos[2].maxsolutions = _nj2;
                                                                    vinfos[3].jointtype = 17;
                                                                    vinfos[3].foffset = j3;
                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                    vinfos[3].maxsolutions = _nj3;
                                                                    vinfos[4].jointtype = 1;
                                                                    vinfos[4].foffset = j4;
                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                    vinfos[4].maxsolutions = _nj4;
                                                                    vinfos[5].jointtype = 1;
                                                                    vinfos[5].foffset = j5;
                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                    vinfos[5].maxsolutions = _nj5;
                                                                    vinfos[6].jointtype = 1;
                                                                    vinfos[6].foffset = j6;
                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                    vinfos[6].maxsolutions = _nj6;
                                                                    std::vector<int> vfree(0);
                                                                    solutions.AddSolution(vinfos, vfree);
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          } while (0);
                                                          if (bgotonextstatement)
                                                          {
                                                            bool bgotonextstatement = true;
                                                            do
                                                            {
                                                              evalcond[0] =
                                                                  ((-3.14159265358979) +
                                                                   (IKfmod(((3.14159265358979) +
                                                                            (IKabs(((-3.14159265358979) + j5)))),
                                                                           6.28318530717959)));
                                                              evalcond[1] = new_r22;
                                                              evalcond[2] = new_r11;
                                                              evalcond[3] = new_r10;
                                                              if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                                  IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                                  IKabs(evalcond[2]) < 0.0000050000000000 &&
                                                                  IKabs(evalcond[3]) < 0.0000050000000000)
                                                              {
                                                                bgotonextstatement = false;
                                                                {
                                                                  IkReal j6array[1], cj6array[1], sj6array[1];
                                                                  bool j6valid[1] = { false };
                                                                  _nj6 = 1;
                                                                  if (IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH &&
                                                                      IKabs(((-1.0) * new_r20)) <
                                                                          IKFAST_ATAN2_MAGTHRESH &&
                                                                      IKabs(IKsqr(new_r21) + IKsqr(((-1.0) * new_r20)) -
                                                                            1) <= IKFAST_SINCOS_THRESH)
                                                                    continue;
                                                                  j6array[0] = IKatan2(new_r21, ((-1.0) * new_r20));
                                                                  sj6array[0] = IKsin(j6array[0]);
                                                                  cj6array[0] = IKcos(j6array[0]);
                                                                  if (j6array[0] > IKPI)
                                                                  {
                                                                    j6array[0] -= IK2PI;
                                                                  }
                                                                  else if (j6array[0] < -IKPI)
                                                                  {
                                                                    j6array[0] += IK2PI;
                                                                  }
                                                                  j6valid[0] = true;
                                                                  for (int ij6 = 0; ij6 < 1; ++ij6)
                                                                  {
                                                                    if (!j6valid[ij6])
                                                                    {
                                                                      continue;
                                                                    }
                                                                    _ij6[0] = ij6;
                                                                    _ij6[1] = -1;
                                                                    for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                                    {
                                                                      if (j6valid[iij6] &&
                                                                          IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                              IKFAST_SOLUTION_THRESH &&
                                                                          IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                              IKFAST_SOLUTION_THRESH)
                                                                      {
                                                                        j6valid[iij6] = false;
                                                                        _ij6[1] = iij6;
                                                                        break;
                                                                      }
                                                                    }
                                                                    j6 = j6array[ij6];
                                                                    cj6 = cj6array[ij6];
                                                                    sj6 = sj6array[ij6];
                                                                    {
                                                                      IkReal evalcond[4];
                                                                      IkReal x345 = IKcos(j6);
                                                                      IkReal x346 = ((1.0) * (IKsin(j6)));
                                                                      evalcond[0] = (x345 + new_r20);
                                                                      evalcond[1] = (new_r21 + (((-1.0) * x346)));
                                                                      evalcond[2] =
                                                                          ((((-1.0) * new_r00)) + (((-1.0) * x346)));
                                                                      evalcond[3] =
                                                                          ((((-1.0) * new_r01)) + (((-1.0) * x345)));
                                                                      if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                      {
                                                                        continue;
                                                                      }
                                                                    }

                                                                    {
                                                                      std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                          vinfos(7);
                                                                      vinfos[0].jointtype = 1;
                                                                      vinfos[0].foffset = j0;
                                                                      vinfos[0].indices[0] = _ij0[0];
                                                                      vinfos[0].indices[1] = _ij0[1];
                                                                      vinfos[0].maxsolutions = _nj0;
                                                                      vinfos[1].jointtype = 17;
                                                                      vinfos[1].foffset = j1;
                                                                      vinfos[1].indices[0] = _ij1[0];
                                                                      vinfos[1].indices[1] = _ij1[1];
                                                                      vinfos[1].maxsolutions = _nj1;
                                                                      vinfos[2].jointtype = 17;
                                                                      vinfos[2].foffset = j2;
                                                                      vinfos[2].indices[0] = _ij2[0];
                                                                      vinfos[2].indices[1] = _ij2[1];
                                                                      vinfos[2].maxsolutions = _nj2;
                                                                      vinfos[3].jointtype = 17;
                                                                      vinfos[3].foffset = j3;
                                                                      vinfos[3].indices[0] = _ij3[0];
                                                                      vinfos[3].indices[1] = _ij3[1];
                                                                      vinfos[3].maxsolutions = _nj3;
                                                                      vinfos[4].jointtype = 1;
                                                                      vinfos[4].foffset = j4;
                                                                      vinfos[4].indices[0] = _ij4[0];
                                                                      vinfos[4].indices[1] = _ij4[1];
                                                                      vinfos[4].maxsolutions = _nj4;
                                                                      vinfos[5].jointtype = 1;
                                                                      vinfos[5].foffset = j5;
                                                                      vinfos[5].indices[0] = _ij5[0];
                                                                      vinfos[5].indices[1] = _ij5[1];
                                                                      vinfos[5].maxsolutions = _nj5;
                                                                      vinfos[6].jointtype = 1;
                                                                      vinfos[6].foffset = j6;
                                                                      vinfos[6].indices[0] = _ij6[0];
                                                                      vinfos[6].indices[1] = _ij6[1];
                                                                      vinfos[6].maxsolutions = _nj6;
                                                                      std::vector<int> vfree(0);
                                                                      solutions.AddSolution(vinfos, vfree);
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            } while (0);
                                                            if (bgotonextstatement)
                                                            {
                                                              bool bgotonextstatement = true;
                                                              do
                                                              {
                                                                evalcond[0] = IKabs(new_r12);
                                                                evalcond[1] = new_r21;
                                                                evalcond[2] = new_r20;
                                                                if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                                    IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                                    IKabs(evalcond[2]) < 0.0000050000000000)
                                                                {
                                                                  bgotonextstatement = false;
                                                                  {
                                                                    IkReal j6eval[3];
                                                                    sj4 = 1.0;
                                                                    cj4 = 0;
                                                                    j4 = 1.5707963267949;
                                                                    new_r12 = 0;
                                                                    j6eval[0] = sj5;
                                                                    j6eval[1] = IKsign(sj5);
                                                                    j6eval[2] = ((IKabs(new_r11)) + (IKabs(new_r10)));
                                                                    if (IKabs(j6eval[0]) < 0.0000010000000000 ||
                                                                        IKabs(j6eval[1]) < 0.0000010000000000 ||
                                                                        IKabs(j6eval[2]) < 0.0000010000000000)
                                                                    {
                                                                      {
                                                                        IkReal j6eval[1];
                                                                        sj4 = 1.0;
                                                                        cj4 = 0;
                                                                        j4 = 1.5707963267949;
                                                                        new_r12 = 0;
                                                                        j6eval[0] = sj5;
                                                                        if (IKabs(j6eval[0]) < 0.0000010000000000)
                                                                        {
                                                                          {
                                                                            IkReal evalcond[3];
                                                                            bool bgotonextstatement = true;
                                                                            do
                                                                            {
                                                                              evalcond[0] =
                                                                                  ((-3.14159265358979) +
                                                                                   (IKfmod(((3.14159265358979) +
                                                                                            (IKabs(j5))),
                                                                                           6.28318530717959)));
                                                                              evalcond[1] = new_r11;
                                                                              evalcond[2] = new_r10;
                                                                              if (IKabs(evalcond[0]) <
                                                                                      0.0000050000000000 &&
                                                                                  IKabs(evalcond[1]) <
                                                                                      0.0000050000000000 &&
                                                                                  IKabs(evalcond[2]) <
                                                                                      0.0000050000000000)
                                                                              {
                                                                                bgotonextstatement = false;
                                                                                {
                                                                                  IkReal j6array[1], cj6array[1],
                                                                                      sj6array[1];
                                                                                  bool j6valid[1] = { false };
                                                                                  _nj6 = 1;
                                                                                  if (IKabs(((-1.0) * new_r00)) <
                                                                                          IKFAST_ATAN2_MAGTHRESH &&
                                                                                      IKabs(((-1.0) * new_r01)) <
                                                                                          IKFAST_ATAN2_MAGTHRESH &&
                                                                                      IKabs(IKsqr(((-1.0) * new_r00)) +
                                                                                            IKsqr(((-1.0) * new_r01)) -
                                                                                            1) <= IKFAST_SINCOS_THRESH)
                                                                                    continue;
                                                                                  j6array[0] =
                                                                                      IKatan2(((-1.0) * new_r00),
                                                                                              ((-1.0) * new_r01));
                                                                                  sj6array[0] = IKsin(j6array[0]);
                                                                                  cj6array[0] = IKcos(j6array[0]);
                                                                                  if (j6array[0] > IKPI)
                                                                                  {
                                                                                    j6array[0] -= IK2PI;
                                                                                  }
                                                                                  else if (j6array[0] < -IKPI)
                                                                                  {
                                                                                    j6array[0] += IK2PI;
                                                                                  }
                                                                                  j6valid[0] = true;
                                                                                  for (int ij6 = 0; ij6 < 1; ++ij6)
                                                                                  {
                                                                                    if (!j6valid[ij6])
                                                                                    {
                                                                                      continue;
                                                                                    }
                                                                                    _ij6[0] = ij6;
                                                                                    _ij6[1] = -1;
                                                                                    for (int iij6 = ij6 + 1; iij6 < 1;
                                                                                         ++iij6)
                                                                                    {
                                                                                      if (j6valid[iij6] &&
                                                                                          IKabs(cj6array[ij6] -
                                                                                                cj6array[iij6]) <
                                                                                              IKFAST_SOLUTION_THRESH &&
                                                                                          IKabs(sj6array[ij6] -
                                                                                                sj6array[iij6]) <
                                                                                              IKFAST_SOLUTION_THRESH)
                                                                                      {
                                                                                        j6valid[iij6] = false;
                                                                                        _ij6[1] = iij6;
                                                                                        break;
                                                                                      }
                                                                                    }
                                                                                    j6 = j6array[ij6];
                                                                                    cj6 = cj6array[ij6];
                                                                                    sj6 = sj6array[ij6];
                                                                                    {
                                                                                      IkReal evalcond[4];
                                                                                      IkReal x347 = IKsin(j6);
                                                                                      IkReal x348 = IKcos(j6);
                                                                                      evalcond[0] = x347;
                                                                                      evalcond[1] = ((-1.0) * x348);
                                                                                      evalcond[2] =
                                                                                          ((((-1.0) * new_r00)) +
                                                                                           (((-1.0) * x347)));
                                                                                      evalcond[3] =
                                                                                          ((((-1.0) * new_r01)) +
                                                                                           (((-1.0) * x348)));
                                                                                      if (IKabs(evalcond[0]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[1]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[2]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[3]) >
                                                                                              IKFAST_EVALCOND_THRESH)
                                                                                      {
                                                                                        continue;
                                                                                      }
                                                                                    }

                                                                                    {
                                                                                      std::vector<
                                                                                          IkSingleDOFSolutionBase<IkReal> >
                                                                                          vinfos(7);
                                                                                      vinfos[0].jointtype = 1;
                                                                                      vinfos[0].foffset = j0;
                                                                                      vinfos[0].indices[0] = _ij0[0];
                                                                                      vinfos[0].indices[1] = _ij0[1];
                                                                                      vinfos[0].maxsolutions = _nj0;
                                                                                      vinfos[1].jointtype = 17;
                                                                                      vinfos[1].foffset = j1;
                                                                                      vinfos[1].indices[0] = _ij1[0];
                                                                                      vinfos[1].indices[1] = _ij1[1];
                                                                                      vinfos[1].maxsolutions = _nj1;
                                                                                      vinfos[2].jointtype = 17;
                                                                                      vinfos[2].foffset = j2;
                                                                                      vinfos[2].indices[0] = _ij2[0];
                                                                                      vinfos[2].indices[1] = _ij2[1];
                                                                                      vinfos[2].maxsolutions = _nj2;
                                                                                      vinfos[3].jointtype = 17;
                                                                                      vinfos[3].foffset = j3;
                                                                                      vinfos[3].indices[0] = _ij3[0];
                                                                                      vinfos[3].indices[1] = _ij3[1];
                                                                                      vinfos[3].maxsolutions = _nj3;
                                                                                      vinfos[4].jointtype = 1;
                                                                                      vinfos[4].foffset = j4;
                                                                                      vinfos[4].indices[0] = _ij4[0];
                                                                                      vinfos[4].indices[1] = _ij4[1];
                                                                                      vinfos[4].maxsolutions = _nj4;
                                                                                      vinfos[5].jointtype = 1;
                                                                                      vinfos[5].foffset = j5;
                                                                                      vinfos[5].indices[0] = _ij5[0];
                                                                                      vinfos[5].indices[1] = _ij5[1];
                                                                                      vinfos[5].maxsolutions = _nj5;
                                                                                      vinfos[6].jointtype = 1;
                                                                                      vinfos[6].foffset = j6;
                                                                                      vinfos[6].indices[0] = _ij6[0];
                                                                                      vinfos[6].indices[1] = _ij6[1];
                                                                                      vinfos[6].maxsolutions = _nj6;
                                                                                      std::vector<int> vfree(0);
                                                                                      solutions.AddSolution(vinfos,
                                                                                                            vfree);
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            } while (0);
                                                                            if (bgotonextstatement)
                                                                            {
                                                                              bool bgotonextstatement = true;
                                                                              do
                                                                              {
                                                                                evalcond[0] =
                                                                                    ((-3.14159265358979) +
                                                                                     (IKfmod(
                                                                                         ((3.14159265358979) +
                                                                                          (IKabs(((-3.14159265358979) +
                                                                                                  j5)))),
                                                                                         6.28318530717959)));
                                                                                evalcond[1] = new_r11;
                                                                                evalcond[2] = new_r10;
                                                                                if (IKabs(evalcond[0]) <
                                                                                        0.0000050000000000 &&
                                                                                    IKabs(evalcond[1]) <
                                                                                        0.0000050000000000 &&
                                                                                    IKabs(evalcond[2]) <
                                                                                        0.0000050000000000)
                                                                                {
                                                                                  bgotonextstatement = false;
                                                                                  {
                                                                                    IkReal j6array[1], cj6array[1],
                                                                                        sj6array[1];
                                                                                    bool j6valid[1] = { false };
                                                                                    _nj6 = 1;
                                                                                    if (IKabs(((-1.0) * new_r00)) <
                                                                                            IKFAST_ATAN2_MAGTHRESH &&
                                                                                        IKabs(((-1.0) * new_r01)) <
                                                                                            IKFAST_ATAN2_MAGTHRESH &&
                                                                                        IKabs(
                                                                                            IKsqr(((-1.0) * new_r00)) +
                                                                                            IKsqr(((-1.0) * new_r01)) -
                                                                                            1) <= IKFAST_SINCOS_THRESH)
                                                                                      continue;
                                                                                    j6array[0] =
                                                                                        IKatan2(((-1.0) * new_r00),
                                                                                                ((-1.0) * new_r01));
                                                                                    sj6array[0] = IKsin(j6array[0]);
                                                                                    cj6array[0] = IKcos(j6array[0]);
                                                                                    if (j6array[0] > IKPI)
                                                                                    {
                                                                                      j6array[0] -= IK2PI;
                                                                                    }
                                                                                    else if (j6array[0] < -IKPI)
                                                                                    {
                                                                                      j6array[0] += IK2PI;
                                                                                    }
                                                                                    j6valid[0] = true;
                                                                                    for (int ij6 = 0; ij6 < 1; ++ij6)
                                                                                    {
                                                                                      if (!j6valid[ij6])
                                                                                      {
                                                                                        continue;
                                                                                      }
                                                                                      _ij6[0] = ij6;
                                                                                      _ij6[1] = -1;
                                                                                      for (int iij6 = ij6 + 1; iij6 < 1;
                                                                                           ++iij6)
                                                                                      {
                                                                                        if (j6valid[iij6] &&
                                                                                            IKabs(cj6array[ij6] -
                                                                                                  cj6array[iij6]) <
                                                                                                IKFAST_SOLUTION_THRESH &&
                                                                                            IKabs(sj6array[ij6] -
                                                                                                  sj6array[iij6]) <
                                                                                                IKFAST_SOLUTION_THRESH)
                                                                                        {
                                                                                          j6valid[iij6] = false;
                                                                                          _ij6[1] = iij6;
                                                                                          break;
                                                                                        }
                                                                                      }
                                                                                      j6 = j6array[ij6];
                                                                                      cj6 = cj6array[ij6];
                                                                                      sj6 = sj6array[ij6];
                                                                                      {
                                                                                        IkReal evalcond[4];
                                                                                        IkReal x349 = IKsin(j6);
                                                                                        IkReal x350 = IKcos(j6);
                                                                                        evalcond[0] = x349;
                                                                                        evalcond[1] = ((-1.0) * x350);
                                                                                        evalcond[2] =
                                                                                            ((((-1.0) * new_r00)) +
                                                                                             (((-1.0) * x349)));
                                                                                        evalcond[3] =
                                                                                            ((((-1.0) * x350)) +
                                                                                             (((-1.0) * new_r01)));
                                                                                        if (IKabs(evalcond[0]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[1]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[2]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[3]) >
                                                                                                IKFAST_EVALCOND_THRESH)
                                                                                        {
                                                                                          continue;
                                                                                        }
                                                                                      }

                                                                                      {
                                                                                        std::vector<
                                                                                            IkSingleDOFSolutionBase<IkReal> >
                                                                                            vinfos(7);
                                                                                        vinfos[0].jointtype = 1;
                                                                                        vinfos[0].foffset = j0;
                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                        vinfos[1].jointtype = 17;
                                                                                        vinfos[1].foffset = j1;
                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                        vinfos[2].jointtype = 17;
                                                                                        vinfos[2].foffset = j2;
                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                        vinfos[3].jointtype = 17;
                                                                                        vinfos[3].foffset = j3;
                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                        vinfos[4].jointtype = 1;
                                                                                        vinfos[4].foffset = j4;
                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                        vinfos[5].jointtype = 1;
                                                                                        vinfos[5].foffset = j5;
                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                        vinfos[6].jointtype = 1;
                                                                                        vinfos[6].foffset = j6;
                                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                                        vinfos[6].maxsolutions = _nj6;
                                                                                        std::vector<int> vfree(0);
                                                                                        solutions.AddSolution(vinfos,
                                                                                                              vfree);
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              } while (0);
                                                                              if (bgotonextstatement)
                                                                              {
                                                                                bool bgotonextstatement = true;
                                                                                do
                                                                                {
                                                                                  evalcond[0] = ((IKabs(new_r11)) +
                                                                                                 (IKabs(new_r10)));
                                                                                  if (IKabs(evalcond[0]) <
                                                                                      0.0000050000000000)
                                                                                  {
                                                                                    bgotonextstatement = false;
                                                                                    {
                                                                                      IkReal j6array[1], cj6array[1],
                                                                                          sj6array[1];
                                                                                      bool j6valid[1] = { false };
                                                                                      _nj6 = 1;
                                                                                      if (IKabs(((-1.0) * new_r00)) <
                                                                                              IKFAST_ATAN2_MAGTHRESH &&
                                                                                          IKabs(((-1.0) * new_r01)) <
                                                                                              IKFAST_ATAN2_MAGTHRESH &&
                                                                                          IKabs(
                                                                                              IKsqr(((-1.0) * new_r00)) +
                                                                                              IKsqr(((-1.0) * new_r01)) -
                                                                                              1) <= IKFAST_SINCOS_THRESH)
                                                                                        continue;
                                                                                      j6array[0] =
                                                                                          IKatan2(((-1.0) * new_r00),
                                                                                                  ((-1.0) * new_r01));
                                                                                      sj6array[0] = IKsin(j6array[0]);
                                                                                      cj6array[0] = IKcos(j6array[0]);
                                                                                      if (j6array[0] > IKPI)
                                                                                      {
                                                                                        j6array[0] -= IK2PI;
                                                                                      }
                                                                                      else if (j6array[0] < -IKPI)
                                                                                      {
                                                                                        j6array[0] += IK2PI;
                                                                                      }
                                                                                      j6valid[0] = true;
                                                                                      for (int ij6 = 0; ij6 < 1; ++ij6)
                                                                                      {
                                                                                        if (!j6valid[ij6])
                                                                                        {
                                                                                          continue;
                                                                                        }
                                                                                        _ij6[0] = ij6;
                                                                                        _ij6[1] = -1;
                                                                                        for (int iij6 = ij6 + 1;
                                                                                             iij6 < 1; ++iij6)
                                                                                        {
                                                                                          if (j6valid[iij6] &&
                                                                                              IKabs(cj6array[ij6] -
                                                                                                    cj6array[iij6]) <
                                                                                                  IKFAST_SOLUTION_THRESH &&
                                                                                              IKabs(sj6array[ij6] -
                                                                                                    sj6array[iij6]) <
                                                                                                  IKFAST_SOLUTION_THRESH)
                                                                                          {
                                                                                            j6valid[iij6] = false;
                                                                                            _ij6[1] = iij6;
                                                                                            break;
                                                                                          }
                                                                                        }
                                                                                        j6 = j6array[ij6];
                                                                                        cj6 = cj6array[ij6];
                                                                                        sj6 = sj6array[ij6];
                                                                                        {
                                                                                          IkReal evalcond[6];
                                                                                          IkReal x351 = IKsin(j6);
                                                                                          IkReal x352 = IKcos(j6);
                                                                                          IkReal x353 = ((-1.0) * x352);
                                                                                          evalcond[0] = x351;
                                                                                          evalcond[1] = (sj5 * x351);
                                                                                          evalcond[2] = x353;
                                                                                          evalcond[3] = (sj5 * x353);
                                                                                          evalcond[4] =
                                                                                              ((((-1.0) * x351)) +
                                                                                               (((-1.0) * new_r00)));
                                                                                          evalcond[5] =
                                                                                              ((((-1.0) * x352)) +
                                                                                               (((-1.0) * new_r01)));
                                                                                          if (IKabs(evalcond[0]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[1]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[2]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[3]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[4]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[5]) >
                                                                                                  IKFAST_EVALCOND_THRESH)
                                                                                          {
                                                                                            continue;
                                                                                          }
                                                                                        }

                                                                                        {
                                                                                          std::vector<
                                                                                              IkSingleDOFSolutionBase<
                                                                                                  IkReal> >
                                                                                              vinfos(7);
                                                                                          vinfos[0].jointtype = 1;
                                                                                          vinfos[0].foffset = j0;
                                                                                          vinfos[0].indices[0] =
                                                                                              _ij0[0];
                                                                                          vinfos[0].indices[1] =
                                                                                              _ij0[1];
                                                                                          vinfos[0].maxsolutions = _nj0;
                                                                                          vinfos[1].jointtype = 17;
                                                                                          vinfos[1].foffset = j1;
                                                                                          vinfos[1].indices[0] =
                                                                                              _ij1[0];
                                                                                          vinfos[1].indices[1] =
                                                                                              _ij1[1];
                                                                                          vinfos[1].maxsolutions = _nj1;
                                                                                          vinfos[2].jointtype = 17;
                                                                                          vinfos[2].foffset = j2;
                                                                                          vinfos[2].indices[0] =
                                                                                              _ij2[0];
                                                                                          vinfos[2].indices[1] =
                                                                                              _ij2[1];
                                                                                          vinfos[2].maxsolutions = _nj2;
                                                                                          vinfos[3].jointtype = 17;
                                                                                          vinfos[3].foffset = j3;
                                                                                          vinfos[3].indices[0] =
                                                                                              _ij3[0];
                                                                                          vinfos[3].indices[1] =
                                                                                              _ij3[1];
                                                                                          vinfos[3].maxsolutions = _nj3;
                                                                                          vinfos[4].jointtype = 1;
                                                                                          vinfos[4].foffset = j4;
                                                                                          vinfos[4].indices[0] =
                                                                                              _ij4[0];
                                                                                          vinfos[4].indices[1] =
                                                                                              _ij4[1];
                                                                                          vinfos[4].maxsolutions = _nj4;
                                                                                          vinfos[5].jointtype = 1;
                                                                                          vinfos[5].foffset = j5;
                                                                                          vinfos[5].indices[0] =
                                                                                              _ij5[0];
                                                                                          vinfos[5].indices[1] =
                                                                                              _ij5[1];
                                                                                          vinfos[5].maxsolutions = _nj5;
                                                                                          vinfos[6].jointtype = 1;
                                                                                          vinfos[6].foffset = j6;
                                                                                          vinfos[6].indices[0] =
                                                                                              _ij6[0];
                                                                                          vinfos[6].indices[1] =
                                                                                              _ij6[1];
                                                                                          vinfos[6].maxsolutions = _nj6;
                                                                                          std::vector<int> vfree(0);
                                                                                          solutions.AddSolution(vinfos,
                                                                                                                vfree);
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                } while (0);
                                                                                if (bgotonextstatement)
                                                                                {
                                                                                  bool bgotonextstatement = true;
                                                                                  do
                                                                                  {
                                                                                    if (1)
                                                                                    {
                                                                                      bgotonextstatement = false;
                                                                                      continue;  // branch miss [j6]
                                                                                    }
                                                                                  } while (0);
                                                                                  if (bgotonextstatement) {}
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                        else
                                                                        {
                                                                          {
                                                                            IkReal j6array[1], cj6array[1], sj6array[1];
                                                                            bool j6valid[1] = { false };
                                                                            _nj6 = 1;
                                                                            CheckValue<IkReal> x354 =
                                                                                IKPowWithIntegerCheck(sj5, -1);
                                                                            if (!x354.valid)
                                                                            {
                                                                              continue;
                                                                            }
                                                                            if (IKabs(((-1.0) * new_r11 * sj5)) <
                                                                                    IKFAST_ATAN2_MAGTHRESH &&
                                                                                IKabs((new_r10 * (x354.value))) <
                                                                                    IKFAST_ATAN2_MAGTHRESH &&
                                                                                IKabs(IKsqr(((-1.0) * new_r11 * sj5)) +
                                                                                      IKsqr((new_r10 * (x354.value))) -
                                                                                      1) <= IKFAST_SINCOS_THRESH)
                                                                              continue;
                                                                            j6array[0] =
                                                                                IKatan2(((-1.0) * new_r11 * sj5),
                                                                                        (new_r10 * (x354.value)));
                                                                            sj6array[0] = IKsin(j6array[0]);
                                                                            cj6array[0] = IKcos(j6array[0]);
                                                                            if (j6array[0] > IKPI)
                                                                            {
                                                                              j6array[0] -= IK2PI;
                                                                            }
                                                                            else if (j6array[0] < -IKPI)
                                                                            {
                                                                              j6array[0] += IK2PI;
                                                                            }
                                                                            j6valid[0] = true;
                                                                            for (int ij6 = 0; ij6 < 1; ++ij6)
                                                                            {
                                                                              if (!j6valid[ij6])
                                                                              {
                                                                                continue;
                                                                              }
                                                                              _ij6[0] = ij6;
                                                                              _ij6[1] = -1;
                                                                              for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                                              {
                                                                                if (j6valid[iij6] &&
                                                                                    IKabs(cj6array[ij6] -
                                                                                          cj6array[iij6]) <
                                                                                        IKFAST_SOLUTION_THRESH &&
                                                                                    IKabs(sj6array[ij6] -
                                                                                          sj6array[iij6]) <
                                                                                        IKFAST_SOLUTION_THRESH)
                                                                                {
                                                                                  j6valid[iij6] = false;
                                                                                  _ij6[1] = iij6;
                                                                                  break;
                                                                                }
                                                                              }
                                                                              j6 = j6array[ij6];
                                                                              cj6 = cj6array[ij6];
                                                                              sj6 = sj6array[ij6];
                                                                              {
                                                                                IkReal evalcond[6];
                                                                                IkReal x355 = IKsin(j6);
                                                                                IkReal x356 = IKcos(j6);
                                                                                IkReal x357 = ((1.0) * x356);
                                                                                evalcond[0] =
                                                                                    (((sj5 * x355)) + new_r11);
                                                                                evalcond[1] =
                                                                                    (((new_r11 * sj5)) + x355);
                                                                                evalcond[2] =
                                                                                    (new_r10 + (((-1.0) * sj5 * x357)));
                                                                                evalcond[3] = ((((-1.0) * x355)) +
                                                                                               (((-1.0) * new_r00)));
                                                                                evalcond[4] = ((((-1.0) * x357)) +
                                                                                               (((-1.0) * new_r01)));
                                                                                evalcond[5] = (((new_r10 * sj5)) +
                                                                                               (((-1.0) * x357)));
                                                                                if (IKabs(evalcond[0]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[1]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[2]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[3]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[4]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[5]) >
                                                                                        IKFAST_EVALCOND_THRESH)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                              }

                                                                              {
                                                                                std::vector<
                                                                                    IkSingleDOFSolutionBase<IkReal> >
                                                                                    vinfos(7);
                                                                                vinfos[0].jointtype = 1;
                                                                                vinfos[0].foffset = j0;
                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                vinfos[1].jointtype = 17;
                                                                                vinfos[1].foffset = j1;
                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                vinfos[2].jointtype = 17;
                                                                                vinfos[2].foffset = j2;
                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                vinfos[3].jointtype = 17;
                                                                                vinfos[3].foffset = j3;
                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                vinfos[4].jointtype = 1;
                                                                                vinfos[4].foffset = j4;
                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                vinfos[5].jointtype = 1;
                                                                                vinfos[5].foffset = j5;
                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                vinfos[6].jointtype = 1;
                                                                                vinfos[6].foffset = j6;
                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                std::vector<int> vfree(0);
                                                                                solutions.AddSolution(vinfos, vfree);
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      {
                                                                        IkReal j6array[1], cj6array[1], sj6array[1];
                                                                        bool j6valid[1] = { false };
                                                                        _nj6 = 1;
                                                                        CheckValue<IkReal> x358 =
                                                                            IKPowWithIntegerCheck(IKsign(sj5), -1);
                                                                        if (!x358.valid)
                                                                        {
                                                                          continue;
                                                                        }
                                                                        CheckValue<IkReal> x359 =
                                                                            IKatan2WithCheck(IkReal(((-1.0) * new_r11)),
                                                                                             IkReal(new_r10),
                                                                                             IKFAST_ATAN2_MAGTHRESH);
                                                                        if (!x359.valid)
                                                                        {
                                                                          continue;
                                                                        }
                                                                        j6array[0] =
                                                                            ((-1.5707963267949) +
                                                                             (((1.5707963267949) * (x358.value))) +
                                                                             (x359.value));
                                                                        sj6array[0] = IKsin(j6array[0]);
                                                                        cj6array[0] = IKcos(j6array[0]);
                                                                        if (j6array[0] > IKPI)
                                                                        {
                                                                          j6array[0] -= IK2PI;
                                                                        }
                                                                        else if (j6array[0] < -IKPI)
                                                                        {
                                                                          j6array[0] += IK2PI;
                                                                        }
                                                                        j6valid[0] = true;
                                                                        for (int ij6 = 0; ij6 < 1; ++ij6)
                                                                        {
                                                                          if (!j6valid[ij6])
                                                                          {
                                                                            continue;
                                                                          }
                                                                          _ij6[0] = ij6;
                                                                          _ij6[1] = -1;
                                                                          for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                                          {
                                                                            if (j6valid[iij6] &&
                                                                                IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                                    IKFAST_SOLUTION_THRESH &&
                                                                                IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                                    IKFAST_SOLUTION_THRESH)
                                                                            {
                                                                              j6valid[iij6] = false;
                                                                              _ij6[1] = iij6;
                                                                              break;
                                                                            }
                                                                          }
                                                                          j6 = j6array[ij6];
                                                                          cj6 = cj6array[ij6];
                                                                          sj6 = sj6array[ij6];
                                                                          {
                                                                            IkReal evalcond[6];
                                                                            IkReal x360 = IKsin(j6);
                                                                            IkReal x361 = IKcos(j6);
                                                                            IkReal x362 = ((1.0) * x361);
                                                                            evalcond[0] = (((sj5 * x360)) + new_r11);
                                                                            evalcond[1] = (((new_r11 * sj5)) + x360);
                                                                            evalcond[2] =
                                                                                ((((-1.0) * sj5 * x362)) + new_r10);
                                                                            evalcond[3] = ((((-1.0) * x360)) +
                                                                                           (((-1.0) * new_r00)));
                                                                            evalcond[4] = ((((-1.0) * x362)) +
                                                                                           (((-1.0) * new_r01)));
                                                                            evalcond[5] =
                                                                                (((new_r10 * sj5)) + (((-1.0) * x362)));
                                                                            if (IKabs(evalcond[0]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[1]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[2]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[3]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[4]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[5]) >
                                                                                    IKFAST_EVALCOND_THRESH)
                                                                            {
                                                                              continue;
                                                                            }
                                                                          }

                                                                          {
                                                                            std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                                vinfos(7);
                                                                            vinfos[0].jointtype = 1;
                                                                            vinfos[0].foffset = j0;
                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                            vinfos[0].maxsolutions = _nj0;
                                                                            vinfos[1].jointtype = 17;
                                                                            vinfos[1].foffset = j1;
                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                            vinfos[1].maxsolutions = _nj1;
                                                                            vinfos[2].jointtype = 17;
                                                                            vinfos[2].foffset = j2;
                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                            vinfos[2].maxsolutions = _nj2;
                                                                            vinfos[3].jointtype = 17;
                                                                            vinfos[3].foffset = j3;
                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                            vinfos[3].maxsolutions = _nj3;
                                                                            vinfos[4].jointtype = 1;
                                                                            vinfos[4].foffset = j4;
                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                            vinfos[4].maxsolutions = _nj4;
                                                                            vinfos[5].jointtype = 1;
                                                                            vinfos[5].foffset = j5;
                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                            vinfos[5].maxsolutions = _nj5;
                                                                            vinfos[6].jointtype = 1;
                                                                            vinfos[6].foffset = j6;
                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                            vinfos[6].maxsolutions = _nj6;
                                                                            std::vector<int> vfree(0);
                                                                            solutions.AddSolution(vinfos, vfree);
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              } while (0);
                                                              if (bgotonextstatement)
                                                              {
                                                                bool bgotonextstatement = true;
                                                                do
                                                                {
                                                                  evalcond[0] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                                  if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                  {
                                                                    bgotonextstatement = false;
                                                                    {
                                                                      IkReal j6array[1], cj6array[1], sj6array[1];
                                                                      bool j6valid[1] = { false };
                                                                      _nj6 = 1;
                                                                      if (IKabs(((-1.0) * new_r00)) <
                                                                              IKFAST_ATAN2_MAGTHRESH &&
                                                                          IKabs(((-1.0) * new_r01)) <
                                                                              IKFAST_ATAN2_MAGTHRESH &&
                                                                          IKabs(IKsqr(((-1.0) * new_r00)) +
                                                                                IKsqr(((-1.0) * new_r01)) - 1) <=
                                                                              IKFAST_SINCOS_THRESH)
                                                                        continue;
                                                                      j6array[0] = IKatan2(((-1.0) * new_r00),
                                                                                           ((-1.0) * new_r01));
                                                                      sj6array[0] = IKsin(j6array[0]);
                                                                      cj6array[0] = IKcos(j6array[0]);
                                                                      if (j6array[0] > IKPI)
                                                                      {
                                                                        j6array[0] -= IK2PI;
                                                                      }
                                                                      else if (j6array[0] < -IKPI)
                                                                      {
                                                                        j6array[0] += IK2PI;
                                                                      }
                                                                      j6valid[0] = true;
                                                                      for (int ij6 = 0; ij6 < 1; ++ij6)
                                                                      {
                                                                        if (!j6valid[ij6])
                                                                        {
                                                                          continue;
                                                                        }
                                                                        _ij6[0] = ij6;
                                                                        _ij6[1] = -1;
                                                                        for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                                        {
                                                                          if (j6valid[iij6] &&
                                                                              IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                                  IKFAST_SOLUTION_THRESH &&
                                                                              IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                                  IKFAST_SOLUTION_THRESH)
                                                                          {
                                                                            j6valid[iij6] = false;
                                                                            _ij6[1] = iij6;
                                                                            break;
                                                                          }
                                                                        }
                                                                        j6 = j6array[ij6];
                                                                        cj6 = cj6array[ij6];
                                                                        sj6 = sj6array[ij6];
                                                                        {
                                                                          IkReal evalcond[6];
                                                                          IkReal x363 = IKsin(j6);
                                                                          IkReal x364 = IKcos(j6);
                                                                          IkReal x365 = ((-1.0) * x364);
                                                                          evalcond[0] = x363;
                                                                          evalcond[1] = (new_r22 * x363);
                                                                          evalcond[2] = x365;
                                                                          evalcond[3] = (new_r22 * x365);
                                                                          evalcond[4] = ((((-1.0) * x363)) +
                                                                                         (((-1.0) * new_r00)));
                                                                          evalcond[5] = ((((-1.0) * x364)) +
                                                                                         (((-1.0) * new_r01)));
                                                                          if (IKabs(evalcond[0]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[1]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[2]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[3]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[4]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[5]) >
                                                                                  IKFAST_EVALCOND_THRESH)
                                                                          {
                                                                            continue;
                                                                          }
                                                                        }

                                                                        {
                                                                          std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                              vinfos(7);
                                                                          vinfos[0].jointtype = 1;
                                                                          vinfos[0].foffset = j0;
                                                                          vinfos[0].indices[0] = _ij0[0];
                                                                          vinfos[0].indices[1] = _ij0[1];
                                                                          vinfos[0].maxsolutions = _nj0;
                                                                          vinfos[1].jointtype = 17;
                                                                          vinfos[1].foffset = j1;
                                                                          vinfos[1].indices[0] = _ij1[0];
                                                                          vinfos[1].indices[1] = _ij1[1];
                                                                          vinfos[1].maxsolutions = _nj1;
                                                                          vinfos[2].jointtype = 17;
                                                                          vinfos[2].foffset = j2;
                                                                          vinfos[2].indices[0] = _ij2[0];
                                                                          vinfos[2].indices[1] = _ij2[1];
                                                                          vinfos[2].maxsolutions = _nj2;
                                                                          vinfos[3].jointtype = 17;
                                                                          vinfos[3].foffset = j3;
                                                                          vinfos[3].indices[0] = _ij3[0];
                                                                          vinfos[3].indices[1] = _ij3[1];
                                                                          vinfos[3].maxsolutions = _nj3;
                                                                          vinfos[4].jointtype = 1;
                                                                          vinfos[4].foffset = j4;
                                                                          vinfos[4].indices[0] = _ij4[0];
                                                                          vinfos[4].indices[1] = _ij4[1];
                                                                          vinfos[4].maxsolutions = _nj4;
                                                                          vinfos[5].jointtype = 1;
                                                                          vinfos[5].foffset = j5;
                                                                          vinfos[5].indices[0] = _ij5[0];
                                                                          vinfos[5].indices[1] = _ij5[1];
                                                                          vinfos[5].maxsolutions = _nj5;
                                                                          vinfos[6].jointtype = 1;
                                                                          vinfos[6].foffset = j6;
                                                                          vinfos[6].indices[0] = _ij6[0];
                                                                          vinfos[6].indices[1] = _ij6[1];
                                                                          vinfos[6].maxsolutions = _nj6;
                                                                          std::vector<int> vfree(0);
                                                                          solutions.AddSolution(vinfos, vfree);
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                } while (0);
                                                                if (bgotonextstatement)
                                                                {
                                                                  bool bgotonextstatement = true;
                                                                  do
                                                                  {
                                                                    if (1)
                                                                    {
                                                                      bgotonextstatement = false;
                                                                      continue;  // branch miss [j6]
                                                                    }
                                                                  } while (0);
                                                                  if (bgotonextstatement) {}
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                      else
                                                      {
                                                        {
                                                          IkReal j6array[1], cj6array[1], sj6array[1];
                                                          bool j6valid[1] = { false };
                                                          _nj6 = 1;
                                                          CheckValue<IkReal> x366 = IKPowWithIntegerCheck(new_r12, -1);
                                                          if (!x366.valid)
                                                          {
                                                            continue;
                                                          }
                                                          if (IKabs(((-1.0) * new_r00)) < IKFAST_ATAN2_MAGTHRESH &&
                                                              IKabs(((-1.0) * new_r20 * (x366.value))) <
                                                                  IKFAST_ATAN2_MAGTHRESH &&
                                                              IKabs(IKsqr(((-1.0) * new_r00)) +
                                                                    IKsqr(((-1.0) * new_r20 * (x366.value))) - 1) <=
                                                                  IKFAST_SINCOS_THRESH)
                                                            continue;
                                                          j6array[0] = IKatan2(((-1.0) * new_r00),
                                                                               ((-1.0) * new_r20 * (x366.value)));
                                                          sj6array[0] = IKsin(j6array[0]);
                                                          cj6array[0] = IKcos(j6array[0]);
                                                          if (j6array[0] > IKPI)
                                                          {
                                                            j6array[0] -= IK2PI;
                                                          }
                                                          else if (j6array[0] < -IKPI)
                                                          {
                                                            j6array[0] += IK2PI;
                                                          }
                                                          j6valid[0] = true;
                                                          for (int ij6 = 0; ij6 < 1; ++ij6)
                                                          {
                                                            if (!j6valid[ij6])
                                                            {
                                                              continue;
                                                            }
                                                            _ij6[0] = ij6;
                                                            _ij6[1] = -1;
                                                            for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                            {
                                                              if (j6valid[iij6] &&
                                                                  IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                      IKFAST_SOLUTION_THRESH &&
                                                                  IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                      IKFAST_SOLUTION_THRESH)
                                                              {
                                                                j6valid[iij6] = false;
                                                                _ij6[1] = iij6;
                                                                break;
                                                              }
                                                            }
                                                            j6 = j6array[ij6];
                                                            cj6 = cj6array[ij6];
                                                            sj6 = sj6array[ij6];
                                                            {
                                                              IkReal evalcond[8];
                                                              IkReal x367 = IKsin(j6);
                                                              IkReal x368 = IKcos(j6);
                                                              IkReal x369 = ((1.0) * x368);
                                                              IkReal x370 = ((1.0) * x367);
                                                              evalcond[0] = (new_r20 + ((new_r12 * x368)));
                                                              evalcond[1] = (((sj5 * x367)) + new_r11);
                                                              evalcond[2] = ((((-1.0) * new_r12 * x370)) + new_r21);
                                                              evalcond[3] = ((((-1.0) * sj5 * x369)) + new_r10);
                                                              evalcond[4] = ((((-1.0) * x370)) + (((-1.0) * new_r00)));
                                                              evalcond[5] = ((((-1.0) * x369)) + (((-1.0) * new_r01)));
                                                              evalcond[6] =
                                                                  (((new_r11 * sj5)) + ((cj5 * new_r21)) + x367);
                                                              evalcond[7] = (((new_r10 * sj5)) + (((-1.0) * x369)) +
                                                                             ((cj5 * new_r20)));
                                                              if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                              {
                                                                continue;
                                                              }
                                                            }

                                                            {
                                                              std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                              vinfos[0].jointtype = 1;
                                                              vinfos[0].foffset = j0;
                                                              vinfos[0].indices[0] = _ij0[0];
                                                              vinfos[0].indices[1] = _ij0[1];
                                                              vinfos[0].maxsolutions = _nj0;
                                                              vinfos[1].jointtype = 17;
                                                              vinfos[1].foffset = j1;
                                                              vinfos[1].indices[0] = _ij1[0];
                                                              vinfos[1].indices[1] = _ij1[1];
                                                              vinfos[1].maxsolutions = _nj1;
                                                              vinfos[2].jointtype = 17;
                                                              vinfos[2].foffset = j2;
                                                              vinfos[2].indices[0] = _ij2[0];
                                                              vinfos[2].indices[1] = _ij2[1];
                                                              vinfos[2].maxsolutions = _nj2;
                                                              vinfos[3].jointtype = 17;
                                                              vinfos[3].foffset = j3;
                                                              vinfos[3].indices[0] = _ij3[0];
                                                              vinfos[3].indices[1] = _ij3[1];
                                                              vinfos[3].maxsolutions = _nj3;
                                                              vinfos[4].jointtype = 1;
                                                              vinfos[4].foffset = j4;
                                                              vinfos[4].indices[0] = _ij4[0];
                                                              vinfos[4].indices[1] = _ij4[1];
                                                              vinfos[4].maxsolutions = _nj4;
                                                              vinfos[5].jointtype = 1;
                                                              vinfos[5].foffset = j5;
                                                              vinfos[5].indices[0] = _ij5[0];
                                                              vinfos[5].indices[1] = _ij5[1];
                                                              vinfos[5].maxsolutions = _nj5;
                                                              vinfos[6].jointtype = 1;
                                                              vinfos[6].foffset = j6;
                                                              vinfos[6].indices[0] = _ij6[0];
                                                              vinfos[6].indices[1] = _ij6[1];
                                                              vinfos[6].maxsolutions = _nj6;
                                                              std::vector<int> vfree(0);
                                                              solutions.AddSolution(vinfos, vfree);
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                  else
                                                  {
                                                    {
                                                      IkReal j6array[1], cj6array[1], sj6array[1];
                                                      bool j6valid[1] = { false };
                                                      _nj6 = 1;
                                                      CheckValue<IkReal> x371 = IKPowWithIntegerCheck(IKsign(sj5), -1);
                                                      if (!x371.valid)
                                                      {
                                                        continue;
                                                      }
                                                      CheckValue<IkReal> x372 =
                                                          IKatan2WithCheck(IkReal(((-1.0) * new_r11)), IkReal(new_r10),
                                                                           IKFAST_ATAN2_MAGTHRESH);
                                                      if (!x372.valid)
                                                      {
                                                        continue;
                                                      }
                                                      j6array[0] =
                                                          ((-1.5707963267949) + (((1.5707963267949) * (x371.value))) +
                                                           (x372.value));
                                                      sj6array[0] = IKsin(j6array[0]);
                                                      cj6array[0] = IKcos(j6array[0]);
                                                      if (j6array[0] > IKPI)
                                                      {
                                                        j6array[0] -= IK2PI;
                                                      }
                                                      else if (j6array[0] < -IKPI)
                                                      {
                                                        j6array[0] += IK2PI;
                                                      }
                                                      j6valid[0] = true;
                                                      for (int ij6 = 0; ij6 < 1; ++ij6)
                                                      {
                                                        if (!j6valid[ij6])
                                                        {
                                                          continue;
                                                        }
                                                        _ij6[0] = ij6;
                                                        _ij6[1] = -1;
                                                        for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                        {
                                                          if (j6valid[iij6] &&
                                                              IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                  IKFAST_SOLUTION_THRESH &&
                                                              IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                  IKFAST_SOLUTION_THRESH)
                                                          {
                                                            j6valid[iij6] = false;
                                                            _ij6[1] = iij6;
                                                            break;
                                                          }
                                                        }
                                                        j6 = j6array[ij6];
                                                        cj6 = cj6array[ij6];
                                                        sj6 = sj6array[ij6];
                                                        {
                                                          IkReal evalcond[8];
                                                          IkReal x373 = IKsin(j6);
                                                          IkReal x374 = IKcos(j6);
                                                          IkReal x375 = ((1.0) * x374);
                                                          IkReal x376 = ((1.0) * x373);
                                                          evalcond[0] = (((new_r12 * x374)) + new_r20);
                                                          evalcond[1] = (((sj5 * x373)) + new_r11);
                                                          evalcond[2] = ((((-1.0) * new_r12 * x376)) + new_r21);
                                                          evalcond[3] = ((((-1.0) * sj5 * x375)) + new_r10);
                                                          evalcond[4] = ((((-1.0) * x376)) + (((-1.0) * new_r00)));
                                                          evalcond[5] = ((((-1.0) * x375)) + (((-1.0) * new_r01)));
                                                          evalcond[6] = (((new_r11 * sj5)) + ((cj5 * new_r21)) + x373);
                                                          evalcond[7] = (((new_r10 * sj5)) + (((-1.0) * x375)) +
                                                                         ((cj5 * new_r20)));
                                                          if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                          {
                                                            continue;
                                                          }
                                                        }

                                                        {
                                                          std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                          vinfos[0].jointtype = 1;
                                                          vinfos[0].foffset = j0;
                                                          vinfos[0].indices[0] = _ij0[0];
                                                          vinfos[0].indices[1] = _ij0[1];
                                                          vinfos[0].maxsolutions = _nj0;
                                                          vinfos[1].jointtype = 17;
                                                          vinfos[1].foffset = j1;
                                                          vinfos[1].indices[0] = _ij1[0];
                                                          vinfos[1].indices[1] = _ij1[1];
                                                          vinfos[1].maxsolutions = _nj1;
                                                          vinfos[2].jointtype = 17;
                                                          vinfos[2].foffset = j2;
                                                          vinfos[2].indices[0] = _ij2[0];
                                                          vinfos[2].indices[1] = _ij2[1];
                                                          vinfos[2].maxsolutions = _nj2;
                                                          vinfos[3].jointtype = 17;
                                                          vinfos[3].foffset = j3;
                                                          vinfos[3].indices[0] = _ij3[0];
                                                          vinfos[3].indices[1] = _ij3[1];
                                                          vinfos[3].maxsolutions = _nj3;
                                                          vinfos[4].jointtype = 1;
                                                          vinfos[4].foffset = j4;
                                                          vinfos[4].indices[0] = _ij4[0];
                                                          vinfos[4].indices[1] = _ij4[1];
                                                          vinfos[4].maxsolutions = _nj4;
                                                          vinfos[5].jointtype = 1;
                                                          vinfos[5].foffset = j5;
                                                          vinfos[5].indices[0] = _ij5[0];
                                                          vinfos[5].indices[1] = _ij5[1];
                                                          vinfos[5].maxsolutions = _nj5;
                                                          vinfos[6].jointtype = 1;
                                                          vinfos[6].foffset = j6;
                                                          vinfos[6].indices[0] = _ij6[0];
                                                          vinfos[6].indices[1] = _ij6[1];
                                                          vinfos[6].maxsolutions = _nj6;
                                                          std::vector<int> vfree(0);
                                                          solutions.AddSolution(vinfos, vfree);
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                              else
                                              {
                                                {
                                                  IkReal j6array[1], cj6array[1], sj6array[1];
                                                  bool j6valid[1] = { false };
                                                  _nj6 = 1;
                                                  CheckValue<IkReal> x377 =
                                                      IKatan2WithCheck(IkReal(new_r21), IkReal(((-1.0) * new_r20)),
                                                                       IKFAST_ATAN2_MAGTHRESH);
                                                  if (!x377.valid)
                                                  {
                                                    continue;
                                                  }
                                                  CheckValue<IkReal> x378 = IKPowWithIntegerCheck(IKsign(new_r12), -1);
                                                  if (!x378.valid)
                                                  {
                                                    continue;
                                                  }
                                                  j6array[0] = ((-1.5707963267949) + (x377.value) +
                                                                (((1.5707963267949) * (x378.value))));
                                                  sj6array[0] = IKsin(j6array[0]);
                                                  cj6array[0] = IKcos(j6array[0]);
                                                  if (j6array[0] > IKPI)
                                                  {
                                                    j6array[0] -= IK2PI;
                                                  }
                                                  else if (j6array[0] < -IKPI)
                                                  {
                                                    j6array[0] += IK2PI;
                                                  }
                                                  j6valid[0] = true;
                                                  for (int ij6 = 0; ij6 < 1; ++ij6)
                                                  {
                                                    if (!j6valid[ij6])
                                                    {
                                                      continue;
                                                    }
                                                    _ij6[0] = ij6;
                                                    _ij6[1] = -1;
                                                    for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                    {
                                                      if (j6valid[iij6] &&
                                                          IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                              IKFAST_SOLUTION_THRESH &&
                                                          IKabs(sj6array[ij6] - sj6array[iij6]) < IKFAST_SOLUTION_THRESH)
                                                      {
                                                        j6valid[iij6] = false;
                                                        _ij6[1] = iij6;
                                                        break;
                                                      }
                                                    }
                                                    j6 = j6array[ij6];
                                                    cj6 = cj6array[ij6];
                                                    sj6 = sj6array[ij6];
                                                    {
                                                      IkReal evalcond[8];
                                                      IkReal x379 = IKsin(j6);
                                                      IkReal x380 = IKcos(j6);
                                                      IkReal x381 = ((1.0) * x380);
                                                      IkReal x382 = ((1.0) * x379);
                                                      evalcond[0] = (((new_r12 * x380)) + new_r20);
                                                      evalcond[1] = (((sj5 * x379)) + new_r11);
                                                      evalcond[2] = ((((-1.0) * new_r12 * x382)) + new_r21);
                                                      evalcond[3] = ((((-1.0) * sj5 * x381)) + new_r10);
                                                      evalcond[4] = ((((-1.0) * x382)) + (((-1.0) * new_r00)));
                                                      evalcond[5] = ((((-1.0) * x381)) + (((-1.0) * new_r01)));
                                                      evalcond[6] = (((new_r11 * sj5)) + ((cj5 * new_r21)) + x379);
                                                      evalcond[7] =
                                                          (((new_r10 * sj5)) + ((cj5 * new_r20)) + (((-1.0) * x381)));
                                                      if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                      {
                                                        continue;
                                                      }
                                                    }

                                                    {
                                                      std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                      vinfos[0].jointtype = 1;
                                                      vinfos[0].foffset = j0;
                                                      vinfos[0].indices[0] = _ij0[0];
                                                      vinfos[0].indices[1] = _ij0[1];
                                                      vinfos[0].maxsolutions = _nj0;
                                                      vinfos[1].jointtype = 17;
                                                      vinfos[1].foffset = j1;
                                                      vinfos[1].indices[0] = _ij1[0];
                                                      vinfos[1].indices[1] = _ij1[1];
                                                      vinfos[1].maxsolutions = _nj1;
                                                      vinfos[2].jointtype = 17;
                                                      vinfos[2].foffset = j2;
                                                      vinfos[2].indices[0] = _ij2[0];
                                                      vinfos[2].indices[1] = _ij2[1];
                                                      vinfos[2].maxsolutions = _nj2;
                                                      vinfos[3].jointtype = 17;
                                                      vinfos[3].foffset = j3;
                                                      vinfos[3].indices[0] = _ij3[0];
                                                      vinfos[3].indices[1] = _ij3[1];
                                                      vinfos[3].maxsolutions = _nj3;
                                                      vinfos[4].jointtype = 1;
                                                      vinfos[4].foffset = j4;
                                                      vinfos[4].indices[0] = _ij4[0];
                                                      vinfos[4].indices[1] = _ij4[1];
                                                      vinfos[4].maxsolutions = _nj4;
                                                      vinfos[5].jointtype = 1;
                                                      vinfos[5].foffset = j5;
                                                      vinfos[5].indices[0] = _ij5[0];
                                                      vinfos[5].indices[1] = _ij5[1];
                                                      vinfos[5].maxsolutions = _nj5;
                                                      vinfos[6].jointtype = 1;
                                                      vinfos[6].foffset = j6;
                                                      vinfos[6].indices[0] = _ij6[0];
                                                      vinfos[6].indices[1] = _ij6[1];
                                                      vinfos[6].maxsolutions = _nj6;
                                                      std::vector<int> vfree(0);
                                                      solutions.AddSolution(vinfos, vfree);
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        } while (0);
                                        if (bgotonextstatement)
                                        {
                                          bool bgotonextstatement = true;
                                          do
                                          {
                                            evalcond[0] =
                                                ((-3.14159265358979) +
                                                 (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j4)))),
                                                         6.28318530717959)));
                                            evalcond[1] = new_r02;
                                            if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                IKabs(evalcond[1]) < 0.0000050000000000)
                                            {
                                              bgotonextstatement = false;
                                              {
                                                IkReal j6array[1], cj6array[1], sj6array[1];
                                                bool j6valid[1] = { false };
                                                _nj6 = 1;
                                                if (IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH &&
                                                    IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH &&
                                                    IKabs(IKsqr(new_r00) + IKsqr(new_r01) - 1) <= IKFAST_SINCOS_THRESH)
                                                  continue;
                                                j6array[0] = IKatan2(new_r00, new_r01);
                                                sj6array[0] = IKsin(j6array[0]);
                                                cj6array[0] = IKcos(j6array[0]);
                                                if (j6array[0] > IKPI)
                                                {
                                                  j6array[0] -= IK2PI;
                                                }
                                                else if (j6array[0] < -IKPI)
                                                {
                                                  j6array[0] += IK2PI;
                                                }
                                                j6valid[0] = true;
                                                for (int ij6 = 0; ij6 < 1; ++ij6)
                                                {
                                                  if (!j6valid[ij6])
                                                  {
                                                    continue;
                                                  }
                                                  _ij6[0] = ij6;
                                                  _ij6[1] = -1;
                                                  for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                  {
                                                    if (j6valid[iij6] &&
                                                        IKabs(cj6array[ij6] - cj6array[iij6]) < IKFAST_SOLUTION_THRESH &&
                                                        IKabs(sj6array[ij6] - sj6array[iij6]) < IKFAST_SOLUTION_THRESH)
                                                    {
                                                      j6valid[iij6] = false;
                                                      _ij6[1] = iij6;
                                                      break;
                                                    }
                                                  }
                                                  j6 = j6array[ij6];
                                                  cj6 = cj6array[ij6];
                                                  sj6 = sj6array[ij6];
                                                  {
                                                    IkReal evalcond[8];
                                                    IkReal x383 = IKsin(j6);
                                                    IkReal x384 = IKcos(j6);
                                                    IkReal x385 = ((1.0) * sj5);
                                                    IkReal x386 = ((1.0) * x384);
                                                    evalcond[0] = (((new_r12 * x383)) + new_r21);
                                                    evalcond[1] = ((((-1.0) * x383)) + new_r00);
                                                    evalcond[2] = ((((-1.0) * x386)) + new_r01);
                                                    evalcond[3] = ((((-1.0) * new_r12 * x386)) + new_r20);
                                                    evalcond[4] = (((sj5 * x383)) + (((-1.0) * new_r11)));
                                                    evalcond[5] = ((((-1.0) * x384 * x385)) + (((-1.0) * new_r10)));
                                                    evalcond[6] =
                                                        ((((-1.0) * new_r11 * x385)) + ((cj5 * new_r21)) + x383);
                                                    evalcond[7] = ((((-1.0) * new_r10 * x385)) + ((cj5 * new_r20)) +
                                                                   (((-1.0) * x386)));
                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                    {
                                                      continue;
                                                    }
                                                  }

                                                  {
                                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                    vinfos[0].jointtype = 1;
                                                    vinfos[0].foffset = j0;
                                                    vinfos[0].indices[0] = _ij0[0];
                                                    vinfos[0].indices[1] = _ij0[1];
                                                    vinfos[0].maxsolutions = _nj0;
                                                    vinfos[1].jointtype = 17;
                                                    vinfos[1].foffset = j1;
                                                    vinfos[1].indices[0] = _ij1[0];
                                                    vinfos[1].indices[1] = _ij1[1];
                                                    vinfos[1].maxsolutions = _nj1;
                                                    vinfos[2].jointtype = 17;
                                                    vinfos[2].foffset = j2;
                                                    vinfos[2].indices[0] = _ij2[0];
                                                    vinfos[2].indices[1] = _ij2[1];
                                                    vinfos[2].maxsolutions = _nj2;
                                                    vinfos[3].jointtype = 17;
                                                    vinfos[3].foffset = j3;
                                                    vinfos[3].indices[0] = _ij3[0];
                                                    vinfos[3].indices[1] = _ij3[1];
                                                    vinfos[3].maxsolutions = _nj3;
                                                    vinfos[4].jointtype = 1;
                                                    vinfos[4].foffset = j4;
                                                    vinfos[4].indices[0] = _ij4[0];
                                                    vinfos[4].indices[1] = _ij4[1];
                                                    vinfos[4].maxsolutions = _nj4;
                                                    vinfos[5].jointtype = 1;
                                                    vinfos[5].foffset = j5;
                                                    vinfos[5].indices[0] = _ij5[0];
                                                    vinfos[5].indices[1] = _ij5[1];
                                                    vinfos[5].maxsolutions = _nj5;
                                                    vinfos[6].jointtype = 1;
                                                    vinfos[6].foffset = j6;
                                                    vinfos[6].indices[0] = _ij6[0];
                                                    vinfos[6].indices[1] = _ij6[1];
                                                    vinfos[6].maxsolutions = _nj6;
                                                    std::vector<int> vfree(0);
                                                    solutions.AddSolution(vinfos, vfree);
                                                  }
                                                }
                                              }
                                            }
                                          } while (0);
                                          if (bgotonextstatement)
                                          {
                                            bool bgotonextstatement = true;
                                            do
                                            {
                                              evalcond[0] =
                                                  ((-3.14159265358979) +
                                                   (IKfmod(((3.14159265358979) + (IKabs(j4))), 6.28318530717959)));
                                              evalcond[1] = new_r12;
                                              if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                  IKabs(evalcond[1]) < 0.0000050000000000)
                                              {
                                                bgotonextstatement = false;
                                                {
                                                  IkReal j6array[1], cj6array[1], sj6array[1];
                                                  bool j6valid[1] = { false };
                                                  _nj6 = 1;
                                                  if (IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH &&
                                                      IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH &&
                                                      IKabs(IKsqr(new_r10) + IKsqr(new_r11) - 1) <= IKFAST_SINCOS_THRESH)
                                                    continue;
                                                  j6array[0] = IKatan2(new_r10, new_r11);
                                                  sj6array[0] = IKsin(j6array[0]);
                                                  cj6array[0] = IKcos(j6array[0]);
                                                  if (j6array[0] > IKPI)
                                                  {
                                                    j6array[0] -= IK2PI;
                                                  }
                                                  else if (j6array[0] < -IKPI)
                                                  {
                                                    j6array[0] += IK2PI;
                                                  }
                                                  j6valid[0] = true;
                                                  for (int ij6 = 0; ij6 < 1; ++ij6)
                                                  {
                                                    if (!j6valid[ij6])
                                                    {
                                                      continue;
                                                    }
                                                    _ij6[0] = ij6;
                                                    _ij6[1] = -1;
                                                    for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                    {
                                                      if (j6valid[iij6] &&
                                                          IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                              IKFAST_SOLUTION_THRESH &&
                                                          IKabs(sj6array[ij6] - sj6array[iij6]) < IKFAST_SOLUTION_THRESH)
                                                      {
                                                        j6valid[iij6] = false;
                                                        _ij6[1] = iij6;
                                                        break;
                                                      }
                                                    }
                                                    j6 = j6array[ij6];
                                                    cj6 = cj6array[ij6];
                                                    sj6 = sj6array[ij6];
                                                    {
                                                      IkReal evalcond[8];
                                                      IkReal x387 = IKcos(j6);
                                                      IkReal x388 = IKsin(j6);
                                                      IkReal x389 = ((1.0) * x387);
                                                      IkReal x390 = ((1.0) * x388);
                                                      evalcond[0] = (((new_r02 * x387)) + new_r20);
                                                      evalcond[1] = ((((-1.0) * x390)) + new_r10);
                                                      evalcond[2] = ((((-1.0) * x389)) + new_r11);
                                                      evalcond[3] = (((sj5 * x388)) + new_r01);
                                                      evalcond[4] = (new_r21 + (((-1.0) * new_r02 * x390)));
                                                      evalcond[5] = ((((-1.0) * sj5 * x389)) + new_r00);
                                                      evalcond[6] = (((new_r01 * sj5)) + ((cj5 * new_r21)) + x388);
                                                      evalcond[7] =
                                                          (((new_r00 * sj5)) + ((cj5 * new_r20)) + (((-1.0) * x389)));
                                                      if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                      {
                                                        continue;
                                                      }
                                                    }

                                                    {
                                                      std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                      vinfos[0].jointtype = 1;
                                                      vinfos[0].foffset = j0;
                                                      vinfos[0].indices[0] = _ij0[0];
                                                      vinfos[0].indices[1] = _ij0[1];
                                                      vinfos[0].maxsolutions = _nj0;
                                                      vinfos[1].jointtype = 17;
                                                      vinfos[1].foffset = j1;
                                                      vinfos[1].indices[0] = _ij1[0];
                                                      vinfos[1].indices[1] = _ij1[1];
                                                      vinfos[1].maxsolutions = _nj1;
                                                      vinfos[2].jointtype = 17;
                                                      vinfos[2].foffset = j2;
                                                      vinfos[2].indices[0] = _ij2[0];
                                                      vinfos[2].indices[1] = _ij2[1];
                                                      vinfos[2].maxsolutions = _nj2;
                                                      vinfos[3].jointtype = 17;
                                                      vinfos[3].foffset = j3;
                                                      vinfos[3].indices[0] = _ij3[0];
                                                      vinfos[3].indices[1] = _ij3[1];
                                                      vinfos[3].maxsolutions = _nj3;
                                                      vinfos[4].jointtype = 1;
                                                      vinfos[4].foffset = j4;
                                                      vinfos[4].indices[0] = _ij4[0];
                                                      vinfos[4].indices[1] = _ij4[1];
                                                      vinfos[4].maxsolutions = _nj4;
                                                      vinfos[5].jointtype = 1;
                                                      vinfos[5].foffset = j5;
                                                      vinfos[5].indices[0] = _ij5[0];
                                                      vinfos[5].indices[1] = _ij5[1];
                                                      vinfos[5].maxsolutions = _nj5;
                                                      vinfos[6].jointtype = 1;
                                                      vinfos[6].foffset = j6;
                                                      vinfos[6].indices[0] = _ij6[0];
                                                      vinfos[6].indices[1] = _ij6[1];
                                                      vinfos[6].maxsolutions = _nj6;
                                                      std::vector<int> vfree(0);
                                                      solutions.AddSolution(vinfos, vfree);
                                                    }
                                                  }
                                                }
                                              }
                                            } while (0);
                                            if (bgotonextstatement)
                                            {
                                              bool bgotonextstatement = true;
                                              do
                                              {
                                                evalcond[0] =
                                                    ((-3.14159265358979) +
                                                     (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j4)))),
                                                             6.28318530717959)));
                                                evalcond[1] = new_r12;
                                                if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                    IKabs(evalcond[1]) < 0.0000050000000000)
                                                {
                                                  bgotonextstatement = false;
                                                  {
                                                    IkReal j6eval[3];
                                                    sj4 = 0;
                                                    cj4 = -1.0;
                                                    j4 = 3.14159265358979;
                                                    j6eval[0] = new_r02;
                                                    j6eval[1] = IKsign(new_r02);
                                                    j6eval[2] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                    if (IKabs(j6eval[0]) < 0.0000010000000000 ||
                                                        IKabs(j6eval[1]) < 0.0000010000000000 ||
                                                        IKabs(j6eval[2]) < 0.0000010000000000)
                                                    {
                                                      {
                                                        IkReal j6eval[1];
                                                        sj4 = 0;
                                                        cj4 = -1.0;
                                                        j4 = 3.14159265358979;
                                                        j6eval[0] = new_r02;
                                                        if (IKabs(j6eval[0]) < 0.0000010000000000)
                                                        {
                                                          {
                                                            IkReal j6eval[2];
                                                            sj4 = 0;
                                                            cj4 = -1.0;
                                                            j4 = 3.14159265358979;
                                                            j6eval[0] = new_r02;
                                                            j6eval[1] = sj5;
                                                            if (IKabs(j6eval[0]) < 0.0000010000000000 ||
                                                                IKabs(j6eval[1]) < 0.0000010000000000)
                                                            {
                                                              {
                                                                IkReal evalcond[4];
                                                                bool bgotonextstatement = true;
                                                                do
                                                                {
                                                                  evalcond[0] =
                                                                      ((-3.14159265358979) +
                                                                       (IKfmod(((3.14159265358979) + (IKabs(j5))),
                                                                               6.28318530717959)));
                                                                  evalcond[1] = new_r22;
                                                                  evalcond[2] = new_r01;
                                                                  evalcond[3] = new_r00;
                                                                  if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                                      IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                                      IKabs(evalcond[2]) < 0.0000050000000000 &&
                                                                      IKabs(evalcond[3]) < 0.0000050000000000)
                                                                  {
                                                                    bgotonextstatement = false;
                                                                    {
                                                                      IkReal j6array[1], cj6array[1], sj6array[1];
                                                                      bool j6valid[1] = { false };
                                                                      _nj6 = 1;
                                                                      if (IKabs(((-1.0) * new_r21)) <
                                                                              IKFAST_ATAN2_MAGTHRESH &&
                                                                          IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH &&
                                                                          IKabs(IKsqr(((-1.0) * new_r21)) +
                                                                                IKsqr(new_r20) - 1) <=
                                                                              IKFAST_SINCOS_THRESH)
                                                                        continue;
                                                                      j6array[0] = IKatan2(((-1.0) * new_r21), new_r20);
                                                                      sj6array[0] = IKsin(j6array[0]);
                                                                      cj6array[0] = IKcos(j6array[0]);
                                                                      if (j6array[0] > IKPI)
                                                                      {
                                                                        j6array[0] -= IK2PI;
                                                                      }
                                                                      else if (j6array[0] < -IKPI)
                                                                      {
                                                                        j6array[0] += IK2PI;
                                                                      }
                                                                      j6valid[0] = true;
                                                                      for (int ij6 = 0; ij6 < 1; ++ij6)
                                                                      {
                                                                        if (!j6valid[ij6])
                                                                        {
                                                                          continue;
                                                                        }
                                                                        _ij6[0] = ij6;
                                                                        _ij6[1] = -1;
                                                                        for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                                        {
                                                                          if (j6valid[iij6] &&
                                                                              IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                                  IKFAST_SOLUTION_THRESH &&
                                                                              IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                                  IKFAST_SOLUTION_THRESH)
                                                                          {
                                                                            j6valid[iij6] = false;
                                                                            _ij6[1] = iij6;
                                                                            break;
                                                                          }
                                                                        }
                                                                        j6 = j6array[ij6];
                                                                        cj6 = cj6array[ij6];
                                                                        sj6 = sj6array[ij6];
                                                                        {
                                                                          IkReal evalcond[4];
                                                                          IkReal x391 = IKsin(j6);
                                                                          IkReal x392 = ((1.0) * (IKcos(j6)));
                                                                          evalcond[0] = (x391 + new_r21);
                                                                          evalcond[1] = ((((-1.0) * x392)) + new_r20);
                                                                          evalcond[2] = ((((-1.0) * x391)) +
                                                                                         (((-1.0) * new_r10)));
                                                                          evalcond[3] = ((((-1.0) * x392)) +
                                                                                         (((-1.0) * new_r11)));
                                                                          if (IKabs(evalcond[0]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[1]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[2]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[3]) >
                                                                                  IKFAST_EVALCOND_THRESH)
                                                                          {
                                                                            continue;
                                                                          }
                                                                        }

                                                                        {
                                                                          std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                              vinfos(7);
                                                                          vinfos[0].jointtype = 1;
                                                                          vinfos[0].foffset = j0;
                                                                          vinfos[0].indices[0] = _ij0[0];
                                                                          vinfos[0].indices[1] = _ij0[1];
                                                                          vinfos[0].maxsolutions = _nj0;
                                                                          vinfos[1].jointtype = 17;
                                                                          vinfos[1].foffset = j1;
                                                                          vinfos[1].indices[0] = _ij1[0];
                                                                          vinfos[1].indices[1] = _ij1[1];
                                                                          vinfos[1].maxsolutions = _nj1;
                                                                          vinfos[2].jointtype = 17;
                                                                          vinfos[2].foffset = j2;
                                                                          vinfos[2].indices[0] = _ij2[0];
                                                                          vinfos[2].indices[1] = _ij2[1];
                                                                          vinfos[2].maxsolutions = _nj2;
                                                                          vinfos[3].jointtype = 17;
                                                                          vinfos[3].foffset = j3;
                                                                          vinfos[3].indices[0] = _ij3[0];
                                                                          vinfos[3].indices[1] = _ij3[1];
                                                                          vinfos[3].maxsolutions = _nj3;
                                                                          vinfos[4].jointtype = 1;
                                                                          vinfos[4].foffset = j4;
                                                                          vinfos[4].indices[0] = _ij4[0];
                                                                          vinfos[4].indices[1] = _ij4[1];
                                                                          vinfos[4].maxsolutions = _nj4;
                                                                          vinfos[5].jointtype = 1;
                                                                          vinfos[5].foffset = j5;
                                                                          vinfos[5].indices[0] = _ij5[0];
                                                                          vinfos[5].indices[1] = _ij5[1];
                                                                          vinfos[5].maxsolutions = _nj5;
                                                                          vinfos[6].jointtype = 1;
                                                                          vinfos[6].foffset = j6;
                                                                          vinfos[6].indices[0] = _ij6[0];
                                                                          vinfos[6].indices[1] = _ij6[1];
                                                                          vinfos[6].maxsolutions = _nj6;
                                                                          std::vector<int> vfree(0);
                                                                          solutions.AddSolution(vinfos, vfree);
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                } while (0);
                                                                if (bgotonextstatement)
                                                                {
                                                                  bool bgotonextstatement = true;
                                                                  do
                                                                  {
                                                                    evalcond[0] =
                                                                        ((-3.14159265358979) +
                                                                         (IKfmod(((3.14159265358979) +
                                                                                  (IKabs(((-3.14159265358979) + j5)))),
                                                                                 6.28318530717959)));
                                                                    evalcond[1] = new_r22;
                                                                    evalcond[2] = new_r01;
                                                                    evalcond[3] = new_r00;
                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                                        IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                                        IKabs(evalcond[2]) < 0.0000050000000000 &&
                                                                        IKabs(evalcond[3]) < 0.0000050000000000)
                                                                    {
                                                                      bgotonextstatement = false;
                                                                      {
                                                                        IkReal j6array[1], cj6array[1], sj6array[1];
                                                                        bool j6valid[1] = { false };
                                                                        _nj6 = 1;
                                                                        if (IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH &&
                                                                            IKabs(((-1.0) * new_r20)) <
                                                                                IKFAST_ATAN2_MAGTHRESH &&
                                                                            IKabs(IKsqr(new_r21) +
                                                                                  IKsqr(((-1.0) * new_r20)) - 1) <=
                                                                                IKFAST_SINCOS_THRESH)
                                                                          continue;
                                                                        j6array[0] =
                                                                            IKatan2(new_r21, ((-1.0) * new_r20));
                                                                        sj6array[0] = IKsin(j6array[0]);
                                                                        cj6array[0] = IKcos(j6array[0]);
                                                                        if (j6array[0] > IKPI)
                                                                        {
                                                                          j6array[0] -= IK2PI;
                                                                        }
                                                                        else if (j6array[0] < -IKPI)
                                                                        {
                                                                          j6array[0] += IK2PI;
                                                                        }
                                                                        j6valid[0] = true;
                                                                        for (int ij6 = 0; ij6 < 1; ++ij6)
                                                                        {
                                                                          if (!j6valid[ij6])
                                                                          {
                                                                            continue;
                                                                          }
                                                                          _ij6[0] = ij6;
                                                                          _ij6[1] = -1;
                                                                          for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                                          {
                                                                            if (j6valid[iij6] &&
                                                                                IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                                    IKFAST_SOLUTION_THRESH &&
                                                                                IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                                    IKFAST_SOLUTION_THRESH)
                                                                            {
                                                                              j6valid[iij6] = false;
                                                                              _ij6[1] = iij6;
                                                                              break;
                                                                            }
                                                                          }
                                                                          j6 = j6array[ij6];
                                                                          cj6 = cj6array[ij6];
                                                                          sj6 = sj6array[ij6];
                                                                          {
                                                                            IkReal evalcond[4];
                                                                            IkReal x393 = IKcos(j6);
                                                                            IkReal x394 = ((1.0) * (IKsin(j6)));
                                                                            evalcond[0] = (x393 + new_r20);
                                                                            evalcond[1] = ((((-1.0) * x394)) + new_r21);
                                                                            evalcond[2] = ((((-1.0) * x394)) +
                                                                                           (((-1.0) * new_r10)));
                                                                            evalcond[3] = ((((-1.0) * x393)) +
                                                                                           (((-1.0) * new_r11)));
                                                                            if (IKabs(evalcond[0]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[1]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[2]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[3]) >
                                                                                    IKFAST_EVALCOND_THRESH)
                                                                            {
                                                                              continue;
                                                                            }
                                                                          }

                                                                          {
                                                                            std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                                vinfos(7);
                                                                            vinfos[0].jointtype = 1;
                                                                            vinfos[0].foffset = j0;
                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                            vinfos[0].maxsolutions = _nj0;
                                                                            vinfos[1].jointtype = 17;
                                                                            vinfos[1].foffset = j1;
                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                            vinfos[1].maxsolutions = _nj1;
                                                                            vinfos[2].jointtype = 17;
                                                                            vinfos[2].foffset = j2;
                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                            vinfos[2].maxsolutions = _nj2;
                                                                            vinfos[3].jointtype = 17;
                                                                            vinfos[3].foffset = j3;
                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                            vinfos[3].maxsolutions = _nj3;
                                                                            vinfos[4].jointtype = 1;
                                                                            vinfos[4].foffset = j4;
                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                            vinfos[4].maxsolutions = _nj4;
                                                                            vinfos[5].jointtype = 1;
                                                                            vinfos[5].foffset = j5;
                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                            vinfos[5].maxsolutions = _nj5;
                                                                            vinfos[6].jointtype = 1;
                                                                            vinfos[6].foffset = j6;
                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                            vinfos[6].maxsolutions = _nj6;
                                                                            std::vector<int> vfree(0);
                                                                            solutions.AddSolution(vinfos, vfree);
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  } while (0);
                                                                  if (bgotonextstatement)
                                                                  {
                                                                    bool bgotonextstatement = true;
                                                                    do
                                                                    {
                                                                      evalcond[0] = IKabs(new_r02);
                                                                      evalcond[1] = new_r21;
                                                                      evalcond[2] = new_r20;
                                                                      if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                                          IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                                          IKabs(evalcond[2]) < 0.0000050000000000)
                                                                      {
                                                                        bgotonextstatement = false;
                                                                        {
                                                                          IkReal j6array[1], cj6array[1], sj6array[1];
                                                                          bool j6valid[1] = { false };
                                                                          _nj6 = 1;
                                                                          if (IKabs((new_r01 * sj5)) <
                                                                                  IKFAST_ATAN2_MAGTHRESH &&
                                                                              IKabs(((-1.0) * new_r11)) <
                                                                                  IKFAST_ATAN2_MAGTHRESH &&
                                                                              IKabs(IKsqr((new_r01 * sj5)) +
                                                                                    IKsqr(((-1.0) * new_r11)) - 1) <=
                                                                                  IKFAST_SINCOS_THRESH)
                                                                            continue;
                                                                          j6array[0] = IKatan2((new_r01 * sj5),
                                                                                               ((-1.0) * new_r11));
                                                                          sj6array[0] = IKsin(j6array[0]);
                                                                          cj6array[0] = IKcos(j6array[0]);
                                                                          if (j6array[0] > IKPI)
                                                                          {
                                                                            j6array[0] -= IK2PI;
                                                                          }
                                                                          else if (j6array[0] < -IKPI)
                                                                          {
                                                                            j6array[0] += IK2PI;
                                                                          }
                                                                          j6valid[0] = true;
                                                                          for (int ij6 = 0; ij6 < 1; ++ij6)
                                                                          {
                                                                            if (!j6valid[ij6])
                                                                            {
                                                                              continue;
                                                                            }
                                                                            _ij6[0] = ij6;
                                                                            _ij6[1] = -1;
                                                                            for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                                            {
                                                                              if (j6valid[iij6] &&
                                                                                  IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                                      IKFAST_SOLUTION_THRESH &&
                                                                                  IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                                      IKFAST_SOLUTION_THRESH)
                                                                              {
                                                                                j6valid[iij6] = false;
                                                                                _ij6[1] = iij6;
                                                                                break;
                                                                              }
                                                                            }
                                                                            j6 = j6array[ij6];
                                                                            cj6 = cj6array[ij6];
                                                                            sj6 = sj6array[ij6];
                                                                            {
                                                                              IkReal evalcond[6];
                                                                              IkReal x395 = IKsin(j6);
                                                                              IkReal x396 = IKcos(j6);
                                                                              IkReal x397 = ((1.0) * sj5);
                                                                              IkReal x398 = ((1.0) * x396);
                                                                              evalcond[0] =
                                                                                  ((((-1.0) * new_r01 * x397)) + x395);
                                                                              evalcond[1] = ((((-1.0) * x395)) +
                                                                                             (((-1.0) * new_r10)));
                                                                              evalcond[2] = ((((-1.0) * x398)) +
                                                                                             (((-1.0) * new_r11)));
                                                                              evalcond[3] = (((sj5 * x395)) +
                                                                                             (((-1.0) * new_r01)));
                                                                              evalcond[4] = ((((-1.0) * x396 * x397)) +
                                                                                             (((-1.0) * new_r00)));
                                                                              evalcond[5] =
                                                                                  ((((-1.0) * x398)) +
                                                                                   (((-1.0) * new_r00 * x397)));
                                                                              if (IKabs(evalcond[0]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[1]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[2]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[3]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[4]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[5]) >
                                                                                      IKFAST_EVALCOND_THRESH)
                                                                              {
                                                                                continue;
                                                                              }
                                                                            }

                                                                            {
                                                                              std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                                  vinfos(7);
                                                                              vinfos[0].jointtype = 1;
                                                                              vinfos[0].foffset = j0;
                                                                              vinfos[0].indices[0] = _ij0[0];
                                                                              vinfos[0].indices[1] = _ij0[1];
                                                                              vinfos[0].maxsolutions = _nj0;
                                                                              vinfos[1].jointtype = 17;
                                                                              vinfos[1].foffset = j1;
                                                                              vinfos[1].indices[0] = _ij1[0];
                                                                              vinfos[1].indices[1] = _ij1[1];
                                                                              vinfos[1].maxsolutions = _nj1;
                                                                              vinfos[2].jointtype = 17;
                                                                              vinfos[2].foffset = j2;
                                                                              vinfos[2].indices[0] = _ij2[0];
                                                                              vinfos[2].indices[1] = _ij2[1];
                                                                              vinfos[2].maxsolutions = _nj2;
                                                                              vinfos[3].jointtype = 17;
                                                                              vinfos[3].foffset = j3;
                                                                              vinfos[3].indices[0] = _ij3[0];
                                                                              vinfos[3].indices[1] = _ij3[1];
                                                                              vinfos[3].maxsolutions = _nj3;
                                                                              vinfos[4].jointtype = 1;
                                                                              vinfos[4].foffset = j4;
                                                                              vinfos[4].indices[0] = _ij4[0];
                                                                              vinfos[4].indices[1] = _ij4[1];
                                                                              vinfos[4].maxsolutions = _nj4;
                                                                              vinfos[5].jointtype = 1;
                                                                              vinfos[5].foffset = j5;
                                                                              vinfos[5].indices[0] = _ij5[0];
                                                                              vinfos[5].indices[1] = _ij5[1];
                                                                              vinfos[5].maxsolutions = _nj5;
                                                                              vinfos[6].jointtype = 1;
                                                                              vinfos[6].foffset = j6;
                                                                              vinfos[6].indices[0] = _ij6[0];
                                                                              vinfos[6].indices[1] = _ij6[1];
                                                                              vinfos[6].maxsolutions = _nj6;
                                                                              std::vector<int> vfree(0);
                                                                              solutions.AddSolution(vinfos, vfree);
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    } while (0);
                                                                    if (bgotonextstatement)
                                                                    {
                                                                      bool bgotonextstatement = true;
                                                                      do
                                                                      {
                                                                        evalcond[0] =
                                                                            ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                        {
                                                                          bgotonextstatement = false;
                                                                          {
                                                                            IkReal j6array[1], cj6array[1], sj6array[1];
                                                                            bool j6valid[1] = { false };
                                                                            _nj6 = 1;
                                                                            if (IKabs(((-1.0) * new_r10)) <
                                                                                    IKFAST_ATAN2_MAGTHRESH &&
                                                                                IKabs(((-1.0) * new_r11)) <
                                                                                    IKFAST_ATAN2_MAGTHRESH &&
                                                                                IKabs(IKsqr(((-1.0) * new_r10)) +
                                                                                      IKsqr(((-1.0) * new_r11)) - 1) <=
                                                                                    IKFAST_SINCOS_THRESH)
                                                                              continue;
                                                                            j6array[0] = IKatan2(((-1.0) * new_r10),
                                                                                                 ((-1.0) * new_r11));
                                                                            sj6array[0] = IKsin(j6array[0]);
                                                                            cj6array[0] = IKcos(j6array[0]);
                                                                            if (j6array[0] > IKPI)
                                                                            {
                                                                              j6array[0] -= IK2PI;
                                                                            }
                                                                            else if (j6array[0] < -IKPI)
                                                                            {
                                                                              j6array[0] += IK2PI;
                                                                            }
                                                                            j6valid[0] = true;
                                                                            for (int ij6 = 0; ij6 < 1; ++ij6)
                                                                            {
                                                                              if (!j6valid[ij6])
                                                                              {
                                                                                continue;
                                                                              }
                                                                              _ij6[0] = ij6;
                                                                              _ij6[1] = -1;
                                                                              for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                                              {
                                                                                if (j6valid[iij6] &&
                                                                                    IKabs(cj6array[ij6] -
                                                                                          cj6array[iij6]) <
                                                                                        IKFAST_SOLUTION_THRESH &&
                                                                                    IKabs(sj6array[ij6] -
                                                                                          sj6array[iij6]) <
                                                                                        IKFAST_SOLUTION_THRESH)
                                                                                {
                                                                                  j6valid[iij6] = false;
                                                                                  _ij6[1] = iij6;
                                                                                  break;
                                                                                }
                                                                              }
                                                                              j6 = j6array[ij6];
                                                                              cj6 = cj6array[ij6];
                                                                              sj6 = sj6array[ij6];
                                                                              {
                                                                                IkReal evalcond[6];
                                                                                IkReal x399 = IKsin(j6);
                                                                                IkReal x400 = IKcos(j6);
                                                                                IkReal x401 = ((-1.0) * x400);
                                                                                evalcond[0] = x399;
                                                                                evalcond[1] = (new_r22 * x399);
                                                                                evalcond[2] = x401;
                                                                                evalcond[3] = (new_r22 * x401);
                                                                                evalcond[4] = ((((-1.0) * x399)) +
                                                                                               (((-1.0) * new_r10)));
                                                                                evalcond[5] = ((((-1.0) * new_r11)) +
                                                                                               (((-1.0) * x400)));
                                                                                if (IKabs(evalcond[0]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[1]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[2]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[3]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[4]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[5]) >
                                                                                        IKFAST_EVALCOND_THRESH)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                              }

                                                                              {
                                                                                std::vector<
                                                                                    IkSingleDOFSolutionBase<IkReal> >
                                                                                    vinfos(7);
                                                                                vinfos[0].jointtype = 1;
                                                                                vinfos[0].foffset = j0;
                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                vinfos[1].jointtype = 17;
                                                                                vinfos[1].foffset = j1;
                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                vinfos[2].jointtype = 17;
                                                                                vinfos[2].foffset = j2;
                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                vinfos[3].jointtype = 17;
                                                                                vinfos[3].foffset = j3;
                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                vinfos[4].jointtype = 1;
                                                                                vinfos[4].foffset = j4;
                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                vinfos[5].jointtype = 1;
                                                                                vinfos[5].foffset = j5;
                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                vinfos[6].jointtype = 1;
                                                                                vinfos[6].foffset = j6;
                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                std::vector<int> vfree(0);
                                                                                solutions.AddSolution(vinfos, vfree);
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      } while (0);
                                                                      if (bgotonextstatement)
                                                                      {
                                                                        bool bgotonextstatement = true;
                                                                        do
                                                                        {
                                                                          if (1)
                                                                          {
                                                                            bgotonextstatement = false;
                                                                            continue;  // branch miss [j6]
                                                                          }
                                                                        } while (0);
                                                                        if (bgotonextstatement) {}
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                            else
                                                            {
                                                              {
                                                                IkReal j6array[1], cj6array[1], sj6array[1];
                                                                bool j6valid[1] = { false };
                                                                _nj6 = 1;
                                                                CheckValue<IkReal> x402 =
                                                                    IKPowWithIntegerCheck(new_r02, -1);
                                                                if (!x402.valid)
                                                                {
                                                                  continue;
                                                                }
                                                                CheckValue<IkReal> x403 =
                                                                    IKPowWithIntegerCheck(sj5, -1);
                                                                if (!x403.valid)
                                                                {
                                                                  continue;
                                                                }
                                                                if (IKabs(((-1.0) * new_r21 * (x402.value))) <
                                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                                    IKabs(((-1.0) * new_r00 * (x403.value))) <
                                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                                    IKabs(IKsqr(((-1.0) * new_r21 * (x402.value))) +
                                                                          IKsqr(((-1.0) * new_r00 * (x403.value))) -
                                                                          1) <= IKFAST_SINCOS_THRESH)
                                                                  continue;
                                                                j6array[0] = IKatan2(((-1.0) * new_r21 * (x402.value)),
                                                                                     ((-1.0) * new_r00 * (x403.value)));
                                                                sj6array[0] = IKsin(j6array[0]);
                                                                cj6array[0] = IKcos(j6array[0]);
                                                                if (j6array[0] > IKPI)
                                                                {
                                                                  j6array[0] -= IK2PI;
                                                                }
                                                                else if (j6array[0] < -IKPI)
                                                                {
                                                                  j6array[0] += IK2PI;
                                                                }
                                                                j6valid[0] = true;
                                                                for (int ij6 = 0; ij6 < 1; ++ij6)
                                                                {
                                                                  if (!j6valid[ij6])
                                                                  {
                                                                    continue;
                                                                  }
                                                                  _ij6[0] = ij6;
                                                                  _ij6[1] = -1;
                                                                  for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                                  {
                                                                    if (j6valid[iij6] &&
                                                                        IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                            IKFAST_SOLUTION_THRESH &&
                                                                        IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                            IKFAST_SOLUTION_THRESH)
                                                                    {
                                                                      j6valid[iij6] = false;
                                                                      _ij6[1] = iij6;
                                                                      break;
                                                                    }
                                                                  }
                                                                  j6 = j6array[ij6];
                                                                  cj6 = cj6array[ij6];
                                                                  sj6 = sj6array[ij6];
                                                                  {
                                                                    IkReal evalcond[8];
                                                                    IkReal x404 = IKsin(j6);
                                                                    IkReal x405 = IKcos(j6);
                                                                    IkReal x406 = ((1.0) * sj5);
                                                                    IkReal x407 = ((1.0) * x405);
                                                                    evalcond[0] = (new_r21 + ((new_r02 * x404)));
                                                                    evalcond[1] =
                                                                        (new_r20 + (((-1.0) * new_r02 * x407)));
                                                                    evalcond[2] =
                                                                        ((((-1.0) * new_r10)) + (((-1.0) * x404)));
                                                                    evalcond[3] =
                                                                        ((((-1.0) * new_r11)) + (((-1.0) * x407)));
                                                                    evalcond[4] =
                                                                        (((sj5 * x404)) + (((-1.0) * new_r01)));
                                                                    evalcond[5] = ((((-1.0) * new_r00)) +
                                                                                   (((-1.0) * x405 * x406)));
                                                                    evalcond[6] = (((cj5 * new_r21)) + x404 +
                                                                                   (((-1.0) * new_r01 * x406)));
                                                                    evalcond[7] = (((cj5 * new_r20)) +
                                                                                   (((-1.0) * new_r00 * x406)) +
                                                                                   (((-1.0) * x407)));
                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                    {
                                                                      continue;
                                                                    }
                                                                  }

                                                                  {
                                                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(
                                                                        7);
                                                                    vinfos[0].jointtype = 1;
                                                                    vinfos[0].foffset = j0;
                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                    vinfos[0].maxsolutions = _nj0;
                                                                    vinfos[1].jointtype = 17;
                                                                    vinfos[1].foffset = j1;
                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                    vinfos[1].maxsolutions = _nj1;
                                                                    vinfos[2].jointtype = 17;
                                                                    vinfos[2].foffset = j2;
                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                    vinfos[2].maxsolutions = _nj2;
                                                                    vinfos[3].jointtype = 17;
                                                                    vinfos[3].foffset = j3;
                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                    vinfos[3].maxsolutions = _nj3;
                                                                    vinfos[4].jointtype = 1;
                                                                    vinfos[4].foffset = j4;
                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                    vinfos[4].maxsolutions = _nj4;
                                                                    vinfos[5].jointtype = 1;
                                                                    vinfos[5].foffset = j5;
                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                    vinfos[5].maxsolutions = _nj5;
                                                                    vinfos[6].jointtype = 1;
                                                                    vinfos[6].foffset = j6;
                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                    vinfos[6].maxsolutions = _nj6;
                                                                    std::vector<int> vfree(0);
                                                                    solutions.AddSolution(vinfos, vfree);
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                        else
                                                        {
                                                          {
                                                            IkReal j6array[1], cj6array[1], sj6array[1];
                                                            bool j6valid[1] = { false };
                                                            _nj6 = 1;
                                                            CheckValue<IkReal> x408 =
                                                                IKPowWithIntegerCheck(new_r02, -1);
                                                            if (!x408.valid)
                                                            {
                                                              continue;
                                                            }
                                                            if (IKabs(((-1.0) * new_r10)) < IKFAST_ATAN2_MAGTHRESH &&
                                                                IKabs((new_r20 * (x408.value))) <
                                                                    IKFAST_ATAN2_MAGTHRESH &&
                                                                IKabs(IKsqr(((-1.0) * new_r10)) +
                                                                      IKsqr((new_r20 * (x408.value))) - 1) <=
                                                                    IKFAST_SINCOS_THRESH)
                                                              continue;
                                                            j6array[0] =
                                                                IKatan2(((-1.0) * new_r10), (new_r20 * (x408.value)));
                                                            sj6array[0] = IKsin(j6array[0]);
                                                            cj6array[0] = IKcos(j6array[0]);
                                                            if (j6array[0] > IKPI)
                                                            {
                                                              j6array[0] -= IK2PI;
                                                            }
                                                            else if (j6array[0] < -IKPI)
                                                            {
                                                              j6array[0] += IK2PI;
                                                            }
                                                            j6valid[0] = true;
                                                            for (int ij6 = 0; ij6 < 1; ++ij6)
                                                            {
                                                              if (!j6valid[ij6])
                                                              {
                                                                continue;
                                                              }
                                                              _ij6[0] = ij6;
                                                              _ij6[1] = -1;
                                                              for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                              {
                                                                if (j6valid[iij6] &&
                                                                    IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                        IKFAST_SOLUTION_THRESH &&
                                                                    IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                        IKFAST_SOLUTION_THRESH)
                                                                {
                                                                  j6valid[iij6] = false;
                                                                  _ij6[1] = iij6;
                                                                  break;
                                                                }
                                                              }
                                                              j6 = j6array[ij6];
                                                              cj6 = cj6array[ij6];
                                                              sj6 = sj6array[ij6];
                                                              {
                                                                IkReal evalcond[8];
                                                                IkReal x409 = IKsin(j6);
                                                                IkReal x410 = IKcos(j6);
                                                                IkReal x411 = ((1.0) * sj5);
                                                                IkReal x412 = ((1.0) * x410);
                                                                evalcond[0] = (new_r21 + ((new_r02 * x409)));
                                                                evalcond[1] = (new_r20 + (((-1.0) * new_r02 * x412)));
                                                                evalcond[2] =
                                                                    ((((-1.0) * new_r10)) + (((-1.0) * x409)));
                                                                evalcond[3] =
                                                                    ((((-1.0) * new_r11)) + (((-1.0) * x412)));
                                                                evalcond[4] = (((sj5 * x409)) + (((-1.0) * new_r01)));
                                                                evalcond[5] =
                                                                    ((((-1.0) * new_r00)) + (((-1.0) * x410 * x411)));
                                                                evalcond[6] = (((cj5 * new_r21)) + x409 +
                                                                               (((-1.0) * new_r01 * x411)));
                                                                evalcond[7] =
                                                                    (((cj5 * new_r20)) + (((-1.0) * new_r00 * x411)) +
                                                                     (((-1.0) * x412)));
                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                {
                                                                  continue;
                                                                }
                                                              }

                                                              {
                                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                                vinfos[0].jointtype = 1;
                                                                vinfos[0].foffset = j0;
                                                                vinfos[0].indices[0] = _ij0[0];
                                                                vinfos[0].indices[1] = _ij0[1];
                                                                vinfos[0].maxsolutions = _nj0;
                                                                vinfos[1].jointtype = 17;
                                                                vinfos[1].foffset = j1;
                                                                vinfos[1].indices[0] = _ij1[0];
                                                                vinfos[1].indices[1] = _ij1[1];
                                                                vinfos[1].maxsolutions = _nj1;
                                                                vinfos[2].jointtype = 17;
                                                                vinfos[2].foffset = j2;
                                                                vinfos[2].indices[0] = _ij2[0];
                                                                vinfos[2].indices[1] = _ij2[1];
                                                                vinfos[2].maxsolutions = _nj2;
                                                                vinfos[3].jointtype = 17;
                                                                vinfos[3].foffset = j3;
                                                                vinfos[3].indices[0] = _ij3[0];
                                                                vinfos[3].indices[1] = _ij3[1];
                                                                vinfos[3].maxsolutions = _nj3;
                                                                vinfos[4].jointtype = 1;
                                                                vinfos[4].foffset = j4;
                                                                vinfos[4].indices[0] = _ij4[0];
                                                                vinfos[4].indices[1] = _ij4[1];
                                                                vinfos[4].maxsolutions = _nj4;
                                                                vinfos[5].jointtype = 1;
                                                                vinfos[5].foffset = j5;
                                                                vinfos[5].indices[0] = _ij5[0];
                                                                vinfos[5].indices[1] = _ij5[1];
                                                                vinfos[5].maxsolutions = _nj5;
                                                                vinfos[6].jointtype = 1;
                                                                vinfos[6].foffset = j6;
                                                                vinfos[6].indices[0] = _ij6[0];
                                                                vinfos[6].indices[1] = _ij6[1];
                                                                vinfos[6].maxsolutions = _nj6;
                                                                std::vector<int> vfree(0);
                                                                solutions.AddSolution(vinfos, vfree);
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                    else
                                                    {
                                                      {
                                                        IkReal j6array[1], cj6array[1], sj6array[1];
                                                        bool j6valid[1] = { false };
                                                        _nj6 = 1;
                                                        CheckValue<IkReal> x413 =
                                                            IKatan2WithCheck(IkReal(((-1.0) * new_r21)),
                                                                             IkReal(new_r20), IKFAST_ATAN2_MAGTHRESH);
                                                        if (!x413.valid)
                                                        {
                                                          continue;
                                                        }
                                                        CheckValue<IkReal> x414 =
                                                            IKPowWithIntegerCheck(IKsign(new_r02), -1);
                                                        if (!x414.valid)
                                                        {
                                                          continue;
                                                        }
                                                        j6array[0] = ((-1.5707963267949) + (x413.value) +
                                                                      (((1.5707963267949) * (x414.value))));
                                                        sj6array[0] = IKsin(j6array[0]);
                                                        cj6array[0] = IKcos(j6array[0]);
                                                        if (j6array[0] > IKPI)
                                                        {
                                                          j6array[0] -= IK2PI;
                                                        }
                                                        else if (j6array[0] < -IKPI)
                                                        {
                                                          j6array[0] += IK2PI;
                                                        }
                                                        j6valid[0] = true;
                                                        for (int ij6 = 0; ij6 < 1; ++ij6)
                                                        {
                                                          if (!j6valid[ij6])
                                                          {
                                                            continue;
                                                          }
                                                          _ij6[0] = ij6;
                                                          _ij6[1] = -1;
                                                          for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                          {
                                                            if (j6valid[iij6] &&
                                                                IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                    IKFAST_SOLUTION_THRESH &&
                                                                IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                    IKFAST_SOLUTION_THRESH)
                                                            {
                                                              j6valid[iij6] = false;
                                                              _ij6[1] = iij6;
                                                              break;
                                                            }
                                                          }
                                                          j6 = j6array[ij6];
                                                          cj6 = cj6array[ij6];
                                                          sj6 = sj6array[ij6];
                                                          {
                                                            IkReal evalcond[8];
                                                            IkReal x415 = IKsin(j6);
                                                            IkReal x416 = IKcos(j6);
                                                            IkReal x417 = ((1.0) * sj5);
                                                            IkReal x418 = ((1.0) * x416);
                                                            evalcond[0] = (new_r21 + ((new_r02 * x415)));
                                                            evalcond[1] = (new_r20 + (((-1.0) * new_r02 * x418)));
                                                            evalcond[2] = ((((-1.0) * new_r10)) + (((-1.0) * x415)));
                                                            evalcond[3] = ((((-1.0) * new_r11)) + (((-1.0) * x418)));
                                                            evalcond[4] = (((sj5 * x415)) + (((-1.0) * new_r01)));
                                                            evalcond[5] =
                                                                ((((-1.0) * x416 * x417)) + (((-1.0) * new_r00)));
                                                            evalcond[6] = (((cj5 * new_r21)) + x415 +
                                                                           (((-1.0) * new_r01 * x417)));
                                                            evalcond[7] =
                                                                (((cj5 * new_r20)) + (((-1.0) * new_r00 * x417)) +
                                                                 (((-1.0) * x418)));
                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                            {
                                                              continue;
                                                            }
                                                          }

                                                          {
                                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                            vinfos[0].jointtype = 1;
                                                            vinfos[0].foffset = j0;
                                                            vinfos[0].indices[0] = _ij0[0];
                                                            vinfos[0].indices[1] = _ij0[1];
                                                            vinfos[0].maxsolutions = _nj0;
                                                            vinfos[1].jointtype = 17;
                                                            vinfos[1].foffset = j1;
                                                            vinfos[1].indices[0] = _ij1[0];
                                                            vinfos[1].indices[1] = _ij1[1];
                                                            vinfos[1].maxsolutions = _nj1;
                                                            vinfos[2].jointtype = 17;
                                                            vinfos[2].foffset = j2;
                                                            vinfos[2].indices[0] = _ij2[0];
                                                            vinfos[2].indices[1] = _ij2[1];
                                                            vinfos[2].maxsolutions = _nj2;
                                                            vinfos[3].jointtype = 17;
                                                            vinfos[3].foffset = j3;
                                                            vinfos[3].indices[0] = _ij3[0];
                                                            vinfos[3].indices[1] = _ij3[1];
                                                            vinfos[3].maxsolutions = _nj3;
                                                            vinfos[4].jointtype = 1;
                                                            vinfos[4].foffset = j4;
                                                            vinfos[4].indices[0] = _ij4[0];
                                                            vinfos[4].indices[1] = _ij4[1];
                                                            vinfos[4].maxsolutions = _nj4;
                                                            vinfos[5].jointtype = 1;
                                                            vinfos[5].foffset = j5;
                                                            vinfos[5].indices[0] = _ij5[0];
                                                            vinfos[5].indices[1] = _ij5[1];
                                                            vinfos[5].maxsolutions = _nj5;
                                                            vinfos[6].jointtype = 1;
                                                            vinfos[6].foffset = j6;
                                                            vinfos[6].indices[0] = _ij6[0];
                                                            vinfos[6].indices[1] = _ij6[1];
                                                            vinfos[6].maxsolutions = _nj6;
                                                            std::vector<int> vfree(0);
                                                            solutions.AddSolution(vinfos, vfree);
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              } while (0);
                                              if (bgotonextstatement)
                                              {
                                                bool bgotonextstatement = true;
                                                do
                                                {
                                                  evalcond[0] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                  if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                  {
                                                    bgotonextstatement = false;
                                                    {
                                                      IkReal j6eval[1];
                                                      new_r21 = 0;
                                                      new_r20 = 0;
                                                      new_r02 = 0;
                                                      new_r12 = 0;
                                                      j6eval[0] = 1.0;
                                                      if (IKabs(j6eval[0]) < 0.0000000100000000)
                                                      {
                                                        continue;  // no branches [j6]
                                                      }
                                                      else
                                                      {
                                                        IkReal op[2 + 1], zeror[2];
                                                        int numroots;
                                                        op[0] = 1.0;
                                                        op[1] = 0;
                                                        op[2] = -1.0;
                                                        polyroots2(op, zeror, numroots);
                                                        IkReal j6array[2], cj6array[2], sj6array[2], tempj6array[1];
                                                        int numsolutions = 0;
                                                        for (int ij6 = 0; ij6 < numroots; ++ij6)
                                                        {
                                                          IkReal htj6 = zeror[ij6];
                                                          tempj6array[0] = ((2.0) * (atan(htj6)));
                                                          for (int kj6 = 0; kj6 < 1; ++kj6)
                                                          {
                                                            j6array[numsolutions] = tempj6array[kj6];
                                                            if (j6array[numsolutions] > IKPI)
                                                            {
                                                              j6array[numsolutions] -= IK2PI;
                                                            }
                                                            else if (j6array[numsolutions] < -IKPI)
                                                            {
                                                              j6array[numsolutions] += IK2PI;
                                                            }
                                                            sj6array[numsolutions] = IKsin(j6array[numsolutions]);
                                                            cj6array[numsolutions] = IKcos(j6array[numsolutions]);
                                                            numsolutions++;
                                                          }
                                                        }
                                                        bool j6valid[2] = { true, true };
                                                        _nj6 = 2;
                                                        for (int ij6 = 0; ij6 < numsolutions; ++ij6)
                                                        {
                                                          if (!j6valid[ij6])
                                                          {
                                                            continue;
                                                          }
                                                          j6 = j6array[ij6];
                                                          cj6 = cj6array[ij6];
                                                          sj6 = sj6array[ij6];
                                                          htj6 = IKtan(j6 / 2);

                                                          _ij6[0] = ij6;
                                                          _ij6[1] = -1;
                                                          for (int iij6 = ij6 + 1; iij6 < numsolutions; ++iij6)
                                                          {
                                                            if (j6valid[iij6] &&
                                                                IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                    IKFAST_SOLUTION_THRESH &&
                                                                IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                    IKFAST_SOLUTION_THRESH)
                                                            {
                                                              j6valid[iij6] = false;
                                                              _ij6[1] = iij6;
                                                              break;
                                                            }
                                                          }
                                                          {
                                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                            vinfos[0].jointtype = 1;
                                                            vinfos[0].foffset = j0;
                                                            vinfos[0].indices[0] = _ij0[0];
                                                            vinfos[0].indices[1] = _ij0[1];
                                                            vinfos[0].maxsolutions = _nj0;
                                                            vinfos[1].jointtype = 17;
                                                            vinfos[1].foffset = j1;
                                                            vinfos[1].indices[0] = _ij1[0];
                                                            vinfos[1].indices[1] = _ij1[1];
                                                            vinfos[1].maxsolutions = _nj1;
                                                            vinfos[2].jointtype = 17;
                                                            vinfos[2].foffset = j2;
                                                            vinfos[2].indices[0] = _ij2[0];
                                                            vinfos[2].indices[1] = _ij2[1];
                                                            vinfos[2].maxsolutions = _nj2;
                                                            vinfos[3].jointtype = 17;
                                                            vinfos[3].foffset = j3;
                                                            vinfos[3].indices[0] = _ij3[0];
                                                            vinfos[3].indices[1] = _ij3[1];
                                                            vinfos[3].maxsolutions = _nj3;
                                                            vinfos[4].jointtype = 1;
                                                            vinfos[4].foffset = j4;
                                                            vinfos[4].indices[0] = _ij4[0];
                                                            vinfos[4].indices[1] = _ij4[1];
                                                            vinfos[4].maxsolutions = _nj4;
                                                            vinfos[5].jointtype = 1;
                                                            vinfos[5].foffset = j5;
                                                            vinfos[5].indices[0] = _ij5[0];
                                                            vinfos[5].indices[1] = _ij5[1];
                                                            vinfos[5].maxsolutions = _nj5;
                                                            vinfos[6].jointtype = 1;
                                                            vinfos[6].foffset = j6;
                                                            vinfos[6].indices[0] = _ij6[0];
                                                            vinfos[6].indices[1] = _ij6[1];
                                                            vinfos[6].maxsolutions = _nj6;
                                                            std::vector<int> vfree(0);
                                                            solutions.AddSolution(vinfos, vfree);
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                } while (0);
                                                if (bgotonextstatement)
                                                {
                                                  bool bgotonextstatement = true;
                                                  do
                                                  {
                                                    if (1)
                                                    {
                                                      bgotonextstatement = false;
                                                      continue;  // branch miss [j6]
                                                    }
                                                  } while (0);
                                                  if (bgotonextstatement) {}
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                else
                                {
                                  {
                                    IkReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1] = { false };
                                    _nj6 = 1;
                                    CheckValue<IkReal> x420 = IKPowWithIntegerCheck(cj5, -1);
                                    if (!x420.valid)
                                    {
                                      continue;
                                    }
                                    IkReal x419 = x420.value;
                                    CheckValue<IkReal> x421 = IKPowWithIntegerCheck(cj4, -1);
                                    if (!x421.valid)
                                    {
                                      continue;
                                    }
                                    if (IKabs(((-1.0) * new_r21 * x419)) < IKFAST_ATAN2_MAGTHRESH &&
                                        IKabs((x419 * (x421.value) *
                                               (((((-1.0) * new_r21 * sj4 * sj5)) + ((cj5 * new_r11)))))) <
                                            IKFAST_ATAN2_MAGTHRESH &&
                                        IKabs(IKsqr(((-1.0) * new_r21 * x419)) +
                                              IKsqr((x419 * (x421.value) *
                                                     (((((-1.0) * new_r21 * sj4 * sj5)) + ((cj5 * new_r11)))))) -
                                              1) <= IKFAST_SINCOS_THRESH)
                                      continue;
                                    j6array[0] = IKatan2(((-1.0) * new_r21 * x419),
                                                         (x419 * (x421.value) *
                                                          (((((-1.0) * new_r21 * sj4 * sj5)) + ((cj5 * new_r11))))));
                                    sj6array[0] = IKsin(j6array[0]);
                                    cj6array[0] = IKcos(j6array[0]);
                                    if (j6array[0] > IKPI)
                                    {
                                      j6array[0] -= IK2PI;
                                    }
                                    else if (j6array[0] < -IKPI)
                                    {
                                      j6array[0] += IK2PI;
                                    }
                                    j6valid[0] = true;
                                    for (int ij6 = 0; ij6 < 1; ++ij6)
                                    {
                                      if (!j6valid[ij6])
                                      {
                                        continue;
                                      }
                                      _ij6[0] = ij6;
                                      _ij6[1] = -1;
                                      for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                      {
                                        if (j6valid[iij6] &&
                                            IKabs(cj6array[ij6] - cj6array[iij6]) < IKFAST_SOLUTION_THRESH &&
                                            IKabs(sj6array[ij6] - sj6array[iij6]) < IKFAST_SOLUTION_THRESH)
                                        {
                                          j6valid[iij6] = false;
                                          _ij6[1] = iij6;
                                          break;
                                        }
                                      }
                                      j6 = j6array[ij6];
                                      cj6 = cj6array[ij6];
                                      sj6 = sj6array[ij6];
                                      {
                                        IkReal evalcond[12];
                                        IkReal x422 = IKsin(j6);
                                        IkReal x423 = IKcos(j6);
                                        IkReal x424 = (sj4 * sj5);
                                        IkReal x425 = ((1.0) * sj4);
                                        IkReal x426 = (cj4 * new_r01);
                                        IkReal x427 = (cj4 * new_r00);
                                        IkReal x428 = ((1.0) * x423);
                                        IkReal x429 = (sj5 * x422);
                                        IkReal x430 = ((1.0) * x422);
                                        IkReal x431 = (sj5 * x428);
                                        evalcond[0] = (((cj5 * x422)) + new_r21);
                                        evalcond[1] = ((((-1.0) * cj5 * x428)) + new_r20);
                                        evalcond[2] = (((new_r11 * sj4)) + x429 + x426);
                                        evalcond[3] =
                                            ((((-1.0) * x430)) + (((-1.0) * new_r00 * x425)) + ((cj4 * new_r10)));
                                        evalcond[4] =
                                            (((cj4 * new_r11)) + (((-1.0) * x428)) + (((-1.0) * new_r01 * x425)));
                                        evalcond[5] = (((sj4 * x423)) + ((cj4 * x429)) + new_r01);
                                        evalcond[6] = ((((-1.0) * x431)) + ((new_r10 * sj4)) + x427);
                                        evalcond[7] = (((sj4 * x422)) + (((-1.0) * cj4 * x431)) + new_r00);
                                        evalcond[8] = ((((-1.0) * cj4 * x428)) + new_r11 + ((x422 * x424)));
                                        evalcond[9] = ((((-1.0) * cj4 * x430)) + (((-1.0) * x424 * x428)) + new_r10);
                                        evalcond[10] = (((cj5 * new_r21)) + ((new_r11 * x424)) + x422 + ((sj5 * x426)));
                                        evalcond[11] = ((((-1.0) * x428)) + ((new_r10 * x424)) + ((cj5 * new_r20)) +
                                                        ((sj5 * x427)));
                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH)
                                        {
                                          continue;
                                        }
                                      }

                                      {
                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                        vinfos[0].jointtype = 1;
                                        vinfos[0].foffset = j0;
                                        vinfos[0].indices[0] = _ij0[0];
                                        vinfos[0].indices[1] = _ij0[1];
                                        vinfos[0].maxsolutions = _nj0;
                                        vinfos[1].jointtype = 17;
                                        vinfos[1].foffset = j1;
                                        vinfos[1].indices[0] = _ij1[0];
                                        vinfos[1].indices[1] = _ij1[1];
                                        vinfos[1].maxsolutions = _nj1;
                                        vinfos[2].jointtype = 17;
                                        vinfos[2].foffset = j2;
                                        vinfos[2].indices[0] = _ij2[0];
                                        vinfos[2].indices[1] = _ij2[1];
                                        vinfos[2].maxsolutions = _nj2;
                                        vinfos[3].jointtype = 17;
                                        vinfos[3].foffset = j3;
                                        vinfos[3].indices[0] = _ij3[0];
                                        vinfos[3].indices[1] = _ij3[1];
                                        vinfos[3].maxsolutions = _nj3;
                                        vinfos[4].jointtype = 1;
                                        vinfos[4].foffset = j4;
                                        vinfos[4].indices[0] = _ij4[0];
                                        vinfos[4].indices[1] = _ij4[1];
                                        vinfos[4].maxsolutions = _nj4;
                                        vinfos[5].jointtype = 1;
                                        vinfos[5].foffset = j5;
                                        vinfos[5].indices[0] = _ij5[0];
                                        vinfos[5].indices[1] = _ij5[1];
                                        vinfos[5].maxsolutions = _nj5;
                                        vinfos[6].jointtype = 1;
                                        vinfos[6].foffset = j6;
                                        vinfos[6].indices[0] = _ij6[0];
                                        vinfos[6].indices[1] = _ij6[1];
                                        vinfos[6].maxsolutions = _nj6;
                                        std::vector<int> vfree(0);
                                        solutions.AddSolution(vinfos, vfree);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            else
                            {
                              {
                                IkReal j6array[1], cj6array[1], sj6array[1];
                                bool j6valid[1] = { false };
                                _nj6 = 1;
                                CheckValue<IkReal> x433 = IKPowWithIntegerCheck(cj5, -1);
                                if (!x433.valid)
                                {
                                  continue;
                                }
                                IkReal x432 = x433.value;
                                CheckValue<IkReal> x434 = IKPowWithIntegerCheck(sj4, -1);
                                if (!x434.valid)
                                {
                                  continue;
                                }
                                if (IKabs(((-1.0) * new_r21 * x432)) < IKFAST_ATAN2_MAGTHRESH &&
                                    IKabs((x432 * (x434.value) *
                                           (((((-1.0) * cj5 * new_r01)) + ((cj4 * new_r21 * sj5)))))) <
                                        IKFAST_ATAN2_MAGTHRESH &&
                                    IKabs(IKsqr(((-1.0) * new_r21 * x432)) +
                                          IKsqr((x432 * (x434.value) *
                                                 (((((-1.0) * cj5 * new_r01)) + ((cj4 * new_r21 * sj5)))))) -
                                          1) <= IKFAST_SINCOS_THRESH)
                                  continue;
                                j6array[0] = IKatan2(
                                    ((-1.0) * new_r21 * x432),
                                    (x432 * (x434.value) * (((((-1.0) * cj5 * new_r01)) + ((cj4 * new_r21 * sj5))))));
                                sj6array[0] = IKsin(j6array[0]);
                                cj6array[0] = IKcos(j6array[0]);
                                if (j6array[0] > IKPI)
                                {
                                  j6array[0] -= IK2PI;
                                }
                                else if (j6array[0] < -IKPI)
                                {
                                  j6array[0] += IK2PI;
                                }
                                j6valid[0] = true;
                                for (int ij6 = 0; ij6 < 1; ++ij6)
                                {
                                  if (!j6valid[ij6])
                                  {
                                    continue;
                                  }
                                  _ij6[0] = ij6;
                                  _ij6[1] = -1;
                                  for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                  {
                                    if (j6valid[iij6] &&
                                        IKabs(cj6array[ij6] - cj6array[iij6]) < IKFAST_SOLUTION_THRESH &&
                                        IKabs(sj6array[ij6] - sj6array[iij6]) < IKFAST_SOLUTION_THRESH)
                                    {
                                      j6valid[iij6] = false;
                                      _ij6[1] = iij6;
                                      break;
                                    }
                                  }
                                  j6 = j6array[ij6];
                                  cj6 = cj6array[ij6];
                                  sj6 = sj6array[ij6];
                                  {
                                    IkReal evalcond[12];
                                    IkReal x435 = IKsin(j6);
                                    IkReal x436 = IKcos(j6);
                                    IkReal x437 = (sj4 * sj5);
                                    IkReal x438 = ((1.0) * sj4);
                                    IkReal x439 = (cj4 * new_r01);
                                    IkReal x440 = (cj4 * new_r00);
                                    IkReal x441 = ((1.0) * x436);
                                    IkReal x442 = (sj5 * x435);
                                    IkReal x443 = ((1.0) * x435);
                                    IkReal x444 = (sj5 * x441);
                                    evalcond[0] = (((cj5 * x435)) + new_r21);
                                    evalcond[1] = ((((-1.0) * cj5 * x441)) + new_r20);
                                    evalcond[2] = (((new_r11 * sj4)) + x439 + x442);
                                    evalcond[3] = ((((-1.0) * new_r00 * x438)) + (((-1.0) * x443)) + ((cj4 * new_r10)));
                                    evalcond[4] = ((((-1.0) * x441)) + (((-1.0) * new_r01 * x438)) + ((cj4 * new_r11)));
                                    evalcond[5] = (((sj4 * x436)) + ((cj4 * x442)) + new_r01);
                                    evalcond[6] = ((((-1.0) * x444)) + ((new_r10 * sj4)) + x440);
                                    evalcond[7] = (((sj4 * x435)) + (((-1.0) * cj4 * x444)) + new_r00);
                                    evalcond[8] = ((((-1.0) * cj4 * x441)) + new_r11 + ((x435 * x437)));
                                    evalcond[9] = ((((-1.0) * x437 * x441)) + (((-1.0) * cj4 * x443)) + new_r10);
                                    evalcond[10] = (((cj5 * new_r21)) + ((new_r11 * x437)) + x435 + ((sj5 * x439)));
                                    evalcond[11] =
                                        ((((-1.0) * x441)) + ((cj5 * new_r20)) + ((new_r10 * x437)) + ((sj5 * x440)));
                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH)
                                    {
                                      continue;
                                    }
                                  }

                                  {
                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                    vinfos[0].jointtype = 1;
                                    vinfos[0].foffset = j0;
                                    vinfos[0].indices[0] = _ij0[0];
                                    vinfos[0].indices[1] = _ij0[1];
                                    vinfos[0].maxsolutions = _nj0;
                                    vinfos[1].jointtype = 17;
                                    vinfos[1].foffset = j1;
                                    vinfos[1].indices[0] = _ij1[0];
                                    vinfos[1].indices[1] = _ij1[1];
                                    vinfos[1].maxsolutions = _nj1;
                                    vinfos[2].jointtype = 17;
                                    vinfos[2].foffset = j2;
                                    vinfos[2].indices[0] = _ij2[0];
                                    vinfos[2].indices[1] = _ij2[1];
                                    vinfos[2].maxsolutions = _nj2;
                                    vinfos[3].jointtype = 17;
                                    vinfos[3].foffset = j3;
                                    vinfos[3].indices[0] = _ij3[0];
                                    vinfos[3].indices[1] = _ij3[1];
                                    vinfos[3].maxsolutions = _nj3;
                                    vinfos[4].jointtype = 1;
                                    vinfos[4].foffset = j4;
                                    vinfos[4].indices[0] = _ij4[0];
                                    vinfos[4].indices[1] = _ij4[1];
                                    vinfos[4].maxsolutions = _nj4;
                                    vinfos[5].jointtype = 1;
                                    vinfos[5].foffset = j5;
                                    vinfos[5].indices[0] = _ij5[0];
                                    vinfos[5].indices[1] = _ij5[1];
                                    vinfos[5].maxsolutions = _nj5;
                                    vinfos[6].jointtype = 1;
                                    vinfos[6].foffset = j6;
                                    vinfos[6].indices[0] = _ij6[0];
                                    vinfos[6].indices[1] = _ij6[1];
                                    vinfos[6].maxsolutions = _nj6;
                                    std::vector<int> vfree(0);
                                    solutions.AddSolution(vinfos, vfree);
                                  }
                                }
                              }
                            }
                          }
                        }
                        else
                        {
                          {
                            IkReal j6array[1], cj6array[1], sj6array[1];
                            bool j6valid[1] = { false };
                            _nj6 = 1;
                            CheckValue<IkReal> x445 =
                                IKatan2WithCheck(IkReal(((-1.0) * new_r21)), IkReal(new_r20), IKFAST_ATAN2_MAGTHRESH);
                            if (!x445.valid)
                            {
                              continue;
                            }
                            CheckValue<IkReal> x446 = IKPowWithIntegerCheck(IKsign(cj5), -1);
                            if (!x446.valid)
                            {
                              continue;
                            }
                            j6array[0] = ((-1.5707963267949) + (x445.value) + (((1.5707963267949) * (x446.value))));
                            sj6array[0] = IKsin(j6array[0]);
                            cj6array[0] = IKcos(j6array[0]);
                            if (j6array[0] > IKPI)
                            {
                              j6array[0] -= IK2PI;
                            }
                            else if (j6array[0] < -IKPI)
                            {
                              j6array[0] += IK2PI;
                            }
                            j6valid[0] = true;
                            for (int ij6 = 0; ij6 < 1; ++ij6)
                            {
                              if (!j6valid[ij6])
                              {
                                continue;
                              }
                              _ij6[0] = ij6;
                              _ij6[1] = -1;
                              for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                              {
                                if (j6valid[iij6] && IKabs(cj6array[ij6] - cj6array[iij6]) < IKFAST_SOLUTION_THRESH &&
                                    IKabs(sj6array[ij6] - sj6array[iij6]) < IKFAST_SOLUTION_THRESH)
                                {
                                  j6valid[iij6] = false;
                                  _ij6[1] = iij6;
                                  break;
                                }
                              }
                              j6 = j6array[ij6];
                              cj6 = cj6array[ij6];
                              sj6 = sj6array[ij6];
                              {
                                IkReal evalcond[12];
                                IkReal x447 = IKsin(j6);
                                IkReal x448 = IKcos(j6);
                                IkReal x449 = (sj4 * sj5);
                                IkReal x450 = ((1.0) * sj4);
                                IkReal x451 = (cj4 * new_r01);
                                IkReal x452 = (cj4 * new_r00);
                                IkReal x453 = ((1.0) * x448);
                                IkReal x454 = (sj5 * x447);
                                IkReal x455 = ((1.0) * x447);
                                IkReal x456 = (sj5 * x453);
                                evalcond[0] = (((cj5 * x447)) + new_r21);
                                evalcond[1] = ((((-1.0) * cj5 * x453)) + new_r20);
                                evalcond[2] = (((new_r11 * sj4)) + x454 + x451);
                                evalcond[3] = (((cj4 * new_r10)) + (((-1.0) * new_r00 * x450)) + (((-1.0) * x455)));
                                evalcond[4] = (((cj4 * new_r11)) + (((-1.0) * new_r01 * x450)) + (((-1.0) * x453)));
                                evalcond[5] = (((sj4 * x448)) + ((cj4 * x454)) + new_r01);
                                evalcond[6] = (((new_r10 * sj4)) + (((-1.0) * x456)) + x452);
                                evalcond[7] = (((sj4 * x447)) + (((-1.0) * cj4 * x456)) + new_r00);
                                evalcond[8] = (((x447 * x449)) + (((-1.0) * cj4 * x453)) + new_r11);
                                evalcond[9] = ((((-1.0) * cj4 * x455)) + new_r10 + (((-1.0) * x449 * x453)));
                                evalcond[10] = (((cj5 * new_r21)) + ((new_r11 * x449)) + x447 + ((sj5 * x451)));
                                evalcond[11] =
                                    (((cj5 * new_r20)) + (((-1.0) * x453)) + ((new_r10 * x449)) + ((sj5 * x452)));
                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH)
                                {
                                  continue;
                                }
                              }

                              {
                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                vinfos[0].jointtype = 1;
                                vinfos[0].foffset = j0;
                                vinfos[0].indices[0] = _ij0[0];
                                vinfos[0].indices[1] = _ij0[1];
                                vinfos[0].maxsolutions = _nj0;
                                vinfos[1].jointtype = 17;
                                vinfos[1].foffset = j1;
                                vinfos[1].indices[0] = _ij1[0];
                                vinfos[1].indices[1] = _ij1[1];
                                vinfos[1].maxsolutions = _nj1;
                                vinfos[2].jointtype = 17;
                                vinfos[2].foffset = j2;
                                vinfos[2].indices[0] = _ij2[0];
                                vinfos[2].indices[1] = _ij2[1];
                                vinfos[2].maxsolutions = _nj2;
                                vinfos[3].jointtype = 17;
                                vinfos[3].foffset = j3;
                                vinfos[3].indices[0] = _ij3[0];
                                vinfos[3].indices[1] = _ij3[1];
                                vinfos[3].maxsolutions = _nj3;
                                vinfos[4].jointtype = 1;
                                vinfos[4].foffset = j4;
                                vinfos[4].indices[0] = _ij4[0];
                                vinfos[4].indices[1] = _ij4[1];
                                vinfos[4].maxsolutions = _nj4;
                                vinfos[5].jointtype = 1;
                                vinfos[5].foffset = j5;
                                vinfos[5].indices[0] = _ij5[0];
                                vinfos[5].indices[1] = _ij5[1];
                                vinfos[5].maxsolutions = _nj5;
                                vinfos[6].jointtype = 1;
                                vinfos[6].foffset = j6;
                                vinfos[6].indices[0] = _ij6[0];
                                vinfos[6].indices[1] = _ij6[1];
                                vinfos[6].maxsolutions = _nj6;
                                std::vector<int> vfree(0);
                                solutions.AddSolution(vinfos, vfree);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            else
            {
              {
                IkReal j6array[1], cj6array[1], sj6array[1];
                bool j6valid[1] = { false };
                _nj6 = 1;
                CheckValue<IkReal> x457 =
                    IKatan2WithCheck(IkReal(((-1.0) * new_r21)), IkReal(new_r20), IKFAST_ATAN2_MAGTHRESH);
                if (!x457.valid)
                {
                  continue;
                }
                CheckValue<IkReal> x458 = IKPowWithIntegerCheck(IKsign(cj5), -1);
                if (!x458.valid)
                {
                  continue;
                }
                j6array[0] = ((-1.5707963267949) + (x457.value) + (((1.5707963267949) * (x458.value))));
                sj6array[0] = IKsin(j6array[0]);
                cj6array[0] = IKcos(j6array[0]);
                if (j6array[0] > IKPI)
                {
                  j6array[0] -= IK2PI;
                }
                else if (j6array[0] < -IKPI)
                {
                  j6array[0] += IK2PI;
                }
                j6valid[0] = true;
                for (int ij6 = 0; ij6 < 1; ++ij6)
                {
                  if (!j6valid[ij6])
                  {
                    continue;
                  }
                  _ij6[0] = ij6;
                  _ij6[1] = -1;
                  for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                  {
                    if (j6valid[iij6] && IKabs(cj6array[ij6] - cj6array[iij6]) < IKFAST_SOLUTION_THRESH &&
                        IKabs(sj6array[ij6] - sj6array[iij6]) < IKFAST_SOLUTION_THRESH)
                    {
                      j6valid[iij6] = false;
                      _ij6[1] = iij6;
                      break;
                    }
                  }
                  j6 = j6array[ij6];
                  cj6 = cj6array[ij6];
                  sj6 = sj6array[ij6];
                  {
                    IkReal evalcond[2];
                    evalcond[0] = (((cj5 * (IKsin(j6)))) + new_r21);
                    evalcond[1] = ((((-1.0) * cj5 * (IKcos(j6)))) + new_r20);
                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH)
                    {
                      continue;
                    }
                  }

                  {
                    IkReal j4eval[3];
                    j4eval[0] = cj5;
                    j4eval[1] = IKsign(cj5);
                    j4eval[2] = ((IKabs(new_r12)) + (IKabs(new_r02)));
                    if (IKabs(j4eval[0]) < 0.0000010000000000 || IKabs(j4eval[1]) < 0.0000010000000000 ||
                        IKabs(j4eval[2]) < 0.0000010000000000)
                    {
                      {
                        IkReal j4eval[2];
                        j4eval[0] = cj5;
                        j4eval[1] = new_r12;
                        if (IKabs(j4eval[0]) < 0.0000010000000000 || IKabs(j4eval[1]) < 0.0000010000000000)
                        {
                          {
                            IkReal evalcond[5];
                            bool bgotonextstatement = true;
                            do
                            {
                              evalcond[0] = ((-3.14159265358979) +
                                             (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j5)))),
                                                     6.28318530717959)));
                              evalcond[1] = new_r02;
                              evalcond[2] = new_r12;
                              evalcond[3] = new_r21;
                              evalcond[4] = new_r20;
                              if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 &&
                                  IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000 &&
                                  IKabs(evalcond[4]) < 0.0000050000000000)
                              {
                                bgotonextstatement = false;
                                {
                                  IkReal j4array[1], cj4array[1], sj4array[1];
                                  bool j4valid[1] = { false };
                                  _nj4 = 1;
                                  IkReal x459 = ((1.0) * sj6);
                                  if (IKabs(((((-1.0) * cj6 * new_r01)) + (((-1.0) * new_r00 * x459)))) <
                                          IKFAST_ATAN2_MAGTHRESH &&
                                      IKabs(((((-1.0) * new_r01 * x459)) + ((cj6 * new_r00)))) <
                                          IKFAST_ATAN2_MAGTHRESH &&
                                      IKabs(IKsqr(((((-1.0) * cj6 * new_r01)) + (((-1.0) * new_r00 * x459)))) +
                                            IKsqr(((((-1.0) * new_r01 * x459)) + ((cj6 * new_r00)))) - 1) <=
                                          IKFAST_SINCOS_THRESH)
                                    continue;
                                  j4array[0] = IKatan2(((((-1.0) * cj6 * new_r01)) + (((-1.0) * new_r00 * x459))),
                                                       ((((-1.0) * new_r01 * x459)) + ((cj6 * new_r00))));
                                  sj4array[0] = IKsin(j4array[0]);
                                  cj4array[0] = IKcos(j4array[0]);
                                  if (j4array[0] > IKPI)
                                  {
                                    j4array[0] -= IK2PI;
                                  }
                                  else if (j4array[0] < -IKPI)
                                  {
                                    j4array[0] += IK2PI;
                                  }
                                  j4valid[0] = true;
                                  for (int ij4 = 0; ij4 < 1; ++ij4)
                                  {
                                    if (!j4valid[ij4])
                                    {
                                      continue;
                                    }
                                    _ij4[0] = ij4;
                                    _ij4[1] = -1;
                                    for (int iij4 = ij4 + 1; iij4 < 1; ++iij4)
                                    {
                                      if (j4valid[iij4] &&
                                          IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH &&
                                          IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                                      {
                                        j4valid[iij4] = false;
                                        _ij4[1] = iij4;
                                        break;
                                      }
                                    }
                                    j4 = j4array[ij4];
                                    cj4 = cj4array[ij4];
                                    sj4 = sj4array[ij4];
                                    {
                                      IkReal evalcond[8];
                                      IkReal x460 = IKcos(j4);
                                      IkReal x461 = IKsin(j4);
                                      IkReal x462 = ((1.0) * cj6);
                                      IkReal x463 = (sj6 * x461);
                                      IkReal x464 = (cj6 * x461);
                                      IkReal x465 = (sj6 * x460);
                                      IkReal x466 = ((1.0) * x461);
                                      IkReal x467 = (x460 * x462);
                                      evalcond[0] = (((new_r11 * x461)) + sj6 + ((new_r01 * x460)));
                                      evalcond[1] = (x465 + x464 + new_r01);
                                      evalcond[2] = ((((-1.0) * x467)) + x463 + new_r00);
                                      evalcond[3] = ((((-1.0) * x467)) + x463 + new_r11);
                                      evalcond[4] = (((new_r10 * x461)) + ((new_r00 * x460)) + (((-1.0) * x462)));
                                      evalcond[5] = ((((-1.0) * x465)) + (((-1.0) * x461 * x462)) + new_r10);
                                      evalcond[6] =
                                          ((((-1.0) * sj6)) + ((new_r10 * x460)) + (((-1.0) * new_r00 * x466)));
                                      evalcond[7] =
                                          (((new_r11 * x460)) + (((-1.0) * new_r01 * x466)) + (((-1.0) * x462)));
                                      if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                          IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                          IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                          IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                          IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                          IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                          IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                          IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                      {
                                        continue;
                                      }
                                    }

                                    {
                                      std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                      vinfos[0].jointtype = 1;
                                      vinfos[0].foffset = j0;
                                      vinfos[0].indices[0] = _ij0[0];
                                      vinfos[0].indices[1] = _ij0[1];
                                      vinfos[0].maxsolutions = _nj0;
                                      vinfos[1].jointtype = 17;
                                      vinfos[1].foffset = j1;
                                      vinfos[1].indices[0] = _ij1[0];
                                      vinfos[1].indices[1] = _ij1[1];
                                      vinfos[1].maxsolutions = _nj1;
                                      vinfos[2].jointtype = 17;
                                      vinfos[2].foffset = j2;
                                      vinfos[2].indices[0] = _ij2[0];
                                      vinfos[2].indices[1] = _ij2[1];
                                      vinfos[2].maxsolutions = _nj2;
                                      vinfos[3].jointtype = 17;
                                      vinfos[3].foffset = j3;
                                      vinfos[3].indices[0] = _ij3[0];
                                      vinfos[3].indices[1] = _ij3[1];
                                      vinfos[3].maxsolutions = _nj3;
                                      vinfos[4].jointtype = 1;
                                      vinfos[4].foffset = j4;
                                      vinfos[4].indices[0] = _ij4[0];
                                      vinfos[4].indices[1] = _ij4[1];
                                      vinfos[4].maxsolutions = _nj4;
                                      vinfos[5].jointtype = 1;
                                      vinfos[5].foffset = j5;
                                      vinfos[5].indices[0] = _ij5[0];
                                      vinfos[5].indices[1] = _ij5[1];
                                      vinfos[5].maxsolutions = _nj5;
                                      vinfos[6].jointtype = 1;
                                      vinfos[6].foffset = j6;
                                      vinfos[6].indices[0] = _ij6[0];
                                      vinfos[6].indices[1] = _ij6[1];
                                      vinfos[6].maxsolutions = _nj6;
                                      std::vector<int> vfree(0);
                                      solutions.AddSolution(vinfos, vfree);
                                    }
                                  }
                                }
                              }
                            } while (0);
                            if (bgotonextstatement)
                            {
                              bool bgotonextstatement = true;
                              do
                              {
                                evalcond[0] = ((-3.14159265358979) +
                                               (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j5)))),
                                                       6.28318530717959)));
                                evalcond[1] = new_r02;
                                evalcond[2] = new_r12;
                                evalcond[3] = new_r21;
                                evalcond[4] = new_r20;
                                if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                    IKabs(evalcond[1]) < 0.0000050000000000 &&
                                    IKabs(evalcond[2]) < 0.0000050000000000 &&
                                    IKabs(evalcond[3]) < 0.0000050000000000 && IKabs(evalcond[4]) < 0.0000050000000000)
                                {
                                  bgotonextstatement = false;
                                  {
                                    IkReal j4array[1], cj4array[1], sj4array[1];
                                    bool j4valid[1] = { false };
                                    _nj4 = 1;
                                    IkReal x468 = ((1.0) * new_r00);
                                    if (IKabs(((((-1.0) * cj6 * new_r01)) + (((-1.0) * sj6 * x468)))) <
                                            IKFAST_ATAN2_MAGTHRESH &&
                                        IKabs((((new_r01 * sj6)) + (((-1.0) * cj6 * x468)))) < IKFAST_ATAN2_MAGTHRESH &&
                                        IKabs(IKsqr(((((-1.0) * cj6 * new_r01)) + (((-1.0) * sj6 * x468)))) +
                                              IKsqr((((new_r01 * sj6)) + (((-1.0) * cj6 * x468)))) - 1) <=
                                            IKFAST_SINCOS_THRESH)
                                      continue;
                                    j4array[0] = IKatan2(((((-1.0) * cj6 * new_r01)) + (((-1.0) * sj6 * x468))),
                                                         (((new_r01 * sj6)) + (((-1.0) * cj6 * x468))));
                                    sj4array[0] = IKsin(j4array[0]);
                                    cj4array[0] = IKcos(j4array[0]);
                                    if (j4array[0] > IKPI)
                                    {
                                      j4array[0] -= IK2PI;
                                    }
                                    else if (j4array[0] < -IKPI)
                                    {
                                      j4array[0] += IK2PI;
                                    }
                                    j4valid[0] = true;
                                    for (int ij4 = 0; ij4 < 1; ++ij4)
                                    {
                                      if (!j4valid[ij4])
                                      {
                                        continue;
                                      }
                                      _ij4[0] = ij4;
                                      _ij4[1] = -1;
                                      for (int iij4 = ij4 + 1; iij4 < 1; ++iij4)
                                      {
                                        if (j4valid[iij4] &&
                                            IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH &&
                                            IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                                        {
                                          j4valid[iij4] = false;
                                          _ij4[1] = iij4;
                                          break;
                                        }
                                      }
                                      j4 = j4array[ij4];
                                      cj4 = cj4array[ij4];
                                      sj4 = sj4array[ij4];
                                      {
                                        IkReal evalcond[8];
                                        IkReal x469 = IKsin(j4);
                                        IkReal x470 = IKcos(j4);
                                        IkReal x471 = ((1.0) * sj6);
                                        IkReal x472 = (cj6 * x469);
                                        IkReal x473 = (cj6 * x470);
                                        IkReal x474 = ((1.0) * x469);
                                        IkReal x475 = (x470 * x471);
                                        evalcond[0] = (((new_r10 * x469)) + cj6 + ((new_r00 * x470)));
                                        evalcond[1] = (((sj6 * x469)) + x473 + new_r00);
                                        evalcond[2] = ((((-1.0) * x475)) + x472 + new_r01);
                                        evalcond[3] = ((((-1.0) * x475)) + x472 + new_r10);
                                        evalcond[4] = (((new_r11 * x469)) + ((new_r01 * x470)) + (((-1.0) * x471)));
                                        evalcond[5] = ((((-1.0) * x469 * x471)) + (((-1.0) * x473)) + new_r11);
                                        evalcond[6] =
                                            (((new_r10 * x470)) + (((-1.0) * new_r00 * x474)) + (((-1.0) * x471)));
                                        evalcond[7] =
                                            (((new_r11 * x470)) + (((-1.0) * new_r01 * x474)) + (((-1.0) * cj6)));
                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                        {
                                          continue;
                                        }
                                      }

                                      {
                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                        vinfos[0].jointtype = 1;
                                        vinfos[0].foffset = j0;
                                        vinfos[0].indices[0] = _ij0[0];
                                        vinfos[0].indices[1] = _ij0[1];
                                        vinfos[0].maxsolutions = _nj0;
                                        vinfos[1].jointtype = 17;
                                        vinfos[1].foffset = j1;
                                        vinfos[1].indices[0] = _ij1[0];
                                        vinfos[1].indices[1] = _ij1[1];
                                        vinfos[1].maxsolutions = _nj1;
                                        vinfos[2].jointtype = 17;
                                        vinfos[2].foffset = j2;
                                        vinfos[2].indices[0] = _ij2[0];
                                        vinfos[2].indices[1] = _ij2[1];
                                        vinfos[2].maxsolutions = _nj2;
                                        vinfos[3].jointtype = 17;
                                        vinfos[3].foffset = j3;
                                        vinfos[3].indices[0] = _ij3[0];
                                        vinfos[3].indices[1] = _ij3[1];
                                        vinfos[3].maxsolutions = _nj3;
                                        vinfos[4].jointtype = 1;
                                        vinfos[4].foffset = j4;
                                        vinfos[4].indices[0] = _ij4[0];
                                        vinfos[4].indices[1] = _ij4[1];
                                        vinfos[4].maxsolutions = _nj4;
                                        vinfos[5].jointtype = 1;
                                        vinfos[5].foffset = j5;
                                        vinfos[5].indices[0] = _ij5[0];
                                        vinfos[5].indices[1] = _ij5[1];
                                        vinfos[5].maxsolutions = _nj5;
                                        vinfos[6].jointtype = 1;
                                        vinfos[6].foffset = j6;
                                        vinfos[6].indices[0] = _ij6[0];
                                        vinfos[6].indices[1] = _ij6[1];
                                        vinfos[6].maxsolutions = _nj6;
                                        std::vector<int> vfree(0);
                                        solutions.AddSolution(vinfos, vfree);
                                      }
                                    }
                                  }
                                }
                              } while (0);
                              if (bgotonextstatement)
                              {
                                bool bgotonextstatement = true;
                                do
                                {
                                  evalcond[0] = ((IKabs(new_r12)) + (IKabs(new_r02)));
                                  if (IKabs(evalcond[0]) < 0.0000050000000000)
                                  {
                                    bgotonextstatement = false;
                                    {
                                      IkReal j4eval[1];
                                      new_r02 = 0;
                                      new_r12 = 0;
                                      new_r20 = 0;
                                      new_r21 = 0;
                                      j4eval[0] = ((IKabs(new_r11)) + (IKabs(new_r01)));
                                      if (IKabs(j4eval[0]) < 0.0000010000000000)
                                      {
                                        {
                                          IkReal j4eval[1];
                                          new_r02 = 0;
                                          new_r12 = 0;
                                          new_r20 = 0;
                                          new_r21 = 0;
                                          j4eval[0] = ((IKabs(new_r10)) + (IKabs(new_r00)));
                                          if (IKabs(j4eval[0]) < 0.0000010000000000)
                                          {
                                            {
                                              IkReal j4eval[1];
                                              new_r02 = 0;
                                              new_r12 = 0;
                                              new_r20 = 0;
                                              new_r21 = 0;
                                              j4eval[0] = ((IKabs((new_r11 * new_r22))) + (IKabs((new_r01 * new_r22))));
                                              if (IKabs(j4eval[0]) < 0.0000010000000000)
                                              {
                                                continue;  // no branches [j4]
                                              }
                                              else
                                              {
                                                {
                                                  IkReal j4array[2], cj4array[2], sj4array[2];
                                                  bool j4valid[2] = { false };
                                                  _nj4 = 2;
                                                  CheckValue<IkReal> x477 =
                                                      IKatan2WithCheck(IkReal((new_r01 * new_r22)),
                                                                       IkReal((new_r11 * new_r22)),
                                                                       IKFAST_ATAN2_MAGTHRESH);
                                                  if (!x477.valid)
                                                  {
                                                    continue;
                                                  }
                                                  IkReal x476 = x477.value;
                                                  j4array[0] = ((-1.0) * x476);
                                                  sj4array[0] = IKsin(j4array[0]);
                                                  cj4array[0] = IKcos(j4array[0]);
                                                  j4array[1] = ((3.14159265358979) + (((-1.0) * x476)));
                                                  sj4array[1] = IKsin(j4array[1]);
                                                  cj4array[1] = IKcos(j4array[1]);
                                                  if (j4array[0] > IKPI)
                                                  {
                                                    j4array[0] -= IK2PI;
                                                  }
                                                  else if (j4array[0] < -IKPI)
                                                  {
                                                    j4array[0] += IK2PI;
                                                  }
                                                  j4valid[0] = true;
                                                  if (j4array[1] > IKPI)
                                                  {
                                                    j4array[1] -= IK2PI;
                                                  }
                                                  else if (j4array[1] < -IKPI)
                                                  {
                                                    j4array[1] += IK2PI;
                                                  }
                                                  j4valid[1] = true;
                                                  for (int ij4 = 0; ij4 < 2; ++ij4)
                                                  {
                                                    if (!j4valid[ij4])
                                                    {
                                                      continue;
                                                    }
                                                    _ij4[0] = ij4;
                                                    _ij4[1] = -1;
                                                    for (int iij4 = ij4 + 1; iij4 < 2; ++iij4)
                                                    {
                                                      if (j4valid[iij4] &&
                                                          IKabs(cj4array[ij4] - cj4array[iij4]) <
                                                              IKFAST_SOLUTION_THRESH &&
                                                          IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                                                      {
                                                        j4valid[iij4] = false;
                                                        _ij4[1] = iij4;
                                                        break;
                                                      }
                                                    }
                                                    j4 = j4array[ij4];
                                                    cj4 = cj4array[ij4];
                                                    sj4 = sj4array[ij4];
                                                    {
                                                      IkReal evalcond[5];
                                                      IkReal x478 = IKcos(j4);
                                                      IkReal x479 = IKsin(j4);
                                                      IkReal x480 = (new_r00 * x478);
                                                      IkReal x481 = (new_r10 * x479);
                                                      IkReal x482 = ((1.0) * x479);
                                                      evalcond[0] = (((new_r01 * x478)) + ((new_r11 * x479)));
                                                      evalcond[1] = (x481 + x480);
                                                      evalcond[2] = ((((-1.0) * new_r00 * x482)) + ((new_r10 * x478)));
                                                      evalcond[3] = ((((-1.0) * new_r01 * x482)) + ((new_r11 * x478)));
                                                      evalcond[4] = (((new_r22 * x480)) + ((new_r22 * x481)));
                                                      if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH)
                                                      {
                                                        continue;
                                                      }
                                                    }

                                                    {
                                                      std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                      vinfos[0].jointtype = 1;
                                                      vinfos[0].foffset = j0;
                                                      vinfos[0].indices[0] = _ij0[0];
                                                      vinfos[0].indices[1] = _ij0[1];
                                                      vinfos[0].maxsolutions = _nj0;
                                                      vinfos[1].jointtype = 17;
                                                      vinfos[1].foffset = j1;
                                                      vinfos[1].indices[0] = _ij1[0];
                                                      vinfos[1].indices[1] = _ij1[1];
                                                      vinfos[1].maxsolutions = _nj1;
                                                      vinfos[2].jointtype = 17;
                                                      vinfos[2].foffset = j2;
                                                      vinfos[2].indices[0] = _ij2[0];
                                                      vinfos[2].indices[1] = _ij2[1];
                                                      vinfos[2].maxsolutions = _nj2;
                                                      vinfos[3].jointtype = 17;
                                                      vinfos[3].foffset = j3;
                                                      vinfos[3].indices[0] = _ij3[0];
                                                      vinfos[3].indices[1] = _ij3[1];
                                                      vinfos[3].maxsolutions = _nj3;
                                                      vinfos[4].jointtype = 1;
                                                      vinfos[4].foffset = j4;
                                                      vinfos[4].indices[0] = _ij4[0];
                                                      vinfos[4].indices[1] = _ij4[1];
                                                      vinfos[4].maxsolutions = _nj4;
                                                      vinfos[5].jointtype = 1;
                                                      vinfos[5].foffset = j5;
                                                      vinfos[5].indices[0] = _ij5[0];
                                                      vinfos[5].indices[1] = _ij5[1];
                                                      vinfos[5].maxsolutions = _nj5;
                                                      vinfos[6].jointtype = 1;
                                                      vinfos[6].foffset = j6;
                                                      vinfos[6].indices[0] = _ij6[0];
                                                      vinfos[6].indices[1] = _ij6[1];
                                                      vinfos[6].maxsolutions = _nj6;
                                                      std::vector<int> vfree(0);
                                                      solutions.AddSolution(vinfos, vfree);
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                          else
                                          {
                                            {
                                              IkReal j4array[2], cj4array[2], sj4array[2];
                                              bool j4valid[2] = { false };
                                              _nj4 = 2;
                                              CheckValue<IkReal> x484 = IKatan2WithCheck(
                                                  IkReal(new_r00), IkReal(new_r10), IKFAST_ATAN2_MAGTHRESH);
                                              if (!x484.valid)
                                              {
                                                continue;
                                              }
                                              IkReal x483 = x484.value;
                                              j4array[0] = ((-1.0) * x483);
                                              sj4array[0] = IKsin(j4array[0]);
                                              cj4array[0] = IKcos(j4array[0]);
                                              j4array[1] = ((3.14159265358979) + (((-1.0) * x483)));
                                              sj4array[1] = IKsin(j4array[1]);
                                              cj4array[1] = IKcos(j4array[1]);
                                              if (j4array[0] > IKPI)
                                              {
                                                j4array[0] -= IK2PI;
                                              }
                                              else if (j4array[0] < -IKPI)
                                              {
                                                j4array[0] += IK2PI;
                                              }
                                              j4valid[0] = true;
                                              if (j4array[1] > IKPI)
                                              {
                                                j4array[1] -= IK2PI;
                                              }
                                              else if (j4array[1] < -IKPI)
                                              {
                                                j4array[1] += IK2PI;
                                              }
                                              j4valid[1] = true;
                                              for (int ij4 = 0; ij4 < 2; ++ij4)
                                              {
                                                if (!j4valid[ij4])
                                                {
                                                  continue;
                                                }
                                                _ij4[0] = ij4;
                                                _ij4[1] = -1;
                                                for (int iij4 = ij4 + 1; iij4 < 2; ++iij4)
                                                {
                                                  if (j4valid[iij4] &&
                                                      IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH &&
                                                      IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                                                  {
                                                    j4valid[iij4] = false;
                                                    _ij4[1] = iij4;
                                                    break;
                                                  }
                                                }
                                                j4 = j4array[ij4];
                                                cj4 = cj4array[ij4];
                                                sj4 = sj4array[ij4];
                                                {
                                                  IkReal evalcond[5];
                                                  IkReal x485 = IKcos(j4);
                                                  IkReal x486 = IKsin(j4);
                                                  IkReal x487 = (new_r01 * x485);
                                                  IkReal x488 = (new_r11 * x486);
                                                  IkReal x489 = ((1.0) * x486);
                                                  evalcond[0] = (x488 + x487);
                                                  evalcond[1] = ((((-1.0) * new_r00 * x489)) + ((new_r10 * x485)));
                                                  evalcond[2] = ((((-1.0) * new_r01 * x489)) + ((new_r11 * x485)));
                                                  evalcond[3] = (((new_r22 * x487)) + ((new_r22 * x488)));
                                                  evalcond[4] =
                                                      (((new_r10 * new_r22 * x486)) + ((new_r00 * new_r22 * x485)));
                                                  if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH)
                                                  {
                                                    continue;
                                                  }
                                                }

                                                {
                                                  std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                  vinfos[0].jointtype = 1;
                                                  vinfos[0].foffset = j0;
                                                  vinfos[0].indices[0] = _ij0[0];
                                                  vinfos[0].indices[1] = _ij0[1];
                                                  vinfos[0].maxsolutions = _nj0;
                                                  vinfos[1].jointtype = 17;
                                                  vinfos[1].foffset = j1;
                                                  vinfos[1].indices[0] = _ij1[0];
                                                  vinfos[1].indices[1] = _ij1[1];
                                                  vinfos[1].maxsolutions = _nj1;
                                                  vinfos[2].jointtype = 17;
                                                  vinfos[2].foffset = j2;
                                                  vinfos[2].indices[0] = _ij2[0];
                                                  vinfos[2].indices[1] = _ij2[1];
                                                  vinfos[2].maxsolutions = _nj2;
                                                  vinfos[3].jointtype = 17;
                                                  vinfos[3].foffset = j3;
                                                  vinfos[3].indices[0] = _ij3[0];
                                                  vinfos[3].indices[1] = _ij3[1];
                                                  vinfos[3].maxsolutions = _nj3;
                                                  vinfos[4].jointtype = 1;
                                                  vinfos[4].foffset = j4;
                                                  vinfos[4].indices[0] = _ij4[0];
                                                  vinfos[4].indices[1] = _ij4[1];
                                                  vinfos[4].maxsolutions = _nj4;
                                                  vinfos[5].jointtype = 1;
                                                  vinfos[5].foffset = j5;
                                                  vinfos[5].indices[0] = _ij5[0];
                                                  vinfos[5].indices[1] = _ij5[1];
                                                  vinfos[5].maxsolutions = _nj5;
                                                  vinfos[6].jointtype = 1;
                                                  vinfos[6].foffset = j6;
                                                  vinfos[6].indices[0] = _ij6[0];
                                                  vinfos[6].indices[1] = _ij6[1];
                                                  vinfos[6].maxsolutions = _nj6;
                                                  std::vector<int> vfree(0);
                                                  solutions.AddSolution(vinfos, vfree);
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                      else
                                      {
                                        {
                                          IkReal j4array[2], cj4array[2], sj4array[2];
                                          bool j4valid[2] = { false };
                                          _nj4 = 2;
                                          CheckValue<IkReal> x491 = IKatan2WithCheck(IkReal(new_r01), IkReal(new_r11),
                                                                                     IKFAST_ATAN2_MAGTHRESH);
                                          if (!x491.valid)
                                          {
                                            continue;
                                          }
                                          IkReal x490 = x491.value;
                                          j4array[0] = ((-1.0) * x490);
                                          sj4array[0] = IKsin(j4array[0]);
                                          cj4array[0] = IKcos(j4array[0]);
                                          j4array[1] = ((3.14159265358979) + (((-1.0) * x490)));
                                          sj4array[1] = IKsin(j4array[1]);
                                          cj4array[1] = IKcos(j4array[1]);
                                          if (j4array[0] > IKPI)
                                          {
                                            j4array[0] -= IK2PI;
                                          }
                                          else if (j4array[0] < -IKPI)
                                          {
                                            j4array[0] += IK2PI;
                                          }
                                          j4valid[0] = true;
                                          if (j4array[1] > IKPI)
                                          {
                                            j4array[1] -= IK2PI;
                                          }
                                          else if (j4array[1] < -IKPI)
                                          {
                                            j4array[1] += IK2PI;
                                          }
                                          j4valid[1] = true;
                                          for (int ij4 = 0; ij4 < 2; ++ij4)
                                          {
                                            if (!j4valid[ij4])
                                            {
                                              continue;
                                            }
                                            _ij4[0] = ij4;
                                            _ij4[1] = -1;
                                            for (int iij4 = ij4 + 1; iij4 < 2; ++iij4)
                                            {
                                              if (j4valid[iij4] &&
                                                  IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH &&
                                                  IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                                              {
                                                j4valid[iij4] = false;
                                                _ij4[1] = iij4;
                                                break;
                                              }
                                            }
                                            j4 = j4array[ij4];
                                            cj4 = cj4array[ij4];
                                            sj4 = sj4array[ij4];
                                            {
                                              IkReal evalcond[5];
                                              IkReal x492 = IKcos(j4);
                                              IkReal x493 = IKsin(j4);
                                              IkReal x494 = (new_r00 * x492);
                                              IkReal x495 = (new_r22 * x493);
                                              IkReal x496 = ((1.0) * x493);
                                              evalcond[0] = (((new_r10 * x493)) + x494);
                                              evalcond[1] = ((((-1.0) * new_r00 * x496)) + ((new_r10 * x492)));
                                              evalcond[2] = ((((-1.0) * new_r01 * x496)) + ((new_r11 * x492)));
                                              evalcond[3] = (((new_r01 * new_r22 * x492)) + ((new_r11 * x495)));
                                              evalcond[4] = (((new_r10 * x495)) + ((new_r22 * x494)));
                                              if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH)
                                              {
                                                continue;
                                              }
                                            }

                                            {
                                              std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                              vinfos[0].jointtype = 1;
                                              vinfos[0].foffset = j0;
                                              vinfos[0].indices[0] = _ij0[0];
                                              vinfos[0].indices[1] = _ij0[1];
                                              vinfos[0].maxsolutions = _nj0;
                                              vinfos[1].jointtype = 17;
                                              vinfos[1].foffset = j1;
                                              vinfos[1].indices[0] = _ij1[0];
                                              vinfos[1].indices[1] = _ij1[1];
                                              vinfos[1].maxsolutions = _nj1;
                                              vinfos[2].jointtype = 17;
                                              vinfos[2].foffset = j2;
                                              vinfos[2].indices[0] = _ij2[0];
                                              vinfos[2].indices[1] = _ij2[1];
                                              vinfos[2].maxsolutions = _nj2;
                                              vinfos[3].jointtype = 17;
                                              vinfos[3].foffset = j3;
                                              vinfos[3].indices[0] = _ij3[0];
                                              vinfos[3].indices[1] = _ij3[1];
                                              vinfos[3].maxsolutions = _nj3;
                                              vinfos[4].jointtype = 1;
                                              vinfos[4].foffset = j4;
                                              vinfos[4].indices[0] = _ij4[0];
                                              vinfos[4].indices[1] = _ij4[1];
                                              vinfos[4].maxsolutions = _nj4;
                                              vinfos[5].jointtype = 1;
                                              vinfos[5].foffset = j5;
                                              vinfos[5].indices[0] = _ij5[0];
                                              vinfos[5].indices[1] = _ij5[1];
                                              vinfos[5].maxsolutions = _nj5;
                                              vinfos[6].jointtype = 1;
                                              vinfos[6].foffset = j6;
                                              vinfos[6].indices[0] = _ij6[0];
                                              vinfos[6].indices[1] = _ij6[1];
                                              vinfos[6].maxsolutions = _nj6;
                                              std::vector<int> vfree(0);
                                              solutions.AddSolution(vinfos, vfree);
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                } while (0);
                                if (bgotonextstatement)
                                {
                                  bool bgotonextstatement = true;
                                  do
                                  {
                                    if (1)
                                    {
                                      bgotonextstatement = false;
                                      continue;  // branch miss [j4]
                                    }
                                  } while (0);
                                  if (bgotonextstatement) {}
                                }
                              }
                            }
                          }
                        }
                        else
                        {
                          {
                            IkReal j4array[1], cj4array[1], sj4array[1];
                            bool j4valid[1] = { false };
                            _nj4 = 1;
                            CheckValue<IkReal> x498 = IKPowWithIntegerCheck(cj5, -1);
                            if (!x498.valid)
                            {
                              continue;
                            }
                            IkReal x497 = x498.value;
                            CheckValue<IkReal> x499 = IKPowWithIntegerCheck(new_r12, -1);
                            if (!x499.valid)
                            {
                              continue;
                            }
                            CheckValue<IkReal> x500 = IKPowWithIntegerCheck(x497, -2);
                            if (!x500.valid)
                            {
                              continue;
                            }
                            if (IKabs((x497 * (x499.value) * (((new_r02 * new_r02) + (((-1.0) * (x500.value))))))) <
                                    IKFAST_ATAN2_MAGTHRESH &&
                                IKabs(((-1.0) * new_r02 * x497)) < IKFAST_ATAN2_MAGTHRESH &&
                                IKabs(
                                    IKsqr((x497 * (x499.value) * (((new_r02 * new_r02) + (((-1.0) * (x500.value))))))) +
                                    IKsqr(((-1.0) * new_r02 * x497)) - 1) <= IKFAST_SINCOS_THRESH)
                              continue;
                            j4array[0] =
                                IKatan2((x497 * (x499.value) * (((new_r02 * new_r02) + (((-1.0) * (x500.value)))))),
                                        ((-1.0) * new_r02 * x497));
                            sj4array[0] = IKsin(j4array[0]);
                            cj4array[0] = IKcos(j4array[0]);
                            if (j4array[0] > IKPI)
                            {
                              j4array[0] -= IK2PI;
                            }
                            else if (j4array[0] < -IKPI)
                            {
                              j4array[0] += IK2PI;
                            }
                            j4valid[0] = true;
                            for (int ij4 = 0; ij4 < 1; ++ij4)
                            {
                              if (!j4valid[ij4])
                              {
                                continue;
                              }
                              _ij4[0] = ij4;
                              _ij4[1] = -1;
                              for (int iij4 = ij4 + 1; iij4 < 1; ++iij4)
                              {
                                if (j4valid[iij4] && IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH &&
                                    IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                                {
                                  j4valid[iij4] = false;
                                  _ij4[1] = iij4;
                                  break;
                                }
                              }
                              j4 = j4array[ij4];
                              cj4 = cj4array[ij4];
                              sj4 = sj4array[ij4];
                              {
                                IkReal evalcond[18];
                                IkReal x501 = IKcos(j4);
                                IkReal x502 = IKsin(j4);
                                IkReal x503 = ((1.0) * cj6);
                                IkReal x504 = ((1.0) * sj5);
                                IkReal x505 = (sj5 * sj6);
                                IkReal x506 = (new_r11 * x502);
                                IkReal x507 = (sj6 * x501);
                                IkReal x508 = (cj6 * x502);
                                IkReal x509 = (new_r02 * x501);
                                IkReal x510 = (new_r10 * x502);
                                IkReal x511 = (cj5 * x501);
                                IkReal x512 = (new_r12 * x502);
                                IkReal x513 = (sj5 * x501);
                                IkReal x514 = ((1.0) * x502);
                                IkReal x515 = (x501 * x503);
                                evalcond[0] = (x511 + new_r02);
                                evalcond[1] = (((cj5 * x502)) + new_r12);
                                evalcond[2] = (((new_r12 * x501)) + (((-1.0) * new_r02 * x514)));
                                evalcond[3] = (cj5 + x509 + x512);
                                evalcond[4] = (((x501 * x505)) + x508 + new_r01);
                                evalcond[5] = (x505 + x506 + ((new_r01 * x501)));
                                evalcond[6] = (((sj6 * x502)) + (((-1.0) * x503 * x513)) + new_r00);
                                evalcond[7] = (((x502 * x505)) + new_r11 + (((-1.0) * x515)));
                                evalcond[8] = ((((-1.0) * sj6)) + ((new_r10 * x501)) + (((-1.0) * new_r00 * x514)));
                                evalcond[9] = ((((-1.0) * x503)) + ((new_r11 * x501)) + (((-1.0) * new_r01 * x514)));
                                evalcond[10] = (((new_r00 * x501)) + x510 + (((-1.0) * sj5 * x503)));
                                evalcond[11] = ((((-1.0) * sj5 * x502 * x503)) + new_r10 + (((-1.0) * x507)));
                                evalcond[12] = (((sj5 * x509)) + ((cj5 * new_r22)) + ((sj5 * x512)));
                                evalcond[13] = (((cj5 * x510)) + ((new_r00 * x511)) + (((-1.0) * new_r20 * x504)));
                                evalcond[14] = ((((-1.0) * new_r21 * x504)) + ((new_r01 * x511)) + ((cj5 * x506)));
                                evalcond[15] = (((sj5 * x506)) + ((new_r01 * x513)) + sj6 + ((cj5 * new_r21)));
                                evalcond[16] = ((1.0) + ((cj5 * x512)) + ((cj5 * x509)) + (((-1.0) * new_r22 * x504)));
                                evalcond[17] =
                                    (((new_r00 * x513)) + (((-1.0) * x503)) + ((cj5 * new_r20)) + ((sj5 * x510)));
                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH)
                                {
                                  continue;
                                }
                              }

                              {
                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                vinfos[0].jointtype = 1;
                                vinfos[0].foffset = j0;
                                vinfos[0].indices[0] = _ij0[0];
                                vinfos[0].indices[1] = _ij0[1];
                                vinfos[0].maxsolutions = _nj0;
                                vinfos[1].jointtype = 17;
                                vinfos[1].foffset = j1;
                                vinfos[1].indices[0] = _ij1[0];
                                vinfos[1].indices[1] = _ij1[1];
                                vinfos[1].maxsolutions = _nj1;
                                vinfos[2].jointtype = 17;
                                vinfos[2].foffset = j2;
                                vinfos[2].indices[0] = _ij2[0];
                                vinfos[2].indices[1] = _ij2[1];
                                vinfos[2].maxsolutions = _nj2;
                                vinfos[3].jointtype = 17;
                                vinfos[3].foffset = j3;
                                vinfos[3].indices[0] = _ij3[0];
                                vinfos[3].indices[1] = _ij3[1];
                                vinfos[3].maxsolutions = _nj3;
                                vinfos[4].jointtype = 1;
                                vinfos[4].foffset = j4;
                                vinfos[4].indices[0] = _ij4[0];
                                vinfos[4].indices[1] = _ij4[1];
                                vinfos[4].maxsolutions = _nj4;
                                vinfos[5].jointtype = 1;
                                vinfos[5].foffset = j5;
                                vinfos[5].indices[0] = _ij5[0];
                                vinfos[5].indices[1] = _ij5[1];
                                vinfos[5].maxsolutions = _nj5;
                                vinfos[6].jointtype = 1;
                                vinfos[6].foffset = j6;
                                vinfos[6].indices[0] = _ij6[0];
                                vinfos[6].indices[1] = _ij6[1];
                                vinfos[6].maxsolutions = _nj6;
                                std::vector<int> vfree(0);
                                solutions.AddSolution(vinfos, vfree);
                              }
                            }
                          }
                        }
                      }
                    }
                    else
                    {
                      {
                        IkReal j4array[1], cj4array[1], sj4array[1];
                        bool j4valid[1] = { false };
                        _nj4 = 1;
                        CheckValue<IkReal> x516 = IKPowWithIntegerCheck(IKsign(cj5), -1);
                        if (!x516.valid)
                        {
                          continue;
                        }
                        CheckValue<IkReal> x517 = IKatan2WithCheck(IkReal(((-1.0) * new_r12)),
                                                                   IkReal(((-1.0) * new_r02)), IKFAST_ATAN2_MAGTHRESH);
                        if (!x517.valid)
                        {
                          continue;
                        }
                        j4array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x516.value))) + (x517.value));
                        sj4array[0] = IKsin(j4array[0]);
                        cj4array[0] = IKcos(j4array[0]);
                        if (j4array[0] > IKPI)
                        {
                          j4array[0] -= IK2PI;
                        }
                        else if (j4array[0] < -IKPI)
                        {
                          j4array[0] += IK2PI;
                        }
                        j4valid[0] = true;
                        for (int ij4 = 0; ij4 < 1; ++ij4)
                        {
                          if (!j4valid[ij4])
                          {
                            continue;
                          }
                          _ij4[0] = ij4;
                          _ij4[1] = -1;
                          for (int iij4 = ij4 + 1; iij4 < 1; ++iij4)
                          {
                            if (j4valid[iij4] && IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH &&
                                IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                            {
                              j4valid[iij4] = false;
                              _ij4[1] = iij4;
                              break;
                            }
                          }
                          j4 = j4array[ij4];
                          cj4 = cj4array[ij4];
                          sj4 = sj4array[ij4];
                          {
                            IkReal evalcond[18];
                            IkReal x518 = IKcos(j4);
                            IkReal x519 = IKsin(j4);
                            IkReal x520 = ((1.0) * cj6);
                            IkReal x521 = ((1.0) * sj5);
                            IkReal x522 = (sj5 * sj6);
                            IkReal x523 = (new_r11 * x519);
                            IkReal x524 = (sj6 * x518);
                            IkReal x525 = (cj6 * x519);
                            IkReal x526 = (new_r02 * x518);
                            IkReal x527 = (new_r10 * x519);
                            IkReal x528 = (cj5 * x518);
                            IkReal x529 = (new_r12 * x519);
                            IkReal x530 = (sj5 * x518);
                            IkReal x531 = ((1.0) * x519);
                            IkReal x532 = (x518 * x520);
                            evalcond[0] = (x528 + new_r02);
                            evalcond[1] = (((cj5 * x519)) + new_r12);
                            evalcond[2] = (((new_r12 * x518)) + (((-1.0) * new_r02 * x531)));
                            evalcond[3] = (cj5 + x526 + x529);
                            evalcond[4] = (((x518 * x522)) + x525 + new_r01);
                            evalcond[5] = (((new_r01 * x518)) + x522 + x523);
                            evalcond[6] = ((((-1.0) * x520 * x530)) + ((sj6 * x519)) + new_r00);
                            evalcond[7] = (((x519 * x522)) + (((-1.0) * x532)) + new_r11);
                            evalcond[8] = (((new_r10 * x518)) + (((-1.0) * sj6)) + (((-1.0) * new_r00 * x531)));
                            evalcond[9] = (((new_r11 * x518)) + (((-1.0) * x520)) + (((-1.0) * new_r01 * x531)));
                            evalcond[10] = (((new_r00 * x518)) + (((-1.0) * sj5 * x520)) + x527);
                            evalcond[11] = ((((-1.0) * sj5 * x519 * x520)) + (((-1.0) * x524)) + new_r10);
                            evalcond[12] = (((sj5 * x526)) + ((sj5 * x529)) + ((cj5 * new_r22)));
                            evalcond[13] = (((cj5 * x527)) + (((-1.0) * new_r20 * x521)) + ((new_r00 * x528)));
                            evalcond[14] = (((new_r01 * x528)) + ((cj5 * x523)) + (((-1.0) * new_r21 * x521)));
                            evalcond[15] = (((new_r01 * x530)) + sj6 + ((sj5 * x523)) + ((cj5 * new_r21)));
                            evalcond[16] = ((1.0) + (((-1.0) * new_r22 * x521)) + ((cj5 * x529)) + ((cj5 * x526)));
                            evalcond[17] =
                                (((sj5 * x527)) + (((-1.0) * x520)) + ((cj5 * new_r20)) + ((new_r00 * x530)));
                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH)
                            {
                              continue;
                            }
                          }

                          {
                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                            vinfos[0].jointtype = 1;
                            vinfos[0].foffset = j0;
                            vinfos[0].indices[0] = _ij0[0];
                            vinfos[0].indices[1] = _ij0[1];
                            vinfos[0].maxsolutions = _nj0;
                            vinfos[1].jointtype = 17;
                            vinfos[1].foffset = j1;
                            vinfos[1].indices[0] = _ij1[0];
                            vinfos[1].indices[1] = _ij1[1];
                            vinfos[1].maxsolutions = _nj1;
                            vinfos[2].jointtype = 17;
                            vinfos[2].foffset = j2;
                            vinfos[2].indices[0] = _ij2[0];
                            vinfos[2].indices[1] = _ij2[1];
                            vinfos[2].maxsolutions = _nj2;
                            vinfos[3].jointtype = 17;
                            vinfos[3].foffset = j3;
                            vinfos[3].indices[0] = _ij3[0];
                            vinfos[3].indices[1] = _ij3[1];
                            vinfos[3].maxsolutions = _nj3;
                            vinfos[4].jointtype = 1;
                            vinfos[4].foffset = j4;
                            vinfos[4].indices[0] = _ij4[0];
                            vinfos[4].indices[1] = _ij4[1];
                            vinfos[4].maxsolutions = _nj4;
                            vinfos[5].jointtype = 1;
                            vinfos[5].foffset = j5;
                            vinfos[5].indices[0] = _ij5[0];
                            vinfos[5].indices[1] = _ij5[1];
                            vinfos[5].maxsolutions = _nj5;
                            vinfos[6].jointtype = 1;
                            vinfos[6].foffset = j6;
                            vinfos[6].indices[0] = _ij6[0];
                            vinfos[6].indices[1] = _ij6[1];
                            vinfos[6].maxsolutions = _nj6;
                            std::vector<int> vfree(0);
                            solutions.AddSolution(vinfos, vfree);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  static inline void polyroots3(IkReal rawcoeffs[3 + 1], IkReal rawroots[3], int& numroots)
  {
    using std::complex;
    if (rawcoeffs[0] == 0)
    {
      // solve with one reduced degree
      polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
      return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0 * std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for (int i = 0; i < 3; ++i)
    {
      coeffs[i] = complex<IkReal>(rawcoeffs[i + 1] / rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1, 0);
    roots[1] = complex<IkReal>(0.4, 0.9);  // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for (int i = 2; i < 3; ++i)
    {
      roots[i] = roots[i - 1] * roots[1];
      err[i] = 1.0;
    }
    for (int step = 0; step < maxsteps; ++step)
    {
      bool changed = false;
      for (int i = 0; i < 3; ++i)
      {
        if (err[i] >= tol)
        {
          changed = true;
          // evaluate
          complex<IkReal> x = roots[i] + coeffs[0];
          for (int j = 1; j < 3; ++j)
          {
            x = roots[i] * x + coeffs[j];
          }
          for (int j = 0; j < 3; ++j)
          {
            if (i != j)
            {
              if (roots[i] != roots[j])
              {
                x /= (roots[i] - roots[j]);
              }
            }
          }
          roots[i] -= x;
          err[i] = abs(x);
        }
      }
      if (!changed)
      {
        break;
      }
    }

    numroots = 0;
    bool visited[3] = { false };
    for (int i = 0; i < 3; ++i)
    {
      if (!visited[i])
      {
        // might be a multiple root, in which case it will have more error than the other roots
        // find any neighboring roots, and take the average
        complex<IkReal> newroot = roots[i];
        int n = 1;
        for (int j = i + 1; j < 3; ++j)
        {
          // care about error in real much more than imaginary
          if (abs(real(roots[i]) - real(roots[j])) < tolsqrt && abs(imag(roots[i]) - imag(roots[j])) < 0.002)
          {
            newroot += roots[j];
            n += 1;
            visited[j] = true;
          }
        }
        if (n > 1)
        {
          newroot /= n;
        }
        // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is
        // used, need to use the sqrt
        if (IKabs(imag(newroot)) < tolsqrt)
        {
          rawroots[numroots++] = real(newroot);
        }
      }
    }
  }
  static inline void polyroots2(IkReal rawcoeffs[2 + 1], IkReal rawroots[2], int& numroots)
  {
    IkReal det = rawcoeffs[1] * rawcoeffs[1] - 4 * rawcoeffs[0] * rawcoeffs[2];
    if (det < 0)
    {
      numroots = 0;
    }
    else if (det == 0)
    {
      rawroots[0] = -0.5 * rawcoeffs[1] / rawcoeffs[0];
      numroots = 1;
    }
    else
    {
      det = IKsqrt(det);
      rawroots[0] = (-rawcoeffs[1] + det) / (2 * rawcoeffs[0]);
      rawroots[1] = (-rawcoeffs[1] - det) / (2 * rawcoeffs[0]);  // rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
      numroots = 2;
    }
  }
  static inline void polyroots4(IkReal rawcoeffs[4 + 1], IkReal rawroots[4], int& numroots)
  {
    using std::complex;
    if (rawcoeffs[0] == 0)
    {
      // solve with one reduced degree
      polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
      return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0 * std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for (int i = 0; i < 4; ++i)
    {
      coeffs[i] = complex<IkReal>(rawcoeffs[i + 1] / rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1, 0);
    roots[1] = complex<IkReal>(0.4, 0.9);  // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for (int i = 2; i < 4; ++i)
    {
      roots[i] = roots[i - 1] * roots[1];
      err[i] = 1.0;
    }
    for (int step = 0; step < maxsteps; ++step)
    {
      bool changed = false;
      for (int i = 0; i < 4; ++i)
      {
        if (err[i] >= tol)
        {
          changed = true;
          // evaluate
          complex<IkReal> x = roots[i] + coeffs[0];
          for (int j = 1; j < 4; ++j)
          {
            x = roots[i] * x + coeffs[j];
          }
          for (int j = 0; j < 4; ++j)
          {
            if (i != j)
            {
              if (roots[i] != roots[j])
              {
                x /= (roots[i] - roots[j]);
              }
            }
          }
          roots[i] -= x;
          err[i] = abs(x);
        }
      }
      if (!changed)
      {
        break;
      }
    }

    numroots = 0;
    bool visited[4] = { false };
    for (int i = 0; i < 4; ++i)
    {
      if (!visited[i])
      {
        // might be a multiple root, in which case it will have more error than the other roots
        // find any neighboring roots, and take the average
        complex<IkReal> newroot = roots[i];
        int n = 1;
        for (int j = i + 1; j < 4; ++j)
        {
          // care about error in real much more than imaginary
          if (abs(real(roots[i]) - real(roots[j])) < tolsqrt && abs(imag(roots[i]) - imag(roots[j])) < 0.002)
          {
            newroot += roots[j];
            n += 1;
            visited[j] = true;
          }
        }
        if (n > 1)
        {
          newroot /= n;
        }
        // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is
        // used, need to use the sqrt
        if (IKabs(imag(newroot)) < tolsqrt)
        {
          rawroots[numroots++] = real(newroot);
        }
      }
    }
  }
};

/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree,
                          IkSolutionListBase<IkReal>& solutions)
{
  IKSolver solver;
  return solver.ComputeIk(eetrans, eerot, pfree, solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree,
                           IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip)
{
  IKSolver solver;
  return solver.ComputeIk(eetrans, eerot, pfree, solutions);
}

IKFAST_API const char* GetKinematicsHash()
{
  return "1eb47ac943335787ad125ab6915f89a2";
}

IKFAST_API const char* GetIkFastVersion()
{
  return "0x10000049";
}

#ifdef IKFAST_NAMESPACE
}  // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
  if (argc != 12 + GetNumFreeParameters() + 1)
  {
    printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
           "Returns the ik solutions given the transformation of the end effector specified by\n"
           "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
           "There are %d free parameters that have to be specified.\n\n",
           GetNumFreeParameters());
    return 1;
  }

  IkSolutionList<IkReal> solutions;
  std::vector<IkReal> vfree(GetNumFreeParameters());
  IkReal eerot[9], eetrans[3];
  eerot[0] = atof(argv[1]);
  eerot[1] = atof(argv[2]);
  eerot[2] = atof(argv[3]);
  eetrans[0] = atof(argv[4]);
  eerot[3] = atof(argv[5]);
  eerot[4] = atof(argv[6]);
  eerot[5] = atof(argv[7]);
  eetrans[1] = atof(argv[8]);
  eerot[6] = atof(argv[9]);
  eerot[7] = atof(argv[10]);
  eerot[8] = atof(argv[11]);
  eetrans[2] = atof(argv[12]);
  for (std::size_t i = 0; i < vfree.size(); ++i)
    vfree[i] = atof(argv[13 + i]);
  bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

  if (!bSuccess)
  {
    fprintf(stderr, "Failed to get ik solution\n");
    return -1;
  }

  printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
  std::vector<IkReal> solvalues(GetNumJoints());
  for (std::size_t i = 0; i < solutions.GetNumSolutions(); ++i)
  {
    const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
    printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
    std::vector<IkReal> vsolfree(sol.GetFree().size());
    sol.GetSolution(&solvalues[0], vsolfree.size() > 0 ? &vsolfree[0] : NULL);
    for (std::size_t j = 0; j < solvalues.size(); ++j)
      printf("%.15f, ", solvalues[j]);
    printf("\n");
  }
  return 0;
}

#endif
